import {
  __commonJS,
  require_babylon
} from "./chunk-USRRZKNT.js";

// node_modules/babylonjs-gui/babylon.gui.js
var require_babylon_gui = __commonJS({
  "node_modules/babylonjs-gui/babylon.gui.js"(exports, module) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory(require_babylon());
      else if (typeof define === "function" && define.amd)
        define("babylonjs-gui", ["babylonjs"], factory);
      else if (typeof exports === "object")
        exports["babylonjs-gui"] = factory(require_babylon());
      else
        root["BABYLON"] = root["BABYLON"] || {}, root["BABYLON"]["GUI"] = factory(root["BABYLON"]);
    })(typeof self !== "undefined" ? self : typeof global !== "undefined" ? global : exports, (__WEBPACK_EXTERNAL_MODULE_core_Misc_perfCounter__) => {
      return (
        /******/
        (() => {
          "use strict";
          var __webpack_modules__ = {
            /***/
            "../../../../node_modules/tslib/tslib.es6.js": (
              /*!***************************************************!*\
                !*** ../../../../node_modules/tslib/tslib.es6.js ***!
                \***************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "__assign": () => (
                    /* binding */
                    __assign
                  ),
                  /* harmony export */
                  "__asyncDelegator": () => (
                    /* binding */
                    __asyncDelegator
                  ),
                  /* harmony export */
                  "__asyncGenerator": () => (
                    /* binding */
                    __asyncGenerator
                  ),
                  /* harmony export */
                  "__asyncValues": () => (
                    /* binding */
                    __asyncValues
                  ),
                  /* harmony export */
                  "__await": () => (
                    /* binding */
                    __await
                  ),
                  /* harmony export */
                  "__awaiter": () => (
                    /* binding */
                    __awaiter
                  ),
                  /* harmony export */
                  "__classPrivateFieldGet": () => (
                    /* binding */
                    __classPrivateFieldGet
                  ),
                  /* harmony export */
                  "__classPrivateFieldIn": () => (
                    /* binding */
                    __classPrivateFieldIn
                  ),
                  /* harmony export */
                  "__classPrivateFieldSet": () => (
                    /* binding */
                    __classPrivateFieldSet
                  ),
                  /* harmony export */
                  "__createBinding": () => (
                    /* binding */
                    __createBinding
                  ),
                  /* harmony export */
                  "__decorate": () => (
                    /* binding */
                    __decorate
                  ),
                  /* harmony export */
                  "__exportStar": () => (
                    /* binding */
                    __exportStar
                  ),
                  /* harmony export */
                  "__extends": () => (
                    /* binding */
                    __extends
                  ),
                  /* harmony export */
                  "__generator": () => (
                    /* binding */
                    __generator
                  ),
                  /* harmony export */
                  "__importDefault": () => (
                    /* binding */
                    __importDefault
                  ),
                  /* harmony export */
                  "__importStar": () => (
                    /* binding */
                    __importStar
                  ),
                  /* harmony export */
                  "__makeTemplateObject": () => (
                    /* binding */
                    __makeTemplateObject
                  ),
                  /* harmony export */
                  "__metadata": () => (
                    /* binding */
                    __metadata
                  ),
                  /* harmony export */
                  "__param": () => (
                    /* binding */
                    __param
                  ),
                  /* harmony export */
                  "__read": () => (
                    /* binding */
                    __read
                  ),
                  /* harmony export */
                  "__rest": () => (
                    /* binding */
                    __rest
                  ),
                  /* harmony export */
                  "__spread": () => (
                    /* binding */
                    __spread
                  ),
                  /* harmony export */
                  "__spreadArray": () => (
                    /* binding */
                    __spreadArray
                  ),
                  /* harmony export */
                  "__spreadArrays": () => (
                    /* binding */
                    __spreadArrays
                  ),
                  /* harmony export */
                  "__values": () => (
                    /* binding */
                    __values
                  )
                  /* harmony export */
                });
                var extendStatics = function(d, b) {
                  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                    d2.__proto__ = b2;
                  } || function(d2, b2) {
                    for (var p in b2)
                      if (Object.prototype.hasOwnProperty.call(b2, p))
                        d2[p] = b2[p];
                  };
                  return extendStatics(d, b);
                };
                function __extends(d, b) {
                  if (typeof b !== "function" && b !== null)
                    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                  extendStatics(d, b);
                  function __() {
                    this.constructor = d;
                  }
                  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                }
                var __assign = function() {
                  __assign = Object.assign || function __assign2(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s)
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                function __rest(s, e) {
                  var t = {};
                  for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                      t[p] = s[p];
                  if (s != null && typeof Object.getOwnPropertySymbols === "function")
                    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                        t[p[i]] = s[p[i]];
                    }
                  return t;
                }
                function __decorate(decorators, target, key, desc) {
                  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
                  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                  else
                    for (var i = decorators.length - 1; i >= 0; i--)
                      if (d = decorators[i])
                        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                  return c > 3 && r && Object.defineProperty(target, key, r), r;
                }
                function __param(paramIndex, decorator) {
                  return function(target, key) {
                    decorator(target, key, paramIndex);
                  };
                }
                function __metadata(metadataKey, metadataValue) {
                  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
                    return Reflect.metadata(metadataKey, metadataValue);
                }
                function __awaiter(thisArg, _arguments, P, generator) {
                  function adopt(value) {
                    return value instanceof P ? value : new P(function(resolve) {
                      resolve(value);
                    });
                  }
                  return new (P || (P = Promise))(function(resolve, reject) {
                    function fulfilled(value) {
                      try {
                        step(generator.next(value));
                      } catch (e) {
                        reject(e);
                      }
                    }
                    function rejected(value) {
                      try {
                        step(generator["throw"](value));
                      } catch (e) {
                        reject(e);
                      }
                    }
                    function step(result) {
                      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
                    }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                  });
                }
                function __generator(thisArg, body) {
                  var _ = { label: 0, sent: function() {
                    if (t[0] & 1)
                      throw t[1];
                    return t[1];
                  }, trys: [], ops: [] }, f, y, t, g;
                  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
                    return this;
                  }), g;
                  function verb(n) {
                    return function(v) {
                      return step([n, v]);
                    };
                  }
                  function step(op) {
                    if (f)
                      throw new TypeError("Generator is already executing.");
                    while (g && (g = 0, op[0] && (_ = 0)), _)
                      try {
                        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                          return t;
                        if (y = 0, t)
                          op = [op[0] & 2, t.value];
                        switch (op[0]) {
                          case 0:
                          case 1:
                            t = op;
                            break;
                          case 4:
                            _.label++;
                            return { value: op[1], done: false };
                          case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                          case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                          default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                              _ = 0;
                              continue;
                            }
                            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                              _.label = op[1];
                              break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                              _.label = t[1];
                              t = op;
                              break;
                            }
                            if (t && _.label < t[2]) {
                              _.label = t[2];
                              _.ops.push(op);
                              break;
                            }
                            if (t[2])
                              _.ops.pop();
                            _.trys.pop();
                            continue;
                        }
                        op = body.call(thisArg, _);
                      } catch (e) {
                        op = [6, e];
                        y = 0;
                      } finally {
                        f = t = 0;
                      }
                    if (op[0] & 5)
                      throw op[1];
                    return { value: op[0] ? op[1] : void 0, done: true };
                  }
                }
                var __createBinding = Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  var desc = Object.getOwnPropertyDescriptor(m, k);
                  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                    desc = { enumerable: true, get: function() {
                      return m[k];
                    } };
                  }
                  Object.defineProperty(o, k2, desc);
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                };
                function __exportStar(m, o) {
                  for (var p in m)
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                      __createBinding(o, m, p);
                }
                function __values(o) {
                  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                  if (m)
                    return m.call(o);
                  if (o && typeof o.length === "number")
                    return {
                      next: function() {
                        if (o && i >= o.length)
                          o = void 0;
                        return { value: o && o[i++], done: !o };
                      }
                    };
                  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
                }
                function __read(o, n) {
                  var m = typeof Symbol === "function" && o[Symbol.iterator];
                  if (!m)
                    return o;
                  var i = m.call(o), r, ar = [], e;
                  try {
                    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                      ar.push(r.value);
                  } catch (error) {
                    e = { error };
                  } finally {
                    try {
                      if (r && !r.done && (m = i["return"]))
                        m.call(i);
                    } finally {
                      if (e)
                        throw e.error;
                    }
                  }
                  return ar;
                }
                function __spread() {
                  for (var ar = [], i = 0; i < arguments.length; i++)
                    ar = ar.concat(__read(arguments[i]));
                  return ar;
                }
                function __spreadArrays() {
                  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
                    s += arguments[i].length;
                  for (var r = Array(s), k = 0, i = 0; i < il; i++)
                    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                      r[k] = a[j];
                  return r;
                }
                function __spreadArray(to, from, pack) {
                  if (pack || arguments.length === 2)
                    for (var i = 0, l = from.length, ar; i < l; i++) {
                      if (ar || !(i in from)) {
                        if (!ar)
                          ar = Array.prototype.slice.call(from, 0, i);
                        ar[i] = from[i];
                      }
                    }
                  return to.concat(ar || Array.prototype.slice.call(from));
                }
                function __await(v) {
                  return this instanceof __await ? (this.v = v, this) : new __await(v);
                }
                function __asyncGenerator(thisArg, _arguments, generator) {
                  if (!Symbol.asyncIterator)
                    throw new TypeError("Symbol.asyncIterator is not defined.");
                  var g = generator.apply(thisArg, _arguments || []), i, q = [];
                  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
                    return this;
                  }, i;
                  function verb(n) {
                    if (g[n])
                      i[n] = function(v) {
                        return new Promise(function(a, b) {
                          q.push([n, v, a, b]) > 1 || resume(n, v);
                        });
                      };
                  }
                  function resume(n, v) {
                    try {
                      step(g[n](v));
                    } catch (e) {
                      settle(q[0][3], e);
                    }
                  }
                  function step(r) {
                    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
                  }
                  function fulfill(value) {
                    resume("next", value);
                  }
                  function reject(value) {
                    resume("throw", value);
                  }
                  function settle(f, v) {
                    if (f(v), q.shift(), q.length)
                      resume(q[0][0], q[0][1]);
                  }
                }
                function __asyncDelegator(o) {
                  var i, p;
                  return i = {}, verb("next"), verb("throw", function(e) {
                    throw e;
                  }), verb("return"), i[Symbol.iterator] = function() {
                    return this;
                  }, i;
                  function verb(n, f) {
                    i[n] = o[n] ? function(v) {
                      return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
                    } : f;
                  }
                }
                function __asyncValues(o) {
                  if (!Symbol.asyncIterator)
                    throw new TypeError("Symbol.asyncIterator is not defined.");
                  var m = o[Symbol.asyncIterator], i;
                  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
                    return this;
                  }, i);
                  function verb(n) {
                    i[n] = o[n] && function(v) {
                      return new Promise(function(resolve, reject) {
                        v = o[n](v), settle(resolve, reject, v.done, v.value);
                      });
                    };
                  }
                  function settle(resolve, reject, d, v) {
                    Promise.resolve(v).then(function(v2) {
                      resolve({ value: v2, done: d });
                    }, reject);
                  }
                }
                function __makeTemplateObject(cooked, raw) {
                  if (Object.defineProperty) {
                    Object.defineProperty(cooked, "raw", { value: raw });
                  } else {
                    cooked.raw = raw;
                  }
                  return cooked;
                }
                ;
                var __setModuleDefault = Object.create ? function(o, v) {
                  Object.defineProperty(o, "default", { enumerable: true, value: v });
                } : function(o, v) {
                  o["default"] = v;
                };
                function __importStar(mod) {
                  if (mod && mod.__esModule)
                    return mod;
                  var result = {};
                  if (mod != null) {
                    for (var k in mod)
                      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                        __createBinding(result, mod, k);
                  }
                  __setModuleDefault(result, mod);
                  return result;
                }
                function __importDefault(mod) {
                  return mod && mod.__esModule ? mod : { default: mod };
                }
                function __classPrivateFieldGet(receiver, state, kind, f) {
                  if (kind === "a" && !f)
                    throw new TypeError("Private accessor was defined without a getter");
                  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
                    throw new TypeError("Cannot read private member from an object whose class did not declare it");
                  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
                }
                function __classPrivateFieldSet(receiver, state, value, kind, f) {
                  if (kind === "m")
                    throw new TypeError("Private method is not writable");
                  if (kind === "a" && !f)
                    throw new TypeError("Private accessor was defined without a setter");
                  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
                    throw new TypeError("Cannot write private member to an object whose class did not declare it");
                  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
                }
                function __classPrivateFieldIn(state, receiver) {
                  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
                    throw new TypeError("Cannot use 'in' operator on non-object");
                  return typeof state === "function" ? receiver === state : state.has(receiver);
                }
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/adtInstrumentation.js": (
              /*!******************************************************!*\
                !*** ../../../lts/gui/dist/2D/adtInstrumentation.js ***!
                \******************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "AdvancedDynamicTextureInstrumentation": () => (
                    /* binding */
                    AdvancedDynamicTextureInstrumentation
                  )
                  /* harmony export */
                });
                var core_Misc_perfCounter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Misc/perfCounter */
                  "core/Misc/perfCounter"
                );
                var core_Misc_perfCounter__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Misc_perfCounter__WEBPACK_IMPORTED_MODULE_0__);
                var AdvancedDynamicTextureInstrumentation = (
                  /** @class */
                  function() {
                    function AdvancedDynamicTextureInstrumentation2(texture) {
                      this.texture = texture;
                      this._captureRenderTime = false;
                      this._renderTime = new core_Misc_perfCounter__WEBPACK_IMPORTED_MODULE_0__.PerfCounter();
                      this._captureLayoutTime = false;
                      this._layoutTime = new core_Misc_perfCounter__WEBPACK_IMPORTED_MODULE_0__.PerfCounter();
                      this._onBeginRenderObserver = null;
                      this._onEndRenderObserver = null;
                      this._onBeginLayoutObserver = null;
                      this._onEndLayoutObserver = null;
                    }
                    Object.defineProperty(AdvancedDynamicTextureInstrumentation2.prototype, "renderTimeCounter", {
                      // Properties
                      /**
                       * Gets the perf counter used to capture render time
                       */
                      get: function() {
                        return this._renderTime;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(AdvancedDynamicTextureInstrumentation2.prototype, "layoutTimeCounter", {
                      /**
                       * Gets the perf counter used to capture layout time
                       */
                      get: function() {
                        return this._layoutTime;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(AdvancedDynamicTextureInstrumentation2.prototype, "captureRenderTime", {
                      /**
                       * Enable or disable the render time capture
                       */
                      get: function() {
                        return this._captureRenderTime;
                      },
                      set: function(value) {
                        var _this = this;
                        if (value === this._captureRenderTime) {
                          return;
                        }
                        this._captureRenderTime = value;
                        if (value) {
                          this._onBeginRenderObserver = this.texture.onBeginRenderObservable.add(function() {
                            _this._renderTime.beginMonitoring();
                          });
                          this._onEndRenderObserver = this.texture.onEndRenderObservable.add(function() {
                            _this._renderTime.endMonitoring(true);
                          });
                        } else {
                          this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);
                          this._onBeginRenderObserver = null;
                          this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);
                          this._onEndRenderObserver = null;
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(AdvancedDynamicTextureInstrumentation2.prototype, "captureLayoutTime", {
                      /**
                       * Enable or disable the layout time capture
                       */
                      get: function() {
                        return this._captureLayoutTime;
                      },
                      set: function(value) {
                        var _this = this;
                        if (value === this._captureLayoutTime) {
                          return;
                        }
                        this._captureLayoutTime = value;
                        if (value) {
                          this._onBeginLayoutObserver = this.texture.onBeginLayoutObservable.add(function() {
                            _this._layoutTime.beginMonitoring();
                          });
                          this._onEndLayoutObserver = this.texture.onEndLayoutObservable.add(function() {
                            _this._layoutTime.endMonitoring(true);
                          });
                        } else {
                          this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);
                          this._onBeginLayoutObserver = null;
                          this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);
                          this._onEndLayoutObserver = null;
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    AdvancedDynamicTextureInstrumentation2.prototype.dispose = function() {
                      this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);
                      this._onBeginRenderObserver = null;
                      this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);
                      this._onEndRenderObserver = null;
                      this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);
                      this._onBeginLayoutObserver = null;
                      this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);
                      this._onEndLayoutObserver = null;
                      this.texture = null;
                    };
                    return AdvancedDynamicTextureInstrumentation2;
                  }()
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/advancedDynamicTexture.js": (
              /*!**********************************************************!*\
                !*** ../../../lts/gui/dist/2D/advancedDynamicTexture.js ***!
                \**********************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "AdvancedDynamicTexture": () => (
                    /* binding */
                    AdvancedDynamicTexture
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Misc/stringTools */
                  "core/Misc/perfCounter"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__);
                var _controls_container__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./controls/container */
                  "../../../lts/gui/dist/2D/controls/container.js"
                );
                var _controls_control__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./controls/control */
                  "../../../lts/gui/dist/2D/controls/control.js"
                );
                var _style__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
                  /*! ./style */
                  "../../../lts/gui/dist/2D/style.js"
                );
                var _measure__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
                  /*! ./measure */
                  "../../../lts/gui/dist/2D/measure.js"
                );
                var AdvancedDynamicTexture = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(AdvancedDynamicTexture2, _super);
                    function AdvancedDynamicTexture2(name, width, height, scene, generateMipMaps, samplingMode, invertY) {
                      if (width === void 0) {
                        width = 0;
                      }
                      if (height === void 0) {
                        height = 0;
                      }
                      if (generateMipMaps === void 0) {
                        generateMipMaps = false;
                      }
                      if (samplingMode === void 0) {
                        samplingMode = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Texture.NEAREST_SAMPLINGMODE;
                      }
                      if (invertY === void 0) {
                        invertY = true;
                      }
                      var _this = _super.call(this, name, { width, height }, scene, generateMipMaps, samplingMode, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Constants.TEXTUREFORMAT_RGBA, invertY) || this;
                      _this.onGuiReadyObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this._isDirty = false;
                      _this._rootContainer = new _controls_container__WEBPACK_IMPORTED_MODULE_2__.Container("root");
                      _this._lastControlOver = {};
                      _this._lastControlDown = {};
                      _this._capturingControl = {};
                      _this._linkedControls = new Array();
                      _this._isFullscreen = false;
                      _this._fullscreenViewport = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Viewport(0, 0, 1, 1);
                      _this._idealWidth = 0;
                      _this._idealHeight = 0;
                      _this._useSmallestIdeal = false;
                      _this._renderAtIdealSize = false;
                      _this._blockNextFocusCheck = false;
                      _this._renderScale = 1;
                      _this._cursorChanged = false;
                      _this._defaultMousePointerId = 0;
                      _this._rootChildrenHaveChanged = false;
                      _this._capturedPointerIds = /* @__PURE__ */ new Set();
                      _this._numLayoutCalls = 0;
                      _this._numRenderCalls = 0;
                      _this._clipboardData = "";
                      _this.onClipboardObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this.onControlPickedObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this.onBeginLayoutObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this.onEndLayoutObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this.onBeginRenderObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this.onEndRenderObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this.premulAlpha = false;
                      _this.applyYInversionOnUpdate = true;
                      _this.checkPointerEveryFrame = false;
                      _this._useInvalidateRectOptimization = true;
                      _this._invalidatedRectangle = null;
                      _this._clearMeasure = new _measure__WEBPACK_IMPORTED_MODULE_5__.Measure(0, 0, 0, 0);
                      _this._onClipboardCopy = function(rawEvt) {
                        var evt = rawEvt;
                        var ev = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.ClipboardInfo(core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.ClipboardEventTypes.COPY, evt);
                        _this.onClipboardObservable.notifyObservers(ev);
                        evt.preventDefault();
                      };
                      _this._onClipboardCut = function(rawEvt) {
                        var evt = rawEvt;
                        var ev = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.ClipboardInfo(core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.ClipboardEventTypes.CUT, evt);
                        _this.onClipboardObservable.notifyObservers(ev);
                        evt.preventDefault();
                      };
                      _this._onClipboardPaste = function(rawEvt) {
                        var evt = rawEvt;
                        var ev = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.ClipboardInfo(core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.ClipboardEventTypes.PASTE, evt);
                        _this.onClipboardObservable.notifyObservers(ev);
                        evt.preventDefault();
                      };
                      _this.parseContent = _this.parseSerializedObject;
                      scene = _this.getScene();
                      if (!scene || !_this._texture) {
                        return _this;
                      }
                      _this.applyYInversionOnUpdate = invertY;
                      _this._rootElement = scene.getEngine().getInputElement();
                      _this._renderObserver = scene.onBeforeCameraRenderObservable.add(function(camera) {
                        return _this._checkUpdate(camera);
                      });
                      _this._controlAddedObserver = _this._rootContainer.onControlAddedObservable.add(function(control) {
                        if (control) {
                          _this._rootChildrenHaveChanged = true;
                        }
                      });
                      _this._controlRemovedObserver = _this._rootContainer.onControlRemovedObservable.add(function(control) {
                        if (control) {
                          _this._rootChildrenHaveChanged = true;
                        }
                      });
                      _this._preKeyboardObserver = scene.onPreKeyboardObservable.add(function(info) {
                        if (!_this._focusedControl) {
                          return;
                        }
                        if (info.type === core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.KeyboardEventTypes.KEYDOWN) {
                          _this._focusedControl.processKeyboard(info.event);
                        }
                        info.skipOnPointerObservable = true;
                      });
                      _this._rootContainer._link(_this);
                      _this.hasAlpha = true;
                      if (!width || !height) {
                        _this._resizeObserver = scene.getEngine().onResizeObservable.add(function() {
                          return _this._onResize();
                        });
                        _this._onResize();
                      }
                      _this._texture.isReady = true;
                      return _this;
                    }
                    Object.defineProperty(AdvancedDynamicTexture2.prototype, "numLayoutCalls", {
                      /** Gets the number of layout calls made the last time the ADT has been rendered */
                      get: function() {
                        return this._numLayoutCalls;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(AdvancedDynamicTexture2.prototype, "numRenderCalls", {
                      /** Gets the number of render calls made the last time the ADT has been rendered */
                      get: function() {
                        return this._numRenderCalls;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(AdvancedDynamicTexture2.prototype, "renderScale", {
                      /**
                       * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).
                       * Useful when you want more antialiasing
                       */
                      get: function() {
                        return this._renderScale;
                      },
                      set: function(value) {
                        if (value === this._renderScale) {
                          return;
                        }
                        this._renderScale = value;
                        this._onResize();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(AdvancedDynamicTexture2.prototype, "background", {
                      /** Gets or sets the background color */
                      get: function() {
                        return this._background;
                      },
                      set: function(value) {
                        if (this._background === value) {
                          return;
                        }
                        this._background = value;
                        this.markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(AdvancedDynamicTexture2.prototype, "idealWidth", {
                      /**
                       * Gets or sets the ideal width used to design controls.
                       * The GUI will then rescale everything accordingly
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling
                       */
                      get: function() {
                        return this._idealWidth;
                      },
                      set: function(value) {
                        if (this._idealWidth === value) {
                          return;
                        }
                        this._idealWidth = value;
                        this.markAsDirty();
                        this._rootContainer._markAllAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(AdvancedDynamicTexture2.prototype, "idealHeight", {
                      /**
                       * Gets or sets the ideal height used to design controls.
                       * The GUI will then rescale everything accordingly
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling
                       */
                      get: function() {
                        return this._idealHeight;
                      },
                      set: function(value) {
                        if (this._idealHeight === value) {
                          return;
                        }
                        this._idealHeight = value;
                        this.markAsDirty();
                        this._rootContainer._markAllAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(AdvancedDynamicTexture2.prototype, "useSmallestIdeal", {
                      /**
                       * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling
                       */
                      get: function() {
                        return this._useSmallestIdeal;
                      },
                      set: function(value) {
                        if (this._useSmallestIdeal === value) {
                          return;
                        }
                        this._useSmallestIdeal = value;
                        this.markAsDirty();
                        this._rootContainer._markAllAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(AdvancedDynamicTexture2.prototype, "renderAtIdealSize", {
                      /**
                       * Gets or sets a boolean indicating if adaptive scaling must be used
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling
                       */
                      get: function() {
                        return this._renderAtIdealSize;
                      },
                      set: function(value) {
                        if (this._renderAtIdealSize === value) {
                          return;
                        }
                        this._renderAtIdealSize = value;
                        this._onResize();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(AdvancedDynamicTexture2.prototype, "idealRatio", {
                      /**
                       * Gets the ratio used when in "ideal mode"
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling
                       * */
                      get: function() {
                        var rwidth = 0;
                        var rheight = 0;
                        if (this._idealWidth) {
                          rwidth = this.getSize().width / this._idealWidth;
                        }
                        if (this._idealHeight) {
                          rheight = this.getSize().height / this._idealHeight;
                        }
                        if (this._useSmallestIdeal && this._idealWidth && this._idealHeight) {
                          return window.innerWidth < window.innerHeight ? rwidth : rheight;
                        }
                        if (this._idealWidth) {
                          return rwidth;
                        }
                        if (this._idealHeight) {
                          return rheight;
                        }
                        return 1;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(AdvancedDynamicTexture2.prototype, "layer", {
                      /**
                       * Gets the underlying layer used to render the texture when in fullscreen mode
                       */
                      get: function() {
                        return this._layerToDispose;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(AdvancedDynamicTexture2.prototype, "rootContainer", {
                      /**
                       * Gets the root container control
                       */
                      get: function() {
                        return this._rootContainer;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    AdvancedDynamicTexture2.prototype.getChildren = function() {
                      return [this._rootContainer];
                    };
                    AdvancedDynamicTexture2.prototype.getDescendants = function(directDescendantsOnly, predicate) {
                      return this._rootContainer.getDescendants(directDescendantsOnly, predicate);
                    };
                    AdvancedDynamicTexture2.prototype.getControlsByType = function(typeName) {
                      return this._rootContainer.getDescendants(false, function(control) {
                        return control.typeName === typeName;
                      });
                    };
                    AdvancedDynamicTexture2.prototype.getControlByName = function(name) {
                      return this._getControlByKey("name", name);
                    };
                    AdvancedDynamicTexture2.prototype._getControlByKey = function(key, value) {
                      return this._rootContainer.getDescendants().find(function(control) {
                        return control[key] === value;
                      }) || null;
                    };
                    Object.defineProperty(AdvancedDynamicTexture2.prototype, "focusedControl", {
                      /**
                       * Gets or sets the current focused control
                       */
                      get: function() {
                        return this._focusedControl;
                      },
                      set: function(control) {
                        if (this._focusedControl == control) {
                          return;
                        }
                        if (this._focusedControl) {
                          this._focusedControl.onBlur();
                        }
                        if (control) {
                          control.onFocus();
                        }
                        this._focusedControl = control;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(AdvancedDynamicTexture2.prototype, "isForeground", {
                      /**
                       * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode
                       */
                      get: function() {
                        if (!this.layer) {
                          return true;
                        }
                        return !this.layer.isBackground;
                      },
                      set: function(value) {
                        if (!this.layer) {
                          return;
                        }
                        if (this.layer.isBackground === !value) {
                          return;
                        }
                        this.layer.isBackground = !value;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(AdvancedDynamicTexture2.prototype, "clipboardData", {
                      /**
                       * Gets or set information about clipboardData
                       */
                      get: function() {
                        return this._clipboardData;
                      },
                      set: function(value) {
                        this._clipboardData = value;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    AdvancedDynamicTexture2.prototype.getClassName = function() {
                      return "AdvancedDynamicTexture";
                    };
                    AdvancedDynamicTexture2.prototype.executeOnAllControls = function(func, container) {
                      if (!container) {
                        container = this._rootContainer;
                      }
                      func(container);
                      for (var _i = 0, _a = container.children; _i < _a.length; _i++) {
                        var child = _a[_i];
                        if (child.children) {
                          this.executeOnAllControls(func, child);
                          continue;
                        }
                        func(child);
                      }
                    };
                    Object.defineProperty(AdvancedDynamicTexture2.prototype, "useInvalidateRectOptimization", {
                      /**
                       * Gets or sets a boolean indicating if the InvalidateRect optimization should be turned on
                       */
                      get: function() {
                        return this._useInvalidateRectOptimization;
                      },
                      set: function(value) {
                        this._useInvalidateRectOptimization = value;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    AdvancedDynamicTexture2.prototype.invalidateRect = function(invalidMinX, invalidMinY, invalidMaxX, invalidMaxY) {
                      if (!this._useInvalidateRectOptimization) {
                        return;
                      }
                      if (!this._invalidatedRectangle) {
                        this._invalidatedRectangle = new _measure__WEBPACK_IMPORTED_MODULE_5__.Measure(invalidMinX, invalidMinY, invalidMaxX - invalidMinX + 1, invalidMaxY - invalidMinY + 1);
                      } else {
                        var maxX = Math.ceil(Math.max(this._invalidatedRectangle.left + this._invalidatedRectangle.width - 1, invalidMaxX));
                        var maxY = Math.ceil(Math.max(this._invalidatedRectangle.top + this._invalidatedRectangle.height - 1, invalidMaxY));
                        this._invalidatedRectangle.left = Math.floor(Math.min(this._invalidatedRectangle.left, invalidMinX));
                        this._invalidatedRectangle.top = Math.floor(Math.min(this._invalidatedRectangle.top, invalidMinY));
                        this._invalidatedRectangle.width = maxX - this._invalidatedRectangle.left + 1;
                        this._invalidatedRectangle.height = maxY - this._invalidatedRectangle.top + 1;
                      }
                    };
                    AdvancedDynamicTexture2.prototype.markAsDirty = function() {
                      this._isDirty = true;
                    };
                    AdvancedDynamicTexture2.prototype.createStyle = function() {
                      return new _style__WEBPACK_IMPORTED_MODULE_4__.Style(this);
                    };
                    AdvancedDynamicTexture2.prototype.addControl = function(control) {
                      this._rootContainer.addControl(control);
                      return this;
                    };
                    AdvancedDynamicTexture2.prototype.removeControl = function(control) {
                      this._rootContainer.removeControl(control);
                      return this;
                    };
                    AdvancedDynamicTexture2.prototype.moveToNonOverlappedPosition = function(overlapGroup, deltaStep, repelFactor) {
                      if (deltaStep === void 0) {
                        deltaStep = 1;
                      }
                      if (repelFactor === void 0) {
                        repelFactor = 1;
                      }
                      var controlsForGroup;
                      if (Array.isArray(overlapGroup)) {
                        controlsForGroup = overlapGroup;
                      } else {
                        var descendants = this.getDescendants(true);
                        controlsForGroup = overlapGroup === void 0 ? descendants.filter(function(c) {
                          return c.overlapGroup !== void 0;
                        }) : descendants.filter(function(c) {
                          return c.overlapGroup === overlapGroup;
                        });
                      }
                      controlsForGroup.forEach(function(control1) {
                        var _a;
                        var velocity = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Vector2.Zero();
                        var center = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Vector2(control1.centerX, control1.centerY);
                        controlsForGroup.forEach(function(control2) {
                          if (control1 !== control2 && AdvancedDynamicTexture2._Overlaps(control1, control2)) {
                            var diff = center.subtract(new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Vector2(control2.centerX, control2.centerY));
                            var diffLength = diff.length();
                            if (diffLength > 0) {
                              velocity = velocity.add(diff.normalize().scale(repelFactor / diffLength));
                            }
                          }
                        });
                        if (velocity.length() > 0) {
                          velocity = velocity.normalize().scale(deltaStep * ((_a = control1.overlapDeltaMultiplier) !== null && _a !== void 0 ? _a : 1));
                          control1.linkOffsetXInPixels += velocity.x;
                          control1.linkOffsetYInPixels += velocity.y;
                        }
                      });
                    };
                    AdvancedDynamicTexture2.prototype.dispose = function() {
                      var scene = this.getScene();
                      if (!scene) {
                        return;
                      }
                      this._rootElement = null;
                      scene.onBeforeCameraRenderObservable.remove(this._renderObserver);
                      if (this._resizeObserver) {
                        scene.getEngine().onResizeObservable.remove(this._resizeObserver);
                      }
                      if (this._prePointerObserver) {
                        scene.onPrePointerObservable.remove(this._prePointerObserver);
                      }
                      if (this._sceneRenderObserver) {
                        scene.onBeforeRenderObservable.remove(this._sceneRenderObserver);
                      }
                      if (this._pointerObserver) {
                        scene.onPointerObservable.remove(this._pointerObserver);
                      }
                      if (this._preKeyboardObserver) {
                        scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);
                      }
                      if (this._canvasPointerOutObserver) {
                        scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);
                      }
                      if (this._canvasBlurObserver) {
                        scene.getEngine().onCanvasBlurObservable.remove(this._canvasBlurObserver);
                      }
                      if (this._controlAddedObserver) {
                        this._rootContainer.onControlAddedObservable.remove(this._controlAddedObserver);
                      }
                      if (this._controlRemovedObserver) {
                        this._rootContainer.onControlRemovedObservable.remove(this._controlRemovedObserver);
                      }
                      if (this._layerToDispose) {
                        this._layerToDispose.texture = null;
                        this._layerToDispose.dispose();
                        this._layerToDispose = null;
                      }
                      this._rootContainer.dispose();
                      this.onClipboardObservable.clear();
                      this.onControlPickedObservable.clear();
                      this.onBeginRenderObservable.clear();
                      this.onEndRenderObservable.clear();
                      this.onBeginLayoutObservable.clear();
                      this.onEndLayoutObservable.clear();
                      this.onGuiReadyObservable.clear();
                      _super.prototype.dispose.call(this);
                    };
                    AdvancedDynamicTexture2.prototype._onResize = function() {
                      var scene = this.getScene();
                      if (!scene) {
                        return;
                      }
                      var engine = scene.getEngine();
                      var textureSize = this.getSize();
                      var renderWidth = engine.getRenderWidth() * this._renderScale;
                      var renderHeight = engine.getRenderHeight() * this._renderScale;
                      if (this._renderAtIdealSize) {
                        if (this._idealWidth) {
                          renderHeight = renderHeight * this._idealWidth / renderWidth;
                          renderWidth = this._idealWidth;
                        } else if (this._idealHeight) {
                          renderWidth = renderWidth * this._idealHeight / renderHeight;
                          renderHeight = this._idealHeight;
                        }
                      }
                      if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {
                        this.scaleTo(renderWidth, renderHeight);
                        this.markAsDirty();
                        if (this._idealWidth || this._idealHeight) {
                          this._rootContainer._markAllAsDirty();
                        }
                      }
                      this.invalidateRect(0, 0, textureSize.width - 1, textureSize.height - 1);
                    };
                    AdvancedDynamicTexture2.prototype._getGlobalViewport = function() {
                      var size = this.getSize();
                      var globalViewPort = this._fullscreenViewport.toGlobal(size.width, size.height);
                      var targetX = Math.round(globalViewPort.width * (1 / this.rootContainer.scaleX));
                      var targetY = Math.round(globalViewPort.height * (1 / this.rootContainer.scaleY));
                      globalViewPort.x += (globalViewPort.width - targetX) / 2;
                      globalViewPort.y += (globalViewPort.height - targetY) / 2;
                      globalViewPort.width = targetX;
                      globalViewPort.height = targetY;
                      return globalViewPort;
                    };
                    AdvancedDynamicTexture2.prototype.getProjectedPosition = function(position, worldMatrix) {
                      var result = this.getProjectedPositionWithZ(position, worldMatrix);
                      return new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Vector2(result.x, result.y);
                    };
                    AdvancedDynamicTexture2.prototype.getProjectedPositionWithZ = function(position, worldMatrix) {
                      var scene = this.getScene();
                      if (!scene) {
                        return core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Vector3.Zero();
                      }
                      var globalViewport = this._getGlobalViewport();
                      var projectedPosition = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);
                      return new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Vector3(projectedPosition.x, projectedPosition.y, projectedPosition.z);
                    };
                    AdvancedDynamicTexture2.prototype._checkUpdate = function(camera, skipUpdate) {
                      if (this._layerToDispose) {
                        if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {
                          return;
                        }
                      }
                      if (this._isFullscreen && this._linkedControls.length) {
                        var scene = this.getScene();
                        if (!scene) {
                          return;
                        }
                        var globalViewport = this._getGlobalViewport();
                        var _loop_1 = function(control2) {
                          if (!control2.isVisible) {
                            return "continue";
                          }
                          var mesh = control2._linkedMesh;
                          if (!mesh || mesh.isDisposed()) {
                            core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Tools.SetImmediate(function() {
                              control2.linkWithMesh(null);
                            });
                            return "continue";
                          }
                          var position = mesh.getBoundingInfo ? mesh.getBoundingInfo().boundingSphere.center : core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Vector3.ZeroReadOnly;
                          var projectedPosition = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);
                          if (projectedPosition.z < 0 || projectedPosition.z > 1) {
                            control2.notRenderable = true;
                            return "continue";
                          }
                          control2.notRenderable = false;
                          if (this_1.useInvalidateRectOptimization) {
                            control2.invalidateRect();
                          }
                          control2._moveToProjectedPosition(projectedPosition);
                        };
                        var this_1 = this;
                        for (var _i = 0, _a = this._linkedControls; _i < _a.length; _i++) {
                          var control = _a[_i];
                          _loop_1(control);
                        }
                      }
                      if (!this._isDirty && !this._rootContainer.isDirty) {
                        return;
                      }
                      this._isDirty = false;
                      this._render(skipUpdate);
                      if (!skipUpdate) {
                        this.update(this.applyYInversionOnUpdate, this.premulAlpha, AdvancedDynamicTexture2.AllowGPUOptimizations);
                      }
                    };
                    AdvancedDynamicTexture2.prototype._render = function(skipRender) {
                      var _a;
                      var textureSize = this.getSize();
                      var renderWidth = textureSize.width;
                      var renderHeight = textureSize.height;
                      var context = this.getContext();
                      context.font = "18px Arial";
                      context.strokeStyle = "white";
                      if (this.onGuiReadyObservable.hasObservers()) {
                        this._checkGuiIsReady();
                      }
                      if (this._rootChildrenHaveChanged) {
                        var camera = (_a = this.getScene()) === null || _a === void 0 ? void 0 : _a.activeCamera;
                        if (camera) {
                          this._rootChildrenHaveChanged = false;
                          this._checkUpdate(camera, true);
                        }
                      }
                      this.onBeginLayoutObservable.notifyObservers(this);
                      var measure = new _measure__WEBPACK_IMPORTED_MODULE_5__.Measure(0, 0, renderWidth, renderHeight);
                      this._numLayoutCalls = 0;
                      this._rootContainer._layout(measure, context);
                      this.onEndLayoutObservable.notifyObservers(this);
                      this._isDirty = false;
                      if (skipRender) {
                        return;
                      }
                      if (this._invalidatedRectangle) {
                        this._clearMeasure.copyFrom(this._invalidatedRectangle);
                      } else {
                        this._clearMeasure.copyFromFloats(0, 0, renderWidth, renderHeight);
                      }
                      context.clearRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);
                      if (this._background) {
                        context.save();
                        context.fillStyle = this._background;
                        context.fillRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);
                        context.restore();
                      }
                      this.onBeginRenderObservable.notifyObservers(this);
                      this._numRenderCalls = 0;
                      this._rootContainer._render(context, this._invalidatedRectangle);
                      this.onEndRenderObservable.notifyObservers(this);
                      this._invalidatedRectangle = null;
                    };
                    AdvancedDynamicTexture2.prototype._changeCursor = function(cursor) {
                      if (this._rootElement) {
                        this._rootElement.style.cursor = cursor;
                        this._cursorChanged = true;
                      }
                    };
                    AdvancedDynamicTexture2.prototype._registerLastControlDown = function(control, pointerId) {
                      this._lastControlDown[pointerId] = control;
                      this.onControlPickedObservable.notifyObservers(control);
                    };
                    AdvancedDynamicTexture2.prototype._doPicking = function(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY) {
                      var scene = this.getScene();
                      if (!scene) {
                        return;
                      }
                      var engine = scene.getEngine();
                      var textureSize = this.getSize();
                      if (this._isFullscreen) {
                        var camera = scene.cameraToUseForPointers || scene.activeCamera;
                        if (!camera) {
                          return;
                        }
                        var viewport = camera.viewport;
                        x = x * (textureSize.width / (engine.getRenderWidth() * viewport.width));
                        y = y * (textureSize.height / (engine.getRenderHeight() * viewport.height));
                      }
                      if (this._capturingControl[pointerId]) {
                        if (this._capturingControl[pointerId].isPointerBlocker) {
                          this._shouldBlockPointer = true;
                        }
                        this._capturingControl[pointerId]._processObservables(type, x, y, pi, pointerId, buttonIndex);
                        return;
                      }
                      this._cursorChanged = false;
                      if (!this._rootContainer._processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY)) {
                        if (!scene.doNotHandleCursors) {
                          this._changeCursor("");
                        }
                        if (type === core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.PointerEventTypes.POINTERMOVE) {
                          if (this._lastControlOver[pointerId]) {
                            this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId], pi);
                            delete this._lastControlOver[pointerId];
                          }
                        }
                      }
                      if (!this._cursorChanged && !scene.doNotHandleCursors) {
                        this._changeCursor("");
                      }
                      this._manageFocus();
                    };
                    AdvancedDynamicTexture2.prototype._cleanControlAfterRemovalFromList = function(list, control) {
                      for (var pointerId in list) {
                        if (!Object.prototype.hasOwnProperty.call(list, pointerId)) {
                          continue;
                        }
                        var lastControlOver = list[pointerId];
                        if (lastControlOver === control) {
                          delete list[pointerId];
                        }
                      }
                    };
                    AdvancedDynamicTexture2.prototype._cleanControlAfterRemoval = function(control) {
                      this._cleanControlAfterRemovalFromList(this._lastControlDown, control);
                      this._cleanControlAfterRemovalFromList(this._lastControlOver, control);
                    };
                    AdvancedDynamicTexture2.prototype.pick = function(x, y, pi) {
                      if (pi === void 0) {
                        pi = null;
                      }
                      if (this._isFullscreen && this._scene) {
                        this._translateToPicking(this._scene, new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Viewport(0, 0, 0, 0), pi, x, y);
                      }
                    };
                    AdvancedDynamicTexture2.prototype._translateToPicking = function(scene, tempViewport, pi, x, y) {
                      if (x === void 0) {
                        x = scene.pointerX;
                      }
                      if (y === void 0) {
                        y = scene.pointerY;
                      }
                      var camera = scene.cameraToUseForPointers || scene.activeCamera;
                      var engine = scene.getEngine();
                      var originalCameraToUseForPointers = scene.cameraToUseForPointers;
                      if (!camera) {
                        tempViewport.x = 0;
                        tempViewport.y = 0;
                        tempViewport.width = engine.getRenderWidth();
                        tempViewport.height = engine.getRenderHeight();
                      } else {
                        if (camera.rigCameras.length) {
                          var rigViewport_1 = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Viewport(0, 0, 1, 1);
                          camera.rigCameras.forEach(function(rigCamera) {
                            rigCamera.viewport.toGlobalToRef(engine.getRenderWidth(), engine.getRenderHeight(), rigViewport_1);
                            var transformedX2 = x / engine.getHardwareScalingLevel() - rigViewport_1.x;
                            var transformedY2 = y / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - rigViewport_1.y - rigViewport_1.height);
                            if (transformedX2 < 0 || transformedY2 < 0 || x > rigViewport_1.width || y > rigViewport_1.height) {
                              return;
                            }
                            scene.cameraToUseForPointers = rigCamera;
                            tempViewport.x = rigViewport_1.x;
                            tempViewport.y = rigViewport_1.y;
                            tempViewport.width = rigViewport_1.width;
                            tempViewport.height = rigViewport_1.height;
                          });
                        } else {
                          camera.viewport.toGlobalToRef(engine.getRenderWidth(), engine.getRenderHeight(), tempViewport);
                        }
                      }
                      var transformedX = x / engine.getHardwareScalingLevel() - tempViewport.x;
                      var transformedY = y / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - tempViewport.y - tempViewport.height);
                      this._shouldBlockPointer = false;
                      if (pi) {
                        var pointerId = pi.event.pointerId || this._defaultMousePointerId;
                        this._doPicking(transformedX, transformedY, pi, pi.type, pointerId, pi.event.button, pi.event.deltaX, pi.event.deltaY);
                        if (this._shouldBlockPointer || this._capturingControl[pointerId]) {
                          pi.skipOnPointerObservable = true;
                        }
                      } else {
                        this._doPicking(transformedX, transformedY, null, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.PointerEventTypes.POINTERMOVE, this._defaultMousePointerId, 0);
                      }
                      scene.cameraToUseForPointers = originalCameraToUseForPointers;
                    };
                    AdvancedDynamicTexture2.prototype.attach = function() {
                      var _this = this;
                      var scene = this.getScene();
                      if (!scene) {
                        return;
                      }
                      var tempViewport = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Viewport(0, 0, 0, 0);
                      this._prePointerObserver = scene.onPrePointerObservable.add(function(pi) {
                        if (scene.isPointerCaptured(pi.event.pointerId) && pi.type === core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.PointerEventTypes.POINTERUP && !_this._capturedPointerIds.has(pi.event.pointerId)) {
                          return;
                        }
                        if (pi.type !== core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.PointerEventTypes.POINTERMOVE && pi.type !== core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.PointerEventTypes.POINTERUP && pi.type !== core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.PointerEventTypes.POINTERDOWN && pi.type !== core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.PointerEventTypes.POINTERWHEEL) {
                          return;
                        }
                        if (pi.type === core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.PointerEventTypes.POINTERMOVE) {
                          if (scene.isPointerCaptured(pi.event.pointerId)) {
                            return;
                          }
                          if (pi.event.pointerId) {
                            _this._defaultMousePointerId = pi.event.pointerId;
                          }
                        }
                        _this._translateToPicking(scene, tempViewport, pi);
                      });
                      this._attachPickingToSceneRender(scene, function() {
                        return _this._translateToPicking(scene, tempViewport, null);
                      }, false);
                      this._attachToOnPointerOut(scene);
                      this._attachToOnBlur(scene);
                    };
                    AdvancedDynamicTexture2.prototype.registerClipboardEvents = function() {
                      self.addEventListener("copy", this._onClipboardCopy, false);
                      self.addEventListener("cut", this._onClipboardCut, false);
                      self.addEventListener("paste", this._onClipboardPaste, false);
                    };
                    AdvancedDynamicTexture2.prototype.unRegisterClipboardEvents = function() {
                      self.removeEventListener("copy", this._onClipboardCopy);
                      self.removeEventListener("cut", this._onClipboardCut);
                      self.removeEventListener("paste", this._onClipboardPaste);
                    };
                    AdvancedDynamicTexture2.prototype._transformUvs = function(uv) {
                      var textureMatrix = this.getTextureMatrix();
                      var result;
                      if (textureMatrix.isIdentityAs3x2()) {
                        result = uv;
                      } else {
                        var homogeneousTextureMatrix = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Matrix[0];
                        textureMatrix.getRowToRef(0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Vector4[0]);
                        textureMatrix.getRowToRef(1, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Vector4[1]);
                        textureMatrix.getRowToRef(2, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Vector4[2]);
                        var r0 = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Vector4[0];
                        var r1 = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Vector4[1];
                        var r2 = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Vector4[2];
                        homogeneousTextureMatrix.setRowFromFloats(0, r0.x, r0.y, 0, 0);
                        homogeneousTextureMatrix.setRowFromFloats(1, r1.x, r1.y, 0, 0);
                        homogeneousTextureMatrix.setRowFromFloats(2, 0, 0, 1, 0);
                        homogeneousTextureMatrix.setRowFromFloats(3, r2.x, r2.y, 0, 1);
                        result = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Vector2[0];
                        core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Vector2.TransformToRef(uv, homogeneousTextureMatrix, result);
                      }
                      if (this.wrapU === core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Texture.WRAP_ADDRESSMODE || this.wrapU === core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Texture.MIRROR_ADDRESSMODE) {
                        if (result.x > 1) {
                          var fX = result.x - Math.trunc(result.x);
                          if (this.wrapU === core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Texture.MIRROR_ADDRESSMODE && Math.trunc(result.x) % 2 === 1) {
                            fX = 1 - fX;
                          }
                          result.x = fX;
                        }
                      }
                      if (this.wrapV === core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Texture.WRAP_ADDRESSMODE || this.wrapV === core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Texture.MIRROR_ADDRESSMODE) {
                        if (result.y > 1) {
                          var fY = result.y - Math.trunc(result.y);
                          if (this.wrapV === core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Texture.MIRROR_ADDRESSMODE && Math.trunc(result.x) % 2 === 1) {
                            fY = 1 - fY;
                          }
                          result.y = fY;
                        }
                      }
                      return result;
                    };
                    AdvancedDynamicTexture2.prototype.attachToMesh = function(mesh, supportPointerMove) {
                      var _this = this;
                      if (supportPointerMove === void 0) {
                        supportPointerMove = true;
                      }
                      var scene = this.getScene();
                      if (!scene) {
                        return;
                      }
                      if (this._pointerObserver) {
                        scene.onPointerObservable.remove(this._pointerObserver);
                      }
                      this._pointerObserver = scene.onPointerObservable.add(function(pi) {
                        if (pi.type !== core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.PointerEventTypes.POINTERMOVE && pi.type !== core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.PointerEventTypes.POINTERUP && pi.type !== core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.PointerEventTypes.POINTERDOWN && pi.type !== core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.PointerEventTypes.POINTERWHEEL) {
                          return;
                        }
                        if (pi.type === core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.PointerEventTypes.POINTERMOVE && pi.event.pointerId) {
                          _this._defaultMousePointerId = pi.event.pointerId;
                        }
                        var pointerId = pi.event.pointerId || _this._defaultMousePointerId;
                        if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {
                          var uv = pi.pickInfo.getTextureCoordinates();
                          if (uv) {
                            uv = _this._transformUvs(uv);
                            var size = _this.getSize();
                            _this._doPicking(uv.x * size.width, (_this.applyYInversionOnUpdate ? 1 - uv.y : uv.y) * size.height, pi, pi.type, pointerId, pi.event.button, pi.event.deltaX, pi.event.deltaY);
                          }
                        } else if (pi.type === core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.PointerEventTypes.POINTERUP) {
                          if (_this._lastControlDown[pointerId]) {
                            _this._lastControlDown[pointerId]._forcePointerUp(pointerId);
                          }
                          delete _this._lastControlDown[pointerId];
                          if (_this.focusedControl) {
                            var friendlyControls = _this.focusedControl.keepsFocusWith();
                            var canMoveFocus = true;
                            if (friendlyControls) {
                              for (var _i = 0, friendlyControls_1 = friendlyControls; _i < friendlyControls_1.length; _i++) {
                                var control = friendlyControls_1[_i];
                                if (_this === control._host) {
                                  continue;
                                }
                                var otherHost = control._host;
                                if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {
                                  canMoveFocus = false;
                                  break;
                                }
                              }
                            }
                            if (canMoveFocus) {
                              _this.focusedControl = null;
                            }
                          }
                        } else if (pi.type === core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.PointerEventTypes.POINTERMOVE) {
                          if (_this._lastControlOver[pointerId]) {
                            _this._lastControlOver[pointerId]._onPointerOut(_this._lastControlOver[pointerId], pi, true);
                          }
                          delete _this._lastControlOver[pointerId];
                        }
                      });
                      mesh.enablePointerMoveEvents = supportPointerMove;
                      this._attachPickingToSceneRender(scene, function() {
                        var pointerId = _this._defaultMousePointerId;
                        var pick = scene === null || scene === void 0 ? void 0 : scene.pick(scene.pointerX, scene.pointerY);
                        if (pick && pick.hit && pick.pickedMesh === mesh) {
                          var uv = pick.getTextureCoordinates();
                          if (uv) {
                            uv = _this._transformUvs(uv);
                            var size = _this.getSize();
                            _this._doPicking(uv.x * size.width, (_this.applyYInversionOnUpdate ? 1 - uv.y : uv.y) * size.height, null, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.PointerEventTypes.POINTERMOVE, pointerId, 0);
                          }
                        } else {
                          if (_this._lastControlOver[pointerId]) {
                            _this._lastControlOver[pointerId]._onPointerOut(_this._lastControlOver[pointerId], null, true);
                          }
                          delete _this._lastControlOver[pointerId];
                        }
                      }, true);
                      this._attachToOnPointerOut(scene);
                      this._attachToOnBlur(scene);
                    };
                    AdvancedDynamicTexture2.prototype.moveFocusToControl = function(control) {
                      this.focusedControl = control;
                      this._lastPickedControl = control;
                      this._blockNextFocusCheck = true;
                    };
                    AdvancedDynamicTexture2.prototype._manageFocus = function() {
                      if (this._blockNextFocusCheck) {
                        this._blockNextFocusCheck = false;
                        this._lastPickedControl = this._focusedControl;
                        return;
                      }
                      if (this._focusedControl) {
                        if (this._focusedControl !== this._lastPickedControl) {
                          if (this._lastPickedControl.isFocusInvisible) {
                            return;
                          }
                          this.focusedControl = null;
                        }
                      }
                    };
                    AdvancedDynamicTexture2.prototype._attachPickingToSceneRender = function(scene, pickFunction, forcePicking) {
                      var _this = this;
                      this._sceneRenderObserver = scene.onBeforeRenderObservable.add(function() {
                        if (!_this.checkPointerEveryFrame) {
                          return;
                        }
                        if (_this._linkedControls.length > 0 || forcePicking) {
                          pickFunction();
                        }
                      });
                    };
                    AdvancedDynamicTexture2.prototype._attachToOnPointerOut = function(scene) {
                      var _this = this;
                      this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add(function(pointerEvent) {
                        if (_this._lastControlOver[pointerEvent.pointerId]) {
                          _this._lastControlOver[pointerEvent.pointerId]._onPointerOut(_this._lastControlOver[pointerEvent.pointerId], null);
                        }
                        delete _this._lastControlOver[pointerEvent.pointerId];
                        if (_this._lastControlDown[pointerEvent.pointerId] && _this._lastControlDown[pointerEvent.pointerId] !== _this._capturingControl[pointerEvent.pointerId]) {
                          _this._lastControlDown[pointerEvent.pointerId]._forcePointerUp(pointerEvent.pointerId);
                          delete _this._lastControlDown[pointerEvent.pointerId];
                        }
                      });
                    };
                    AdvancedDynamicTexture2.prototype._attachToOnBlur = function(scene) {
                      var _this = this;
                      this._canvasBlurObserver = scene.getEngine().onCanvasBlurObservable.add(function() {
                        Object.entries(_this._lastControlDown).forEach(function(_a) {
                          var value = _a[1];
                          value._onCanvasBlur();
                        });
                        _this.focusedControl = null;
                        _this._lastControlDown = {};
                      });
                    };
                    AdvancedDynamicTexture2.prototype.serializeContent = function() {
                      var size = this.getSize();
                      var serializationObject = {
                        root: {},
                        width: size.width,
                        height: size.height
                      };
                      this._rootContainer.serialize(serializationObject.root);
                      return serializationObject;
                    };
                    AdvancedDynamicTexture2.prototype.parseSerializedObject = function(serializedObject, scaleToSize) {
                      this._rootContainer = _controls_control__WEBPACK_IMPORTED_MODULE_3__.Control.Parse(serializedObject.root, this);
                      if (scaleToSize) {
                        var width = serializedObject.width;
                        var height = serializedObject.height;
                        if (typeof width === "number" && typeof height === "number" && width >= 0 && height >= 0) {
                          this.scaleTo(width, height);
                        } else {
                          this.scaleTo(1920, 1080);
                        }
                      }
                    };
                    AdvancedDynamicTexture2.prototype.clone = function(newName) {
                      var scene = this.getScene();
                      if (!scene) {
                        return this;
                      }
                      var data = this.serializeContent();
                      var clone = AdvancedDynamicTexture2.CreateFullscreenUI(newName || "Clone of " + this.name, this.isForeground, scene, this.samplingMode);
                      clone.parseSerializedObject(data);
                      return clone;
                    };
                    AdvancedDynamicTexture2.ParseFromSnippetAsync = function(snippetId, scaleToSize, appendToAdt) {
                      return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {
                        var adt, serialized;
                        return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {
                          switch (_a.label) {
                            case 0:
                              adt = appendToAdt !== null && appendToAdt !== void 0 ? appendToAdt : AdvancedDynamicTexture2.CreateFullscreenUI("ADT from snippet");
                              if (snippetId === "_BLANK") {
                                return [2, adt];
                              }
                              return [4, AdvancedDynamicTexture2._LoadURLContentAsync(AdvancedDynamicTexture2.SnippetUrl + "/" + snippetId.replace(/#/g, "/"), true)];
                            case 1:
                              serialized = _a.sent();
                              adt.parseSerializedObject(serialized, scaleToSize);
                              return [2, adt];
                          }
                        });
                      });
                    };
                    AdvancedDynamicTexture2.prototype.parseFromSnippetAsync = function(snippetId, scaleToSize) {
                      return AdvancedDynamicTexture2.ParseFromSnippetAsync(snippetId, scaleToSize, this);
                    };
                    AdvancedDynamicTexture2.ParseFromFileAsync = function(url, scaleToSize, appendToAdt) {
                      return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {
                        var adt, serialized;
                        return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {
                          switch (_a.label) {
                            case 0:
                              adt = appendToAdt !== null && appendToAdt !== void 0 ? appendToAdt : AdvancedDynamicTexture2.CreateFullscreenUI("ADT from URL");
                              return [4, AdvancedDynamicTexture2._LoadURLContentAsync(url)];
                            case 1:
                              serialized = _a.sent();
                              adt.parseSerializedObject(serialized, scaleToSize);
                              return [2, adt];
                          }
                        });
                      });
                    };
                    AdvancedDynamicTexture2.prototype.parseFromURLAsync = function(url, scaleToSize) {
                      return AdvancedDynamicTexture2.ParseFromFileAsync(url, scaleToSize, this);
                    };
                    AdvancedDynamicTexture2._LoadURLContentAsync = function(url, snippet) {
                      if (snippet === void 0) {
                        snippet = false;
                      }
                      if (url === "") {
                        return Promise.reject("No URL provided");
                      }
                      return new Promise(function(resolve, reject) {
                        var request = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.WebRequest();
                        request.addEventListener("readystatechange", function() {
                          if (request.readyState == 4) {
                            if (request.status == 200) {
                              var gui = void 0;
                              if (snippet) {
                                var payload = JSON.parse(JSON.parse(request.responseText).jsonPayload);
                                gui = payload.encodedGui ? new TextDecoder("utf-8").decode((0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.DecodeBase64ToBinary)(payload.encodedGui)) : payload.gui;
                              } else {
                                gui = request.responseText;
                              }
                              var serializationObject = JSON.parse(gui);
                              resolve(serializationObject);
                            } else {
                              reject("Unable to load");
                            }
                          }
                        });
                        request.open("GET", url);
                        request.send();
                      });
                    };
                    AdvancedDynamicTexture2._Overlaps = function(control1, control2) {
                      return !(control1.centerX > control2.centerX + control2.widthInPixels || control1.centerX + control1.widthInPixels < control2.centerX || control1.centerY + control1.heightInPixels < control2.centerY || control1.centerY > control2.centerY + control2.heightInPixels);
                    };
                    AdvancedDynamicTexture2.CreateForMesh = function(mesh, width, height, supportPointerMove, onlyAlphaTesting, invertY, materialSetupCallback) {
                      if (width === void 0) {
                        width = 1024;
                      }
                      if (height === void 0) {
                        height = 1024;
                      }
                      if (supportPointerMove === void 0) {
                        supportPointerMove = true;
                      }
                      if (onlyAlphaTesting === void 0) {
                        onlyAlphaTesting = false;
                      }
                      if (materialSetupCallback === void 0) {
                        materialSetupCallback = this._CreateMaterial;
                      }
                      var uniqueId = (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.RandomGUID)();
                      var result = new AdvancedDynamicTexture2("AdvancedDynamicTexture for ".concat(mesh.name, " [").concat(uniqueId, "]"), width, height, mesh.getScene(), true, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Texture.TRILINEAR_SAMPLINGMODE, invertY);
                      materialSetupCallback(mesh, uniqueId, result, onlyAlphaTesting);
                      result.attachToMesh(mesh, supportPointerMove);
                      return result;
                    };
                    AdvancedDynamicTexture2._CreateMaterial = function(mesh, uniqueId, texture, onlyAlphaTesting) {
                      var internalClassType = (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.GetClass)("BABYLON.StandardMaterial");
                      if (!internalClassType) {
                        throw "StandardMaterial needs to be imported before as it contains a side-effect required by your code.";
                      }
                      var material = new internalClassType("AdvancedDynamicTextureMaterial for ".concat(mesh.name, " [").concat(uniqueId, "]"), mesh.getScene());
                      material.backFaceCulling = false;
                      material.diffuseColor = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Color3.Black();
                      material.specularColor = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Color3.Black();
                      if (onlyAlphaTesting) {
                        material.diffuseTexture = texture;
                        material.emissiveTexture = texture;
                        texture.hasAlpha = true;
                      } else {
                        material.emissiveTexture = texture;
                        material.opacityTexture = texture;
                      }
                      mesh.material = material;
                    };
                    AdvancedDynamicTexture2.CreateForMeshTexture = function(mesh, width, height, supportPointerMove, invertY) {
                      if (width === void 0) {
                        width = 1024;
                      }
                      if (height === void 0) {
                        height = 1024;
                      }
                      if (supportPointerMove === void 0) {
                        supportPointerMove = true;
                      }
                      var result = new AdvancedDynamicTexture2(mesh.name + " AdvancedDynamicTexture", width, height, mesh.getScene(), true, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Texture.TRILINEAR_SAMPLINGMODE, invertY);
                      result.attachToMesh(mesh, supportPointerMove);
                      return result;
                    };
                    AdvancedDynamicTexture2.CreateFullscreenUI = function(name, foreground, scene, sampling, adaptiveScaling) {
                      if (foreground === void 0) {
                        foreground = true;
                      }
                      if (scene === void 0) {
                        scene = null;
                      }
                      if (sampling === void 0) {
                        sampling = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Texture.BILINEAR_SAMPLINGMODE;
                      }
                      if (adaptiveScaling === void 0) {
                        adaptiveScaling = false;
                      }
                      var result = new AdvancedDynamicTexture2(name, 0, 0, scene, false, sampling);
                      var resultScene = result.getScene();
                      var layer = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Layer(name + "_layer", null, resultScene, !foreground);
                      layer.texture = result;
                      result._layerToDispose = layer;
                      result._isFullscreen = true;
                      if (adaptiveScaling && resultScene) {
                        var newScale = 1 / resultScene.getEngine().getHardwareScalingLevel();
                        result._rootContainer.scaleX = newScale;
                        result._rootContainer.scaleY = newScale;
                      }
                      result.attach();
                      return result;
                    };
                    AdvancedDynamicTexture2.prototype.scale = function(ratio) {
                      _super.prototype.scale.call(this, ratio);
                      this.markAsDirty();
                    };
                    AdvancedDynamicTexture2.prototype.scaleTo = function(width, height) {
                      _super.prototype.scaleTo.call(this, width, height);
                      this.markAsDirty();
                    };
                    AdvancedDynamicTexture2.prototype._checkGuiIsReady = function() {
                      if (this.guiIsReady()) {
                        this.onGuiReadyObservable.notifyObservers(this);
                        this.onGuiReadyObservable.clear();
                      }
                    };
                    AdvancedDynamicTexture2.prototype.guiIsReady = function() {
                      return this._rootContainer.isReady();
                    };
                    AdvancedDynamicTexture2.SnippetUrl = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Constants.SnippetUrl;
                    AdvancedDynamicTexture2.AllowGPUOptimizations = true;
                    return AdvancedDynamicTexture2;
                  }(core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.DynamicTexture)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/button.js": (
              /*!***************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/button.js ***!
                \***************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "Button": () => (
                    /* binding */
                    Button
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var _rectangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./rectangle */
                  "../../../lts/gui/dist/2D/controls/rectangle.js"
                );
                var _control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./control */
                  "../../../lts/gui/dist/2D/controls/control.js"
                );
                var _textBlock__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./textBlock */
                  "../../../lts/gui/dist/2D/controls/textBlock.js"
                );
                var _image__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
                  /*! ./image */
                  "../../../lts/gui/dist/2D/controls/image.js"
                );
                var core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
                  /*! core/Misc/typeStore */
                  "core/Misc/perfCounter"
                );
                var core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_5___default = __webpack_require__2.n(core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_5__);
                var Button = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Button2, _super);
                    function Button2(name) {
                      var _this = _super.call(this, name) || this;
                      _this.name = name;
                      _this.delegatePickingToChildren = false;
                      _this.thickness = 1;
                      _this.isPointerBlocker = true;
                      var alphaStore = null;
                      _this.pointerEnterAnimation = function() {
                        alphaStore = _this.alpha;
                        _this.alpha -= 0.1;
                      };
                      _this.pointerOutAnimation = function() {
                        if (alphaStore !== null) {
                          _this.alpha = alphaStore;
                        }
                      };
                      _this.pointerDownAnimation = function() {
                        _this.scaleX -= 0.05;
                        _this.scaleY -= 0.05;
                      };
                      _this.pointerUpAnimation = function() {
                        _this.scaleX += 0.05;
                        _this.scaleY += 0.05;
                      };
                      return _this;
                    }
                    Object.defineProperty(Button2.prototype, "image", {
                      /**
                       * Returns the image part of the button (if any)
                       */
                      get: function() {
                        return this._image;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Button2.prototype, "textBlock", {
                      /**
                       * Returns the TextBlock part of the button (if any)
                       */
                      get: function() {
                        return this._textBlock;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Button2.prototype._getTypeName = function() {
                      return "Button";
                    };
                    Button2.prototype._processPicking = function(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY) {
                      if (!this._isEnabled || !this.isHitTestVisible || !this.isVisible || this.notRenderable) {
                        return false;
                      }
                      if (!_super.prototype.contains.call(this, x, y)) {
                        return false;
                      }
                      if (this.delegatePickingToChildren) {
                        var contains = false;
                        for (var index = this._children.length - 1; index >= 0; index--) {
                          var child = this._children[index];
                          if (child.isEnabled && child.isHitTestVisible && child.isVisible && !child.notRenderable && child.contains(x, y)) {
                            contains = true;
                            break;
                          }
                        }
                        if (!contains) {
                          return false;
                        }
                      }
                      this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);
                      return true;
                    };
                    Button2.prototype._onPointerEnter = function(target, pi) {
                      if (!_super.prototype._onPointerEnter.call(this, target, pi)) {
                        return false;
                      }
                      if (!this.isReadOnly && this.pointerEnterAnimation) {
                        this.pointerEnterAnimation();
                      }
                      return true;
                    };
                    Button2.prototype._onPointerOut = function(target, pi, force) {
                      if (force === void 0) {
                        force = false;
                      }
                      if (!this.isReadOnly && this.pointerOutAnimation) {
                        this.pointerOutAnimation();
                      }
                      _super.prototype._onPointerOut.call(this, target, pi, force);
                    };
                    Button2.prototype._onPointerDown = function(target, coordinates, pointerId, buttonIndex, pi) {
                      if (!_super.prototype._onPointerDown.call(this, target, coordinates, pointerId, buttonIndex, pi)) {
                        return false;
                      }
                      if (!this.isReadOnly && this.pointerDownAnimation) {
                        this.pointerDownAnimation();
                      }
                      return true;
                    };
                    Button2.prototype._getRectangleFill = function(context) {
                      if (this.isEnabled) {
                        return this._getBackgroundColor(context);
                      } else {
                        return this._disabledColor;
                      }
                    };
                    Button2.prototype._onPointerUp = function(target, coordinates, pointerId, buttonIndex, notifyClick, pi) {
                      if (!this.isReadOnly && this.pointerUpAnimation) {
                        this.pointerUpAnimation();
                      }
                      _super.prototype._onPointerUp.call(this, target, coordinates, pointerId, buttonIndex, notifyClick, pi);
                    };
                    Button2.prototype.serialize = function(serializationObject) {
                      _super.prototype.serialize.call(this, serializationObject);
                      if (this._textBlock) {
                        serializationObject.textBlockName = this._textBlock.name;
                      }
                      if (this._image) {
                        serializationObject.imageName = this._image.name;
                      }
                    };
                    Button2.prototype._parseFromContent = function(serializedObject, host) {
                      _super.prototype._parseFromContent.call(this, serializedObject, host);
                      if (serializedObject.textBlockName) {
                        this._textBlock = this.getChildByName(serializedObject.textBlockName);
                      }
                      if (serializedObject.imageName) {
                        this._image = this.getChildByName(serializedObject.imageName);
                      }
                    };
                    Button2.CreateImageButton = function(name, text, imageUrl) {
                      var result = new this(name);
                      var textBlock = new _textBlock__WEBPACK_IMPORTED_MODULE_3__.TextBlock(name + "_button", text);
                      textBlock.textWrapping = true;
                      textBlock.textHorizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_CENTER;
                      textBlock.paddingLeft = "20%";
                      result.addControl(textBlock);
                      var iconImage = new _image__WEBPACK_IMPORTED_MODULE_4__.Image(name + "_icon", imageUrl);
                      iconImage.width = "20%";
                      iconImage.stretch = _image__WEBPACK_IMPORTED_MODULE_4__.Image.STRETCH_UNIFORM;
                      iconImage.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                      result.addControl(iconImage);
                      result._image = iconImage;
                      result._textBlock = textBlock;
                      return result;
                    };
                    Button2.CreateImageOnlyButton = function(name, imageUrl) {
                      var result = new this(name);
                      var iconImage = new _image__WEBPACK_IMPORTED_MODULE_4__.Image(name + "_icon", imageUrl);
                      iconImage.stretch = _image__WEBPACK_IMPORTED_MODULE_4__.Image.STRETCH_FILL;
                      iconImage.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                      result.addControl(iconImage);
                      result._image = iconImage;
                      return result;
                    };
                    Button2.CreateSimpleButton = function(name, text) {
                      var result = new this(name);
                      var textBlock = new _textBlock__WEBPACK_IMPORTED_MODULE_3__.TextBlock(name + "_button", text);
                      textBlock.textWrapping = true;
                      textBlock.textHorizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_CENTER;
                      result.addControl(textBlock);
                      result._textBlock = textBlock;
                      return result;
                    };
                    Button2.CreateImageWithCenterTextButton = function(name, text, imageUrl) {
                      var result = new this(name);
                      var iconImage = new _image__WEBPACK_IMPORTED_MODULE_4__.Image(name + "_icon", imageUrl);
                      iconImage.stretch = _image__WEBPACK_IMPORTED_MODULE_4__.Image.STRETCH_FILL;
                      result.addControl(iconImage);
                      var textBlock = new _textBlock__WEBPACK_IMPORTED_MODULE_3__.TextBlock(name + "_button", text);
                      textBlock.textWrapping = true;
                      textBlock.textHorizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_CENTER;
                      result.addControl(textBlock);
                      result._image = iconImage;
                      result._textBlock = textBlock;
                      return result;
                    };
                    return Button2;
                  }(_rectangle__WEBPACK_IMPORTED_MODULE_1__.Rectangle)
                );
                (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_5__.RegisterClass)("BABYLON.GUI.Button", Button);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/checkbox.js": (
              /*!*****************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/checkbox.js ***!
                \*****************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "Checkbox": () => (
                    /* binding */
                    Checkbox
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Misc/decorators */
                  "core/Misc/perfCounter"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__);
                var _control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./control */
                  "../../../lts/gui/dist/2D/controls/control.js"
                );
                var _stackPanel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./stackPanel */
                  "../../../lts/gui/dist/2D/controls/stackPanel.js"
                );
                var _textBlock__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
                  /*! ./textBlock */
                  "../../../lts/gui/dist/2D/controls/textBlock.js"
                );
                var Checkbox = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Checkbox2, _super);
                    function Checkbox2(name) {
                      var _this = _super.call(this, name) || this;
                      _this.name = name;
                      _this._isChecked = false;
                      _this._background = "black";
                      _this._checkSizeRatio = 0.8;
                      _this._thickness = 1;
                      _this.onIsCheckedChangedObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this.isPointerBlocker = true;
                      return _this;
                    }
                    Object.defineProperty(Checkbox2.prototype, "thickness", {
                      /** Gets or sets border thickness  */
                      get: function() {
                        return this._thickness;
                      },
                      set: function(value) {
                        if (this._thickness === value) {
                          return;
                        }
                        this._thickness = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Checkbox2.prototype, "checkSizeRatio", {
                      /** Gets or sets a value indicating the ratio between overall size and check size */
                      get: function() {
                        return this._checkSizeRatio;
                      },
                      set: function(value) {
                        value = Math.max(Math.min(1, value), 0);
                        if (this._checkSizeRatio === value) {
                          return;
                        }
                        this._checkSizeRatio = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Checkbox2.prototype, "background", {
                      /** Gets or sets background color */
                      get: function() {
                        return this._background;
                      },
                      set: function(value) {
                        if (this._background === value) {
                          return;
                        }
                        this._background = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Checkbox2.prototype, "isChecked", {
                      /** Gets or sets a boolean indicating if the checkbox is checked or not */
                      get: function() {
                        return this._isChecked;
                      },
                      set: function(value) {
                        if (this._isChecked === value) {
                          return;
                        }
                        this._isChecked = value;
                        this._markAsDirty();
                        this.onIsCheckedChangedObservable.notifyObservers(value);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Checkbox2.prototype._getTypeName = function() {
                      return "Checkbox";
                    };
                    Checkbox2.prototype._draw = function(context) {
                      context.save();
                      this._applyStates(context);
                      var actualWidth = this._currentMeasure.width - this._thickness;
                      var actualHeight = this._currentMeasure.height - this._thickness;
                      if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                        context.shadowColor = this.shadowColor;
                        context.shadowBlur = this.shadowBlur;
                        context.shadowOffsetX = this.shadowOffsetX;
                        context.shadowOffsetY = this.shadowOffsetY;
                      }
                      context.fillStyle = this._isEnabled ? this._background : this._disabledColor;
                      context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);
                      if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                        context.shadowBlur = 0;
                        context.shadowOffsetX = 0;
                        context.shadowOffsetY = 0;
                      }
                      if (this._isChecked) {
                        context.fillStyle = this._isEnabled ? this.color : this._disabledColorItem;
                        var offsetWidth = actualWidth * this._checkSizeRatio;
                        var offsetHeight = actualHeight * this._checkSizeRatio;
                        context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offsetHeight) / 2, offsetWidth, offsetHeight);
                      }
                      context.strokeStyle = this.color;
                      context.lineWidth = this._thickness;
                      context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);
                      context.restore();
                    };
                    Checkbox2.prototype._onPointerDown = function(target, coordinates, pointerId, buttonIndex, pi) {
                      if (!_super.prototype._onPointerDown.call(this, target, coordinates, pointerId, buttonIndex, pi)) {
                        return false;
                      }
                      if (!this.isReadOnly) {
                        this.isChecked = !this.isChecked;
                      }
                      return true;
                    };
                    Checkbox2.AddCheckBoxWithHeader = function(title, onValueChanged) {
                      var panel = new _stackPanel__WEBPACK_IMPORTED_MODULE_3__.StackPanel();
                      panel.isVertical = false;
                      panel.height = "30px";
                      var checkbox = new Checkbox2();
                      checkbox.width = "20px";
                      checkbox.height = "20px";
                      checkbox.isChecked = true;
                      checkbox.color = "green";
                      checkbox.onIsCheckedChangedObservable.add(onValueChanged);
                      panel.addControl(checkbox);
                      var header = new _textBlock__WEBPACK_IMPORTED_MODULE_4__.TextBlock();
                      header.text = title;
                      header.width = "180px";
                      header.paddingLeft = "5px";
                      header.textHorizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                      header.color = "white";
                      panel.addControl(header);
                      return panel;
                    };
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Checkbox2.prototype, "thickness", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Checkbox2.prototype, "checkSizeRatio", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Checkbox2.prototype, "background", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Checkbox2.prototype, "isChecked", null);
                    return Checkbox2;
                  }(_control__WEBPACK_IMPORTED_MODULE_2__.Control)
                );
                (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.Checkbox", Checkbox);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/colorpicker.js": (
              /*!********************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/colorpicker.js ***!
                \********************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "ColorPicker": () => (
                    /* binding */
                    ColorPicker
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Engines/engineStore */
                  "core/Misc/perfCounter"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__);
                var _control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./control */
                  "../../../lts/gui/dist/2D/controls/control.js"
                );
                var _inputText__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./inputText */
                  "../../../lts/gui/dist/2D/controls/inputText.js"
                );
                var _rectangle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
                  /*! ./rectangle */
                  "../../../lts/gui/dist/2D/controls/rectangle.js"
                );
                var _button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
                  /*! ./button */
                  "../../../lts/gui/dist/2D/controls/button.js"
                );
                var _grid__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
                  /*! ./grid */
                  "../../../lts/gui/dist/2D/controls/grid.js"
                );
                var _controls_textBlock__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
                  /*! ../controls/textBlock */
                  "../../../lts/gui/dist/2D/controls/textBlock.js"
                );
                var ColorPicker = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ColorPicker2, _super);
                    function ColorPicker2(name) {
                      var _this = _super.call(this, name) || this;
                      _this.name = name;
                      _this._value = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Color3.Red();
                      _this._tmpColor = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Color3();
                      _this._pointerStartedOnSquare = false;
                      _this._pointerStartedOnWheel = false;
                      _this._squareLeft = 0;
                      _this._squareTop = 0;
                      _this._squareSize = 0;
                      _this._h = 360;
                      _this._s = 1;
                      _this._v = 1;
                      _this._lastPointerDownId = -1;
                      _this.onValueChangedObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this._pointerIsDown = false;
                      _this.value = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Color3(0.88, 0.1, 0.1);
                      _this.size = "200px";
                      _this.isPointerBlocker = true;
                      return _this;
                    }
                    Object.defineProperty(ColorPicker2.prototype, "value", {
                      /** Gets or sets the color of the color picker */
                      get: function() {
                        return this._value;
                      },
                      set: function(value) {
                        if (this._value.equals(value)) {
                          return;
                        }
                        this._value.copyFrom(value);
                        this._value.toHSVToRef(this._tmpColor);
                        this._h = this._tmpColor.r;
                        this._s = Math.max(this._tmpColor.g, 1e-5);
                        this._v = Math.max(this._tmpColor.b, 1e-5);
                        this._markAsDirty();
                        if (this._value.r <= ColorPicker2._Epsilon) {
                          this._value.r = 0;
                        }
                        if (this._value.g <= ColorPicker2._Epsilon) {
                          this._value.g = 0;
                        }
                        if (this._value.b <= ColorPicker2._Epsilon) {
                          this._value.b = 0;
                        }
                        if (this._value.r >= 1 - ColorPicker2._Epsilon) {
                          this._value.r = 1;
                        }
                        if (this._value.g >= 1 - ColorPicker2._Epsilon) {
                          this._value.g = 1;
                        }
                        if (this._value.b >= 1 - ColorPicker2._Epsilon) {
                          this._value.b = 1;
                        }
                        this.onValueChangedObservable.notifyObservers(this._value);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ColorPicker2.prototype, "width", {
                      /**
                       * Gets or sets control width
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
                       */
                      get: function() {
                        return this._width.toString(this._host);
                      },
                      set: function(value) {
                        if (this._width.toString(this._host) === value) {
                          return;
                        }
                        if (this._width.fromString(value)) {
                          if (this._width.getValue(this._host) === 0) {
                            value = "1px";
                            this._width.fromString(value);
                          }
                          this._height.fromString(value);
                          this._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ColorPicker2.prototype, "height", {
                      /**
                       * Gets or sets control height
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
                       */
                      get: function() {
                        return this._height.toString(this._host);
                      },
                      /** Gets or sets control height */
                      set: function(value) {
                        if (this._height.toString(this._host) === value) {
                          return;
                        }
                        if (this._height.fromString(value)) {
                          if (this._height.getValue(this._host) === 0) {
                            value = "1px";
                            this._height.fromString(value);
                          }
                          this._width.fromString(value);
                          this._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ColorPicker2.prototype, "size", {
                      /** Gets or sets control size */
                      get: function() {
                        return this.width;
                      },
                      set: function(value) {
                        this.width = value;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    ColorPicker2.prototype._getTypeName = function() {
                      return "ColorPicker";
                    };
                    ColorPicker2.prototype._preMeasure = function(parentMeasure) {
                      if (parentMeasure.width < parentMeasure.height) {
                        this._currentMeasure.height = parentMeasure.width;
                      } else {
                        this._currentMeasure.width = parentMeasure.height;
                      }
                    };
                    ColorPicker2.prototype._updateSquareProps = function() {
                      var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;
                      var wheelThickness = radius * 0.2;
                      var innerDiameter = (radius - wheelThickness) * 2;
                      var squareSize = innerDiameter / Math.sqrt(2);
                      var offset = radius - squareSize * 0.5;
                      this._squareLeft = this._currentMeasure.left + offset;
                      this._squareTop = this._currentMeasure.top + offset;
                      this._squareSize = squareSize;
                    };
                    ColorPicker2.prototype._drawGradientSquare = function(hueValue, left, top, width, height, context) {
                      var lgh = context.createLinearGradient(left, top, width + left, top);
                      lgh.addColorStop(0, "#fff");
                      lgh.addColorStop(1, "hsl(" + hueValue + ", 100%, 50%)");
                      context.fillStyle = lgh;
                      context.fillRect(left, top, width, height);
                      var lgv = context.createLinearGradient(left, top, left, height + top);
                      lgv.addColorStop(0, "rgba(0,0,0,0)");
                      lgv.addColorStop(1, "#000");
                      context.fillStyle = lgv;
                      context.fillRect(left, top, width, height);
                    };
                    ColorPicker2.prototype._drawCircle = function(centerX, centerY, radius, context) {
                      context.beginPath();
                      context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);
                      context.lineWidth = 3;
                      context.strokeStyle = "#333333";
                      context.stroke();
                      context.beginPath();
                      context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);
                      context.lineWidth = 3;
                      context.strokeStyle = "#ffffff";
                      context.stroke();
                    };
                    ColorPicker2.prototype._createColorWheelCanvas = function(radius, thickness) {
                      var engine = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.EngineStore.LastCreatedEngine;
                      if (!engine) {
                        throw new Error("Invalid engine. Unable to create a canvas.");
                      }
                      var canvas = engine.createCanvas(radius * 2, radius * 2);
                      var context = canvas.getContext("2d");
                      var image = context.getImageData(0, 0, radius * 2, radius * 2);
                      var data = image.data;
                      var color = this._tmpColor;
                      var maxDistSq = radius * radius;
                      var innerRadius = radius - thickness;
                      var minDistSq = innerRadius * innerRadius;
                      for (var x = -radius; x < radius; x++) {
                        for (var y = -radius; y < radius; y++) {
                          var distSq = x * x + y * y;
                          if (distSq > maxDistSq || distSq < minDistSq) {
                            continue;
                          }
                          var dist = Math.sqrt(distSq);
                          var ang = Math.atan2(y, x);
                          core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Color3.HSVtoRGBToRef(ang * 180 / Math.PI + 180, dist / radius, 1, color);
                          var index = (x + radius + (y + radius) * 2 * radius) * 4;
                          data[index] = color.r * 255;
                          data[index + 1] = color.g * 255;
                          data[index + 2] = color.b * 255;
                          var alphaRatio = (dist - innerRadius) / (radius - innerRadius);
                          var alphaAmount = 0.2;
                          var maxAlpha = 0.2;
                          var minAlpha = 0.04;
                          var lowerRadius = 50;
                          var upperRadius = 150;
                          if (radius < lowerRadius) {
                            alphaAmount = maxAlpha;
                          } else if (radius > upperRadius) {
                            alphaAmount = minAlpha;
                          } else {
                            alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;
                          }
                          alphaRatio = (dist - innerRadius) / (radius - innerRadius);
                          if (alphaRatio < alphaAmount) {
                            data[index + 3] = 255 * (alphaRatio / alphaAmount);
                          } else if (alphaRatio > 1 - alphaAmount) {
                            data[index + 3] = 255 * (1 - (alphaRatio - (1 - alphaAmount)) / alphaAmount);
                          } else {
                            data[index + 3] = 255;
                          }
                        }
                      }
                      context.putImageData(image, 0, 0);
                      return canvas;
                    };
                    ColorPicker2.prototype._draw = function(context) {
                      context.save();
                      this._applyStates(context);
                      var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;
                      var wheelThickness = radius * 0.2;
                      var left = this._currentMeasure.left;
                      var top = this._currentMeasure.top;
                      if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {
                        this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);
                      }
                      this._updateSquareProps();
                      if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                        context.shadowColor = this.shadowColor;
                        context.shadowBlur = this.shadowBlur;
                        context.shadowOffsetX = this.shadowOffsetX;
                        context.shadowOffsetY = this.shadowOffsetY;
                        context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);
                      }
                      context.drawImage(this._colorWheelCanvas, left, top);
                      if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                        context.shadowBlur = 0;
                        context.shadowOffsetX = 0;
                        context.shadowOffsetY = 0;
                      }
                      this._drawGradientSquare(this._h, this._squareLeft, this._squareTop, this._squareSize, this._squareSize, context);
                      var cx = this._squareLeft + this._squareSize * this._s;
                      var cy = this._squareTop + this._squareSize * (1 - this._v);
                      this._drawCircle(cx, cy, radius * 0.04, context);
                      var dist = radius - wheelThickness * 0.5;
                      cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;
                      cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;
                      this._drawCircle(cx, cy, wheelThickness * 0.35, context);
                      context.restore();
                    };
                    ColorPicker2.prototype._updateValueFromPointer = function(x, y) {
                      if (this._pointerStartedOnWheel) {
                        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;
                        var centerX = radius + this._currentMeasure.left;
                        var centerY = radius + this._currentMeasure.top;
                        this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;
                      } else if (this._pointerStartedOnSquare) {
                        this._updateSquareProps();
                        this._s = (x - this._squareLeft) / this._squareSize;
                        this._v = 1 - (y - this._squareTop) / this._squareSize;
                        this._s = Math.min(this._s, 1);
                        this._s = Math.max(this._s, ColorPicker2._Epsilon);
                        this._v = Math.min(this._v, 1);
                        this._v = Math.max(this._v, ColorPicker2._Epsilon);
                      }
                      core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Color3.HSVtoRGBToRef(this._h, this._s, this._v, this._tmpColor);
                      this.value = this._tmpColor;
                    };
                    ColorPicker2.prototype._isPointOnSquare = function(x, y) {
                      this._updateSquareProps();
                      var left = this._squareLeft;
                      var top = this._squareTop;
                      var size = this._squareSize;
                      if (x >= left && x <= left + size && y >= top && y <= top + size) {
                        return true;
                      }
                      return false;
                    };
                    ColorPicker2.prototype._isPointOnWheel = function(x, y) {
                      var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;
                      var centerX = radius + this._currentMeasure.left;
                      var centerY = radius + this._currentMeasure.top;
                      var wheelThickness = radius * 0.2;
                      var innerRadius = radius - wheelThickness;
                      var radiusSq = radius * radius;
                      var innerRadiusSq = innerRadius * innerRadius;
                      var dx = x - centerX;
                      var dy = y - centerY;
                      var distSq = dx * dx + dy * dy;
                      if (distSq <= radiusSq && distSq >= innerRadiusSq) {
                        return true;
                      }
                      return false;
                    };
                    ColorPicker2.prototype._onPointerDown = function(target, coordinates, pointerId, buttonIndex, pi) {
                      if (!_super.prototype._onPointerDown.call(this, target, coordinates, pointerId, buttonIndex, pi)) {
                        return false;
                      }
                      if (this.isReadOnly) {
                        return true;
                      }
                      this._pointerIsDown = true;
                      this._pointerStartedOnSquare = false;
                      this._pointerStartedOnWheel = false;
                      this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);
                      var x = this._transformedPosition.x;
                      var y = this._transformedPosition.y;
                      if (this._isPointOnSquare(x, y)) {
                        this._pointerStartedOnSquare = true;
                      } else if (this._isPointOnWheel(x, y)) {
                        this._pointerStartedOnWheel = true;
                      }
                      this._updateValueFromPointer(x, y);
                      this._host._capturingControl[pointerId] = this;
                      this._lastPointerDownId = pointerId;
                      return true;
                    };
                    ColorPicker2.prototype._onPointerMove = function(target, coordinates, pointerId, pi) {
                      if (pointerId != this._lastPointerDownId) {
                        return;
                      }
                      if (!this.isReadOnly) {
                        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);
                        var x = this._transformedPosition.x;
                        var y = this._transformedPosition.y;
                        if (this._pointerIsDown) {
                          this._updateValueFromPointer(x, y);
                        }
                      }
                      _super.prototype._onPointerMove.call(this, target, coordinates, pointerId, pi);
                    };
                    ColorPicker2.prototype._onPointerUp = function(target, coordinates, pointerId, buttonIndex, notifyClick, pi) {
                      this._pointerIsDown = false;
                      delete this._host._capturingControl[pointerId];
                      _super.prototype._onPointerUp.call(this, target, coordinates, pointerId, buttonIndex, notifyClick, pi);
                    };
                    ColorPicker2.prototype._onCanvasBlur = function() {
                      this._forcePointerUp();
                      _super.prototype._onCanvasBlur.call(this);
                    };
                    ColorPicker2.ShowPickerDialogAsync = function(advancedTexture, options) {
                      return new Promise(function(resolve) {
                        options.pickerWidth = options.pickerWidth || "640px";
                        options.pickerHeight = options.pickerHeight || "400px";
                        options.headerHeight = options.headerHeight || "35px";
                        options.lastColor = options.lastColor || "#000000";
                        options.swatchLimit = options.swatchLimit || 20;
                        options.numSwatchesPerLine = options.numSwatchesPerLine || 10;
                        var drawerMaxRows = options.swatchLimit / options.numSwatchesPerLine;
                        var rawSwatchSize = parseFloat(options.pickerWidth) / options.numSwatchesPerLine;
                        var gutterSize = Math.floor(rawSwatchSize * 0.25);
                        var colGutters = gutterSize * (options.numSwatchesPerLine + 1);
                        var swatchSize = Math.floor((parseFloat(options.pickerWidth) - colGutters) / options.numSwatchesPerLine);
                        var drawerMaxSize = swatchSize * drawerMaxRows + gutterSize * (drawerMaxRows + 1);
                        var containerSize = (parseInt(options.pickerHeight) + drawerMaxSize + Math.floor(swatchSize * 0.25)).toString() + "px";
                        var buttonColor = "#c0c0c0";
                        var buttonBackgroundColor = "#535353";
                        var buttonBackgroundHoverColor = "#414141";
                        var buttonBackgroundClickColor = "515151";
                        var buttonDisabledColor = "#555555";
                        var buttonDisabledBackgroundColor = "#454545";
                        var currentSwatchesOutlineColor = "#404040";
                        var luminanceLimitColor = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Color3.FromHexString("#dddddd");
                        var luminanceLimit = luminanceLimitColor.r + luminanceLimitColor.g + luminanceLimitColor.b;
                        var iconColorDark = "#aaaaaa";
                        var iconColorLight = "#ffffff";
                        var buttonFontSize;
                        var butEdit;
                        var inputFieldLabels = ["R", "G", "B"];
                        var inputTextBackgroundColor = "#454545";
                        var inputTextColor = "#f0f0f0";
                        var swatchNumber;
                        var swatchDrawer;
                        var editSwatchMode = false;
                        var butSave;
                        var lastVal;
                        var activeField;
                        var dialogContainer = new _grid__WEBPACK_IMPORTED_MODULE_6__.Grid();
                        dialogContainer.name = "Dialog Container";
                        dialogContainer.width = options.pickerWidth;
                        if (options.savedColors) {
                          dialogContainer.height = containerSize;
                          var topRow = parseInt(options.pickerHeight) / parseInt(containerSize);
                          dialogContainer.addRowDefinition(topRow, false);
                          dialogContainer.addRowDefinition(1 - topRow, false);
                        } else {
                          dialogContainer.height = options.pickerHeight;
                          dialogContainer.addRowDefinition(1, false);
                        }
                        advancedTexture.addControl(dialogContainer);
                        if (options.savedColors) {
                          swatchDrawer = new _grid__WEBPACK_IMPORTED_MODULE_6__.Grid();
                          swatchDrawer.name = "Swatch Drawer";
                          swatchDrawer.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_TOP;
                          swatchDrawer.background = buttonBackgroundColor;
                          swatchDrawer.width = options.pickerWidth;
                          var initialRows = options.savedColors.length / options.numSwatchesPerLine;
                          var gutterCount = void 0;
                          if (initialRows == 0) {
                            gutterCount = 0;
                          } else {
                            gutterCount = initialRows + 1;
                          }
                          swatchDrawer.height = (swatchSize * initialRows + gutterCount * gutterSize).toString() + "px";
                          swatchDrawer.top = Math.floor(swatchSize * 0.25).toString() + "px";
                          for (var i = 0; i < Math.ceil(options.savedColors.length / options.numSwatchesPerLine) * 2 + 1; i++) {
                            if (i % 2 != 0) {
                              swatchDrawer.addRowDefinition(swatchSize, true);
                            } else {
                              swatchDrawer.addRowDefinition(gutterSize, true);
                            }
                          }
                          for (var i = 0; i < options.numSwatchesPerLine * 2 + 1; i++) {
                            if (i % 2 != 0) {
                              swatchDrawer.addColumnDefinition(swatchSize, true);
                            } else {
                              swatchDrawer.addColumnDefinition(gutterSize, true);
                            }
                          }
                          dialogContainer.addControl(swatchDrawer, 1, 0);
                        }
                        var pickerPanel = new _grid__WEBPACK_IMPORTED_MODULE_6__.Grid();
                        pickerPanel.name = "Picker Panel";
                        pickerPanel.height = options.pickerHeight;
                        var panelHead = parseInt(options.headerHeight) / parseInt(options.pickerHeight);
                        var pickerPanelRows = [panelHead, 1 - panelHead];
                        pickerPanel.addRowDefinition(pickerPanelRows[0], false);
                        pickerPanel.addRowDefinition(pickerPanelRows[1], false);
                        dialogContainer.addControl(pickerPanel, 0, 0);
                        var header = new _rectangle__WEBPACK_IMPORTED_MODULE_4__.Rectangle();
                        header.name = "Dialogue Header Bar";
                        header.background = "#cccccc";
                        header.thickness = 0;
                        pickerPanel.addControl(header, 0, 0);
                        var closeButton = _button__WEBPACK_IMPORTED_MODULE_5__.Button.CreateSimpleButton("closeButton", "a");
                        closeButton.fontFamily = "coreglyphs";
                        var headerColor3 = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Color3.FromHexString(header.background);
                        var closeIconColor = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Color3(1 - headerColor3.r, 1 - headerColor3.g, 1 - headerColor3.b);
                        closeButton.color = closeIconColor.toHexString();
                        closeButton.fontSize = Math.floor(parseInt(options.headerHeight) * 0.6);
                        closeButton.textBlock.textVerticalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_CENTER;
                        closeButton.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_RIGHT;
                        closeButton.height = closeButton.width = options.headerHeight;
                        closeButton.background = header.background;
                        closeButton.thickness = 0;
                        closeButton.pointerDownAnimation = function() {
                        };
                        closeButton.pointerUpAnimation = function() {
                          closeButton.background = header.background;
                        };
                        closeButton.pointerEnterAnimation = function() {
                          closeButton.color = header.background;
                          closeButton.background = "red";
                        };
                        closeButton.pointerOutAnimation = function() {
                          closeButton.color = closeIconColor.toHexString();
                          closeButton.background = header.background;
                        };
                        closeButton.onPointerClickObservable.add(function() {
                          closePicker(currentSwatch.background);
                        });
                        pickerPanel.addControl(closeButton, 0, 0);
                        var dialogBody = new _grid__WEBPACK_IMPORTED_MODULE_6__.Grid();
                        dialogBody.name = "Dialogue Body";
                        dialogBody.background = buttonBackgroundColor;
                        var dialogBodyCols = [0.4375, 0.5625];
                        dialogBody.addRowDefinition(1, false);
                        dialogBody.addColumnDefinition(dialogBodyCols[0], false);
                        dialogBody.addColumnDefinition(dialogBodyCols[1], false);
                        pickerPanel.addControl(dialogBody, 1, 0);
                        var pickerGrid = new _grid__WEBPACK_IMPORTED_MODULE_6__.Grid();
                        pickerGrid.name = "Picker Grid";
                        pickerGrid.addRowDefinition(0.85, false);
                        pickerGrid.addRowDefinition(0.15, false);
                        dialogBody.addControl(pickerGrid, 0, 0);
                        var picker = new ColorPicker2();
                        picker.name = "GUI Color Picker";
                        if (options.pickerHeight < options.pickerWidth) {
                          picker.width = 0.89;
                        } else {
                          picker.height = 0.89;
                        }
                        picker.value = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Color3.FromHexString(options.lastColor);
                        picker.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_CENTER;
                        picker.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_CENTER;
                        picker.onPointerDownObservable.add(function() {
                          activeField = picker.name;
                          lastVal = "";
                          editSwatches(false);
                        });
                        picker.onValueChangedObservable.add(function(value) {
                          if (activeField == picker.name) {
                            updateValues(value, picker.name);
                          }
                        });
                        pickerGrid.addControl(picker, 0, 0);
                        var pickerBodyRight = new _grid__WEBPACK_IMPORTED_MODULE_6__.Grid();
                        pickerBodyRight.name = "Dialogue Right Half";
                        pickerBodyRight.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                        var pickerBodyRightRows = [0.514, 0.486];
                        pickerBodyRight.addRowDefinition(pickerBodyRightRows[0], false);
                        pickerBodyRight.addRowDefinition(pickerBodyRightRows[1], false);
                        dialogBody.addControl(pickerBodyRight, 1, 1);
                        var pickerSwatchesButtons = new _grid__WEBPACK_IMPORTED_MODULE_6__.Grid();
                        pickerSwatchesButtons.name = "Swatches and Buttons";
                        var pickerButtonsCol = [0.417, 0.583];
                        pickerSwatchesButtons.addRowDefinition(1, false);
                        pickerSwatchesButtons.addColumnDefinition(pickerButtonsCol[0], false);
                        pickerSwatchesButtons.addColumnDefinition(pickerButtonsCol[1], false);
                        pickerBodyRight.addControl(pickerSwatchesButtons, 0, 0);
                        var pickerSwatches = new _grid__WEBPACK_IMPORTED_MODULE_6__.Grid();
                        pickerSwatches.name = "New and Current Swatches";
                        var pickeSwatchesRows = [0.04, 0.16, 0.64, 0.16];
                        pickerSwatches.addRowDefinition(pickeSwatchesRows[0], false);
                        pickerSwatches.addRowDefinition(pickeSwatchesRows[1], false);
                        pickerSwatches.addRowDefinition(pickeSwatchesRows[2], false);
                        pickerSwatches.addRowDefinition(pickeSwatchesRows[3], false);
                        pickerSwatchesButtons.addControl(pickerSwatches, 0, 0);
                        var activeSwatches = new _grid__WEBPACK_IMPORTED_MODULE_6__.Grid();
                        activeSwatches.name = "Active Swatches";
                        activeSwatches.width = 0.67;
                        activeSwatches.addRowDefinition(0.5, false);
                        activeSwatches.addRowDefinition(0.5, false);
                        pickerSwatches.addControl(activeSwatches, 2, 0);
                        var labelWidth = Math.floor(parseInt(options.pickerWidth) * dialogBodyCols[1] * pickerButtonsCol[0] * 0.11);
                        var labelHeight = Math.floor(parseInt(options.pickerHeight) * pickerPanelRows[1] * pickerBodyRightRows[0] * pickeSwatchesRows[1] * 0.5);
                        var labelTextSize;
                        if (options.pickerWidth > options.pickerHeight) {
                          labelTextSize = labelHeight;
                        } else {
                          labelTextSize = labelWidth;
                        }
                        var newText = new _controls_textBlock__WEBPACK_IMPORTED_MODULE_7__.TextBlock();
                        newText.text = "new";
                        newText.name = "New Color Label";
                        newText.color = buttonColor;
                        newText.fontSize = labelTextSize;
                        pickerSwatches.addControl(newText, 1, 0);
                        var newSwatch = new _rectangle__WEBPACK_IMPORTED_MODULE_4__.Rectangle();
                        newSwatch.name = "New Color Swatch";
                        newSwatch.background = options.lastColor;
                        newSwatch.thickness = 0;
                        activeSwatches.addControl(newSwatch, 0, 0);
                        var currentSwatch = _button__WEBPACK_IMPORTED_MODULE_5__.Button.CreateSimpleButton("currentSwatch", "");
                        currentSwatch.background = options.lastColor;
                        currentSwatch.thickness = 0;
                        currentSwatch.onPointerClickObservable.add(function() {
                          var revertColor = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Color3.FromHexString(currentSwatch.background);
                          updateValues(revertColor, currentSwatch.name);
                          editSwatches(false);
                        });
                        currentSwatch.pointerDownAnimation = function() {
                        };
                        currentSwatch.pointerUpAnimation = function() {
                        };
                        currentSwatch.pointerEnterAnimation = function() {
                        };
                        currentSwatch.pointerOutAnimation = function() {
                        };
                        activeSwatches.addControl(currentSwatch, 1, 0);
                        var swatchOutline = new _rectangle__WEBPACK_IMPORTED_MODULE_4__.Rectangle();
                        swatchOutline.name = "Swatch Outline";
                        swatchOutline.width = 0.67;
                        swatchOutline.thickness = 2;
                        swatchOutline.color = currentSwatchesOutlineColor;
                        swatchOutline.isHitTestVisible = false;
                        pickerSwatches.addControl(swatchOutline, 2, 0);
                        var currentText = new _controls_textBlock__WEBPACK_IMPORTED_MODULE_7__.TextBlock();
                        currentText.name = "Current Color Label";
                        currentText.text = "current";
                        currentText.color = buttonColor;
                        currentText.fontSize = labelTextSize;
                        pickerSwatches.addControl(currentText, 3, 0);
                        var buttonGrid = new _grid__WEBPACK_IMPORTED_MODULE_6__.Grid();
                        buttonGrid.name = "Button Grid";
                        buttonGrid.height = 0.8;
                        var buttonGridRows = 1 / 3;
                        buttonGrid.addRowDefinition(buttonGridRows, false);
                        buttonGrid.addRowDefinition(buttonGridRows, false);
                        buttonGrid.addRowDefinition(buttonGridRows, false);
                        pickerSwatchesButtons.addControl(buttonGrid, 0, 1);
                        var buttonWidth = Math.floor(parseInt(options.pickerWidth) * dialogBodyCols[1] * pickerButtonsCol[1] * 0.67).toString() + "px";
                        var buttonHeight = Math.floor(parseInt(options.pickerHeight) * pickerPanelRows[1] * pickerBodyRightRows[0] * (parseFloat(buttonGrid.height.toString()) / 100) * buttonGridRows * 0.7).toString() + "px";
                        if (parseFloat(buttonWidth) > parseFloat(buttonHeight)) {
                          buttonFontSize = Math.floor(parseFloat(buttonHeight) * 0.45);
                        } else {
                          buttonFontSize = Math.floor(parseFloat(buttonWidth) * 0.11);
                        }
                        var butOK = _button__WEBPACK_IMPORTED_MODULE_5__.Button.CreateSimpleButton("butOK", "OK");
                        butOK.width = buttonWidth;
                        butOK.height = buttonHeight;
                        butOK.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_CENTER;
                        butOK.thickness = 2;
                        butOK.color = buttonColor;
                        butOK.fontSize = buttonFontSize;
                        butOK.background = buttonBackgroundColor;
                        butOK.onPointerEnterObservable.add(function() {
                          butOK.background = buttonBackgroundHoverColor;
                        });
                        butOK.onPointerOutObservable.add(function() {
                          butOK.background = buttonBackgroundColor;
                        });
                        butOK.pointerDownAnimation = function() {
                          butOK.background = buttonBackgroundClickColor;
                        };
                        butOK.pointerUpAnimation = function() {
                          butOK.background = buttonBackgroundHoverColor;
                        };
                        butOK.onPointerClickObservable.add(function() {
                          editSwatches(false);
                          closePicker(newSwatch.background);
                        });
                        buttonGrid.addControl(butOK, 0, 0);
                        var butCancel = _button__WEBPACK_IMPORTED_MODULE_5__.Button.CreateSimpleButton("butCancel", "Cancel");
                        butCancel.width = buttonWidth;
                        butCancel.height = buttonHeight;
                        butCancel.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_CENTER;
                        butCancel.thickness = 2;
                        butCancel.color = buttonColor;
                        butCancel.fontSize = buttonFontSize;
                        butCancel.background = buttonBackgroundColor;
                        butCancel.onPointerEnterObservable.add(function() {
                          butCancel.background = buttonBackgroundHoverColor;
                        });
                        butCancel.onPointerOutObservable.add(function() {
                          butCancel.background = buttonBackgroundColor;
                        });
                        butCancel.pointerDownAnimation = function() {
                          butCancel.background = buttonBackgroundClickColor;
                        };
                        butCancel.pointerUpAnimation = function() {
                          butCancel.background = buttonBackgroundHoverColor;
                        };
                        butCancel.onPointerClickObservable.add(function() {
                          editSwatches(false);
                          closePicker(currentSwatch.background);
                        });
                        buttonGrid.addControl(butCancel, 1, 0);
                        if (options.savedColors) {
                          butSave = _button__WEBPACK_IMPORTED_MODULE_5__.Button.CreateSimpleButton("butSave", "Save");
                          butSave.width = buttonWidth;
                          butSave.height = buttonHeight;
                          butSave.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_CENTER;
                          butSave.thickness = 2;
                          butSave.fontSize = buttonFontSize;
                          if (options.savedColors.length < options.swatchLimit) {
                            butSave.color = buttonColor;
                            butSave.background = buttonBackgroundColor;
                          } else {
                            disableButton(butSave, true);
                          }
                          butSave.onPointerEnterObservable.add(function() {
                            if (options.savedColors) {
                              if (options.savedColors.length < options.swatchLimit) {
                                butSave.background = buttonBackgroundHoverColor;
                              }
                            }
                          });
                          butSave.onPointerOutObservable.add(function() {
                            if (options.savedColors) {
                              if (options.savedColors.length < options.swatchLimit) {
                                butSave.background = buttonBackgroundColor;
                              }
                            }
                          });
                          butSave.pointerDownAnimation = function() {
                            if (options.savedColors) {
                              if (options.savedColors.length < options.swatchLimit) {
                                butSave.background = buttonBackgroundClickColor;
                              }
                            }
                          };
                          butSave.pointerUpAnimation = function() {
                            if (options.savedColors) {
                              if (options.savedColors.length < options.swatchLimit) {
                                butSave.background = buttonBackgroundHoverColor;
                              }
                            }
                          };
                          butSave.onPointerClickObservable.add(function() {
                            if (options.savedColors) {
                              if (options.savedColors.length == 0) {
                                setEditButtonVisibility(true);
                              }
                              if (options.savedColors.length < options.swatchLimit) {
                                updateSwatches(newSwatch.background, butSave);
                              }
                              editSwatches(false);
                            }
                          });
                          if (options.savedColors.length > 0) {
                            setEditButtonVisibility(true);
                          }
                          buttonGrid.addControl(butSave, 2, 0);
                        }
                        var pickerColorValues = new _grid__WEBPACK_IMPORTED_MODULE_6__.Grid();
                        pickerColorValues.name = "Dialog Lower Right";
                        pickerColorValues.addRowDefinition(0.02, false);
                        pickerColorValues.addRowDefinition(0.63, false);
                        pickerColorValues.addRowDefinition(0.21, false);
                        pickerColorValues.addRowDefinition(0.14, false);
                        pickerBodyRight.addControl(pickerColorValues, 1, 0);
                        var currentColor = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Color3.FromHexString(options.lastColor);
                        var rgbValuesQuadrant = new _grid__WEBPACK_IMPORTED_MODULE_6__.Grid();
                        rgbValuesQuadrant.name = "RGB Values";
                        rgbValuesQuadrant.width = 0.82;
                        rgbValuesQuadrant.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_CENTER;
                        rgbValuesQuadrant.addRowDefinition(1 / 3, false);
                        rgbValuesQuadrant.addRowDefinition(1 / 3, false);
                        rgbValuesQuadrant.addRowDefinition(1 / 3, false);
                        rgbValuesQuadrant.addColumnDefinition(0.1, false);
                        rgbValuesQuadrant.addColumnDefinition(0.2, false);
                        rgbValuesQuadrant.addColumnDefinition(0.7, false);
                        pickerColorValues.addControl(rgbValuesQuadrant, 1, 0);
                        for (var i = 0; i < inputFieldLabels.length; i++) {
                          var labelText_1 = new _controls_textBlock__WEBPACK_IMPORTED_MODULE_7__.TextBlock();
                          labelText_1.text = inputFieldLabels[i];
                          labelText_1.color = buttonColor;
                          labelText_1.fontSize = buttonFontSize;
                          rgbValuesQuadrant.addControl(labelText_1, i, 0);
                        }
                        var rValInt = new _inputText__WEBPACK_IMPORTED_MODULE_3__.InputText();
                        rValInt.width = 0.83;
                        rValInt.height = 0.72;
                        rValInt.name = "rIntField";
                        rValInt.fontSize = buttonFontSize;
                        rValInt.text = (currentColor.r * 255).toString();
                        rValInt.color = inputTextColor;
                        rValInt.background = inputTextBackgroundColor;
                        rValInt.onFocusObservable.add(function() {
                          activeField = rValInt.name;
                          lastVal = rValInt.text;
                          editSwatches(false);
                        });
                        rValInt.onBlurObservable.add(function() {
                          if (rValInt.text == "") {
                            rValInt.text = "0";
                          }
                          updateInt(rValInt, "r");
                          if (activeField == rValInt.name) {
                            activeField = "";
                          }
                        });
                        rValInt.onTextChangedObservable.add(function() {
                          if (activeField == rValInt.name) {
                            updateInt(rValInt, "r");
                          }
                        });
                        rgbValuesQuadrant.addControl(rValInt, 0, 1);
                        var gValInt = new _inputText__WEBPACK_IMPORTED_MODULE_3__.InputText();
                        gValInt.width = 0.83;
                        gValInt.height = 0.72;
                        gValInt.name = "gIntField";
                        gValInt.fontSize = buttonFontSize;
                        gValInt.text = (currentColor.g * 255).toString();
                        gValInt.color = inputTextColor;
                        gValInt.background = inputTextBackgroundColor;
                        gValInt.onFocusObservable.add(function() {
                          activeField = gValInt.name;
                          lastVal = gValInt.text;
                          editSwatches(false);
                        });
                        gValInt.onBlurObservable.add(function() {
                          if (gValInt.text == "") {
                            gValInt.text = "0";
                          }
                          updateInt(gValInt, "g");
                          if (activeField == gValInt.name) {
                            activeField = "";
                          }
                        });
                        gValInt.onTextChangedObservable.add(function() {
                          if (activeField == gValInt.name) {
                            updateInt(gValInt, "g");
                          }
                        });
                        rgbValuesQuadrant.addControl(gValInt, 1, 1);
                        var bValInt = new _inputText__WEBPACK_IMPORTED_MODULE_3__.InputText();
                        bValInt.width = 0.83;
                        bValInt.height = 0.72;
                        bValInt.name = "bIntField";
                        bValInt.fontSize = buttonFontSize;
                        bValInt.text = (currentColor.b * 255).toString();
                        bValInt.color = inputTextColor;
                        bValInt.background = inputTextBackgroundColor;
                        bValInt.onFocusObservable.add(function() {
                          activeField = bValInt.name;
                          lastVal = bValInt.text;
                          editSwatches(false);
                        });
                        bValInt.onBlurObservable.add(function() {
                          if (bValInt.text == "") {
                            bValInt.text = "0";
                          }
                          updateInt(bValInt, "b");
                          if (activeField == bValInt.name) {
                            activeField = "";
                          }
                        });
                        bValInt.onTextChangedObservable.add(function() {
                          if (activeField == bValInt.name) {
                            updateInt(bValInt, "b");
                          }
                        });
                        rgbValuesQuadrant.addControl(bValInt, 2, 1);
                        var rValDec = new _inputText__WEBPACK_IMPORTED_MODULE_3__.InputText();
                        rValDec.width = 0.95;
                        rValDec.height = 0.72;
                        rValDec.name = "rDecField";
                        rValDec.fontSize = buttonFontSize;
                        rValDec.text = currentColor.r.toString();
                        rValDec.color = inputTextColor;
                        rValDec.background = inputTextBackgroundColor;
                        rValDec.onFocusObservable.add(function() {
                          activeField = rValDec.name;
                          lastVal = rValDec.text;
                          editSwatches(false);
                        });
                        rValDec.onBlurObservable.add(function() {
                          if (parseFloat(rValDec.text) == 0 || rValDec.text == "") {
                            rValDec.text = "0";
                            updateFloat(rValDec, "r");
                          }
                          if (activeField == rValDec.name) {
                            activeField = "";
                          }
                        });
                        rValDec.onTextChangedObservable.add(function() {
                          if (activeField == rValDec.name) {
                            updateFloat(rValDec, "r");
                          }
                        });
                        rgbValuesQuadrant.addControl(rValDec, 0, 2);
                        var gValDec = new _inputText__WEBPACK_IMPORTED_MODULE_3__.InputText();
                        gValDec.width = 0.95;
                        gValDec.height = 0.72;
                        gValDec.name = "gDecField";
                        gValDec.fontSize = buttonFontSize;
                        gValDec.text = currentColor.g.toString();
                        gValDec.color = inputTextColor;
                        gValDec.background = inputTextBackgroundColor;
                        gValDec.onFocusObservable.add(function() {
                          activeField = gValDec.name;
                          lastVal = gValDec.text;
                          editSwatches(false);
                        });
                        gValDec.onBlurObservable.add(function() {
                          if (parseFloat(gValDec.text) == 0 || gValDec.text == "") {
                            gValDec.text = "0";
                            updateFloat(gValDec, "g");
                          }
                          if (activeField == gValDec.name) {
                            activeField = "";
                          }
                        });
                        gValDec.onTextChangedObservable.add(function() {
                          if (activeField == gValDec.name) {
                            updateFloat(gValDec, "g");
                          }
                        });
                        rgbValuesQuadrant.addControl(gValDec, 1, 2);
                        var bValDec = new _inputText__WEBPACK_IMPORTED_MODULE_3__.InputText();
                        bValDec.width = 0.95;
                        bValDec.height = 0.72;
                        bValDec.name = "bDecField";
                        bValDec.fontSize = buttonFontSize;
                        bValDec.text = currentColor.b.toString();
                        bValDec.color = inputTextColor;
                        bValDec.background = inputTextBackgroundColor;
                        bValDec.onFocusObservable.add(function() {
                          activeField = bValDec.name;
                          lastVal = bValDec.text;
                          editSwatches(false);
                        });
                        bValDec.onBlurObservable.add(function() {
                          if (parseFloat(bValDec.text) == 0 || bValDec.text == "") {
                            bValDec.text = "0";
                            updateFloat(bValDec, "b");
                          }
                          if (activeField == bValDec.name) {
                            activeField = "";
                          }
                        });
                        bValDec.onTextChangedObservable.add(function() {
                          if (activeField == bValDec.name) {
                            updateFloat(bValDec, "b");
                          }
                        });
                        rgbValuesQuadrant.addControl(bValDec, 2, 2);
                        var hexValueQuadrant = new _grid__WEBPACK_IMPORTED_MODULE_6__.Grid();
                        hexValueQuadrant.name = "Hex Value";
                        hexValueQuadrant.width = 0.82;
                        hexValueQuadrant.addRowDefinition(1, false);
                        hexValueQuadrant.addColumnDefinition(0.1, false);
                        hexValueQuadrant.addColumnDefinition(0.9, false);
                        pickerColorValues.addControl(hexValueQuadrant, 2, 0);
                        var labelText = new _controls_textBlock__WEBPACK_IMPORTED_MODULE_7__.TextBlock();
                        labelText.text = "#";
                        labelText.color = buttonColor;
                        labelText.fontSize = buttonFontSize;
                        hexValueQuadrant.addControl(labelText, 0, 0);
                        var hexVal = new _inputText__WEBPACK_IMPORTED_MODULE_3__.InputText();
                        hexVal.width = 0.96;
                        hexVal.height = 0.72;
                        hexVal.name = "hexField";
                        hexVal.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_CENTER;
                        hexVal.fontSize = buttonFontSize;
                        var minusPound = options.lastColor.split("#");
                        hexVal.text = minusPound[1];
                        hexVal.color = inputTextColor;
                        hexVal.background = inputTextBackgroundColor;
                        hexVal.onFocusObservable.add(function() {
                          activeField = hexVal.name;
                          lastVal = hexVal.text;
                          editSwatches(false);
                        });
                        hexVal.onBlurObservable.add(function() {
                          if (hexVal.text.length == 3) {
                            var val = hexVal.text.split("");
                            hexVal.text = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];
                          }
                          if (hexVal.text == "") {
                            hexVal.text = "000000";
                            updateValues(core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Color3.FromHexString(hexVal.text), "b");
                          }
                          if (activeField == hexVal.name) {
                            activeField = "";
                          }
                        });
                        hexVal.onTextChangedObservable.add(function() {
                          var newHexValue = hexVal.text;
                          var checkHex = /[^0-9A-F]/i.test(newHexValue);
                          if ((hexVal.text.length > 6 || checkHex) && activeField == hexVal.name) {
                            hexVal.text = lastVal;
                          } else {
                            if (hexVal.text.length < 6) {
                              var leadingZero = 6 - hexVal.text.length;
                              for (var i2 = 0; i2 < leadingZero; i2++) {
                                newHexValue = "0" + newHexValue;
                              }
                            }
                            if (hexVal.text.length == 3) {
                              var val = hexVal.text.split("");
                              newHexValue = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];
                            }
                            newHexValue = "#" + newHexValue;
                            if (activeField == hexVal.name) {
                              lastVal = hexVal.text;
                              updateValues(core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Color3.FromHexString(newHexValue), hexVal.name);
                            }
                          }
                        });
                        hexValueQuadrant.addControl(hexVal, 0, 1);
                        if (options.savedColors && options.savedColors.length > 0) {
                          updateSwatches("", butSave);
                        }
                        function updateValues(value, inputField) {
                          activeField = inputField;
                          var pickedColor = value.toHexString();
                          newSwatch.background = pickedColor;
                          if (rValInt.name != activeField) {
                            rValInt.text = Math.floor(value.r * 255).toString();
                          }
                          if (gValInt.name != activeField) {
                            gValInt.text = Math.floor(value.g * 255).toString();
                          }
                          if (bValInt.name != activeField) {
                            bValInt.text = Math.floor(value.b * 255).toString();
                          }
                          if (rValDec.name != activeField) {
                            rValDec.text = value.r.toString();
                          }
                          if (gValDec.name != activeField) {
                            gValDec.text = value.g.toString();
                          }
                          if (bValDec.name != activeField) {
                            bValDec.text = value.b.toString();
                          }
                          if (hexVal.name != activeField) {
                            var minusPound_1 = pickedColor.split("#");
                            hexVal.text = minusPound_1[1];
                          }
                          if (picker.name != activeField) {
                            picker.value = value;
                          }
                        }
                        function updateInt(field, channel) {
                          var newValue = field.text;
                          var checkVal = /[^0-9]/g.test(newValue);
                          if (checkVal) {
                            field.text = lastVal;
                            return;
                          } else {
                            if (newValue != "") {
                              if (Math.floor(parseInt(newValue)) < 0) {
                                newValue = "0";
                              } else if (Math.floor(parseInt(newValue)) > 255) {
                                newValue = "255";
                              } else if (isNaN(parseInt(newValue))) {
                                newValue = "0";
                              }
                            }
                            if (activeField == field.name) {
                              lastVal = newValue;
                            }
                          }
                          if (newValue != "") {
                            newValue = parseInt(newValue).toString();
                            field.text = newValue;
                            var newSwatchRGB = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Color3.FromHexString(newSwatch.background);
                            if (activeField == field.name) {
                              if (channel == "r") {
                                updateValues(new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Color3(parseInt(newValue) / 255, newSwatchRGB.g, newSwatchRGB.b), field.name);
                              } else if (channel == "g") {
                                updateValues(new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Color3(newSwatchRGB.r, parseInt(newValue) / 255, newSwatchRGB.b), field.name);
                              } else {
                                updateValues(new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Color3(newSwatchRGB.r, newSwatchRGB.g, parseInt(newValue) / 255), field.name);
                              }
                            }
                          }
                        }
                        function updateFloat(field, channel) {
                          var newValue = field.text;
                          var checkVal = /[^0-9.]/g.test(newValue);
                          if (checkVal) {
                            field.text = lastVal;
                            return;
                          } else {
                            if (newValue != "" && newValue != "." && parseFloat(newValue) != 0) {
                              if (parseFloat(newValue) < 0) {
                                newValue = "0.0";
                              } else if (parseFloat(newValue) > 1) {
                                newValue = "1.0";
                              } else if (isNaN(parseFloat(newValue))) {
                                newValue = "0.0";
                              }
                            }
                            if (activeField == field.name) {
                              lastVal = newValue;
                            }
                          }
                          if (newValue != "" && newValue != "." && parseFloat(newValue) != 0) {
                            newValue = parseFloat(newValue).toString();
                            field.text = newValue;
                          } else {
                            newValue = "0.0";
                          }
                          var newSwatchRGB = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Color3.FromHexString(newSwatch.background);
                          if (activeField == field.name) {
                            if (channel == "r") {
                              updateValues(new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Color3(parseFloat(newValue), newSwatchRGB.g, newSwatchRGB.b), field.name);
                            } else if (channel == "g") {
                              updateValues(new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Color3(newSwatchRGB.r, parseFloat(newValue), newSwatchRGB.b), field.name);
                            } else {
                              updateValues(new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Color3(newSwatchRGB.r, newSwatchRGB.g, parseFloat(newValue)), field.name);
                            }
                          }
                        }
                        function deleteSwatch(index) {
                          if (options.savedColors) {
                            options.savedColors.splice(index, 1);
                          }
                          if (options.savedColors && options.savedColors.length == 0) {
                            setEditButtonVisibility(false);
                            editSwatchMode = false;
                          }
                        }
                        function createSwatch() {
                          if (options.savedColors && options.savedColors[swatchNumber]) {
                            var icon = void 0;
                            if (editSwatchMode) {
                              icon = "b";
                            } else {
                              icon = "";
                            }
                            var swatch_1 = _button__WEBPACK_IMPORTED_MODULE_5__.Button.CreateSimpleButton("Swatch_" + swatchNumber, icon);
                            swatch_1.fontFamily = "coreglyphs";
                            var swatchColor = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Color3.FromHexString(options.savedColors[swatchNumber]);
                            var swatchLuminence = swatchColor.r + swatchColor.g + swatchColor.b;
                            if (swatchLuminence > luminanceLimit) {
                              swatch_1.color = iconColorDark;
                            } else {
                              swatch_1.color = iconColorLight;
                            }
                            swatch_1.fontSize = Math.floor(swatchSize * 0.7);
                            swatch_1.textBlock.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_CENTER;
                            swatch_1.height = swatch_1.width = swatchSize.toString() + "px";
                            swatch_1.background = options.savedColors[swatchNumber];
                            swatch_1.thickness = 2;
                            var metadata_1 = swatchNumber;
                            swatch_1.pointerDownAnimation = function() {
                              swatch_1.thickness = 4;
                            };
                            swatch_1.pointerUpAnimation = function() {
                              swatch_1.thickness = 3;
                            };
                            swatch_1.pointerEnterAnimation = function() {
                              swatch_1.thickness = 3;
                            };
                            swatch_1.pointerOutAnimation = function() {
                              swatch_1.thickness = 2;
                            };
                            swatch_1.onPointerClickObservable.add(function() {
                              if (!editSwatchMode) {
                                if (options.savedColors) {
                                  updateValues(core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Color3.FromHexString(options.savedColors[metadata_1]), swatch_1.name);
                                }
                              } else {
                                deleteSwatch(metadata_1);
                                updateSwatches("", butSave);
                              }
                            });
                            return swatch_1;
                          } else {
                            return null;
                          }
                        }
                        function editSwatches(mode) {
                          if (mode !== void 0) {
                            editSwatchMode = mode;
                          }
                          var thisButton;
                          if (editSwatchMode) {
                            for (var i2 = 0; i2 < swatchDrawer.children.length; i2++) {
                              thisButton = swatchDrawer.children[i2];
                              thisButton.textBlock.text = "b";
                            }
                            if (butEdit !== void 0) {
                              butEdit.textBlock.text = "Done";
                            }
                          } else {
                            for (var i2 = 0; i2 < swatchDrawer.children.length; i2++) {
                              thisButton = swatchDrawer.children[i2];
                              thisButton.textBlock.text = "";
                            }
                            if (butEdit !== void 0) {
                              butEdit.textBlock.text = "Edit";
                            }
                          }
                        }
                        function updateSwatches(color, button) {
                          if (options.savedColors) {
                            if (color != "") {
                              options.savedColors.push(color);
                            }
                            swatchNumber = 0;
                            swatchDrawer.clearControls();
                            var rowCount = Math.ceil(options.savedColors.length / options.numSwatchesPerLine);
                            var gutterCount2 = void 0;
                            if (rowCount == 0) {
                              gutterCount2 = 0;
                            } else {
                              gutterCount2 = rowCount + 1;
                            }
                            if (swatchDrawer.rowCount != rowCount + gutterCount2) {
                              var currentRows = swatchDrawer.rowCount;
                              for (var i2 = 0; i2 < currentRows; i2++) {
                                swatchDrawer.removeRowDefinition(0);
                              }
                              for (var i2 = 0; i2 < rowCount + gutterCount2; i2++) {
                                if (i2 % 2) {
                                  swatchDrawer.addRowDefinition(swatchSize, true);
                                } else {
                                  swatchDrawer.addRowDefinition(gutterSize, true);
                                }
                              }
                            }
                            swatchDrawer.height = (swatchSize * rowCount + gutterCount2 * gutterSize).toString() + "px";
                            for (var y = 1, thisRow = 1; y < rowCount + gutterCount2; y += 2, thisRow++) {
                              var totalButtonsThisRow = void 0;
                              if (options.savedColors.length > thisRow * options.numSwatchesPerLine) {
                                totalButtonsThisRow = options.numSwatchesPerLine;
                              } else {
                                totalButtonsThisRow = options.savedColors.length - (thisRow - 1) * options.numSwatchesPerLine;
                              }
                              var buttonIterations = Math.min(Math.max(totalButtonsThisRow, 0), options.numSwatchesPerLine);
                              for (var x = 0, w = 1; x < buttonIterations; x++) {
                                if (x > options.numSwatchesPerLine) {
                                  continue;
                                }
                                var swatch = createSwatch();
                                if (swatch != null) {
                                  swatchDrawer.addControl(swatch, y, w);
                                  w += 2;
                                  swatchNumber++;
                                } else {
                                  continue;
                                }
                              }
                            }
                            if (options.savedColors.length >= options.swatchLimit) {
                              disableButton(button, true);
                            } else {
                              disableButton(button, false);
                            }
                          }
                        }
                        function setEditButtonVisibility(enableButton) {
                          if (enableButton) {
                            butEdit = _button__WEBPACK_IMPORTED_MODULE_5__.Button.CreateSimpleButton("butEdit", "Edit");
                            butEdit.width = buttonWidth;
                            butEdit.height = buttonHeight;
                            butEdit.left = Math.floor(parseInt(buttonWidth) * 0.1).toString() + "px";
                            butEdit.top = (parseFloat(butEdit.left) * -1).toString() + "px";
                            butEdit.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_BOTTOM;
                            butEdit.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                            butEdit.thickness = 2;
                            butEdit.color = buttonColor;
                            butEdit.fontSize = buttonFontSize;
                            butEdit.background = buttonBackgroundColor;
                            butEdit.onPointerEnterObservable.add(function() {
                              butEdit.background = buttonBackgroundHoverColor;
                            });
                            butEdit.onPointerOutObservable.add(function() {
                              butEdit.background = buttonBackgroundColor;
                            });
                            butEdit.pointerDownAnimation = function() {
                              butEdit.background = buttonBackgroundClickColor;
                            };
                            butEdit.pointerUpAnimation = function() {
                              butEdit.background = buttonBackgroundHoverColor;
                            };
                            butEdit.onPointerClickObservable.add(function() {
                              if (editSwatchMode) {
                                editSwatchMode = false;
                              } else {
                                editSwatchMode = true;
                              }
                              editSwatches();
                            });
                            pickerGrid.addControl(butEdit, 1, 0);
                          } else {
                            pickerGrid.removeControl(butEdit);
                          }
                        }
                        function disableButton(button, disabled) {
                          if (disabled) {
                            button.color = buttonDisabledColor;
                            button.background = buttonDisabledBackgroundColor;
                          } else {
                            button.color = buttonColor;
                            button.background = buttonBackgroundColor;
                          }
                        }
                        function closePicker(color) {
                          if (options.savedColors && options.savedColors.length > 0) {
                            resolve({
                              savedColors: options.savedColors,
                              pickedColor: color
                            });
                          } else {
                            resolve({
                              pickedColor: color
                            });
                          }
                          advancedTexture.removeControl(dialogContainer);
                        }
                      });
                    };
                    ColorPicker2._Epsilon = 1e-6;
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], ColorPicker2.prototype, "value", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], ColorPicker2.prototype, "width", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], ColorPicker2.prototype, "height", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], ColorPicker2.prototype, "size", null);
                    return ColorPicker2;
                  }(_control__WEBPACK_IMPORTED_MODULE_2__.Control)
                );
                (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.ColorPicker", ColorPicker);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/container.js": (
              /*!******************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/container.js ***!
                \******************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "Container": () => (
                    /* binding */
                    Container
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Misc/tools */
                  "core/Misc/perfCounter"
                );
                var core_Misc_logger__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_logger__WEBPACK_IMPORTED_MODULE_1__);
                var _control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./control */
                  "../../../lts/gui/dist/2D/controls/control.js"
                );
                var _measure__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ../measure */
                  "../../../lts/gui/dist/2D/measure.js"
                );
                var _math2D__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
                  /*! ../math2D */
                  "../../../lts/gui/dist/2D/math2D.js"
                );
                var Container = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Container2, _super);
                    function Container2(name) {
                      var _this = _super.call(this, name) || this;
                      _this.name = name;
                      _this._children = new Array();
                      _this._measureForChildren = _measure__WEBPACK_IMPORTED_MODULE_3__.Measure.Empty();
                      _this._background = "";
                      _this._backgroundGradient = null;
                      _this._adaptWidthToChildren = false;
                      _this._adaptHeightToChildren = false;
                      _this._renderToIntermediateTexture = false;
                      _this._intermediateTexture = null;
                      _this.logLayoutCycleErrors = false;
                      _this.maxLayoutCycle = 3;
                      _this.onControlAddedObservable = new core_Misc_logger__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this.onControlRemovedObservable = new core_Misc_logger__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this._inverseTransformMatrix = _math2D__WEBPACK_IMPORTED_MODULE_4__.Matrix2D.Identity();
                      _this._inverseMeasure = new _measure__WEBPACK_IMPORTED_MODULE_3__.Measure(0, 0, 0, 0);
                      return _this;
                    }
                    Object.defineProperty(Container2.prototype, "renderToIntermediateTexture", {
                      /** Gets or sets boolean indicating if children should be rendered to an intermediate texture rather than directly to host, useful for alpha blending */
                      get: function() {
                        return this._renderToIntermediateTexture;
                      },
                      set: function(value) {
                        if (this._renderToIntermediateTexture === value) {
                          return;
                        }
                        this._renderToIntermediateTexture = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Container2.prototype, "adaptHeightToChildren", {
                      /** Gets or sets a boolean indicating if the container should try to adapt to its children height */
                      get: function() {
                        return this._adaptHeightToChildren;
                      },
                      set: function(value) {
                        if (this._adaptHeightToChildren === value) {
                          return;
                        }
                        this._adaptHeightToChildren = value;
                        if (value) {
                          this.height = "100%";
                        }
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Container2.prototype, "adaptWidthToChildren", {
                      /** Gets or sets a boolean indicating if the container should try to adapt to its children width */
                      get: function() {
                        return this._adaptWidthToChildren;
                      },
                      set: function(value) {
                        if (this._adaptWidthToChildren === value) {
                          return;
                        }
                        this._adaptWidthToChildren = value;
                        if (value) {
                          this.width = "100%";
                        }
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Container2.prototype, "background", {
                      /** Gets or sets background color */
                      get: function() {
                        return this._background;
                      },
                      set: function(value) {
                        if (this._background === value) {
                          return;
                        }
                        this._background = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Container2.prototype, "backgroundGradient", {
                      /** Gets or sets background gradient color. Takes precedence over background */
                      get: function() {
                        return this._backgroundGradient;
                      },
                      set: function(value) {
                        if (this._backgroundGradient === value) {
                          return;
                        }
                        this._backgroundGradient = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Container2.prototype, "children", {
                      /** Gets the list of children */
                      get: function() {
                        return this._children;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Container2.prototype, "isReadOnly", {
                      get: function() {
                        return this._isReadOnly;
                      },
                      set: function(value) {
                        this._isReadOnly = value;
                        for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
                          var child = _a[_i];
                          child.isReadOnly = value;
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Container2.prototype._getTypeName = function() {
                      return "Container";
                    };
                    Container2.prototype._flagDescendantsAsMatrixDirty = function() {
                      for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
                        var child = _a[_i];
                        child._isClipped = false;
                        child._markMatrixAsDirty();
                      }
                    };
                    Container2.prototype.getChildByName = function(name) {
                      for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
                        var child = _a[_i];
                        if (child.name === name) {
                          return child;
                        }
                      }
                      return null;
                    };
                    Container2.prototype.getChildByType = function(name, type) {
                      for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
                        var child = _a[_i];
                        if (child.typeName === type) {
                          return child;
                        }
                      }
                      return null;
                    };
                    Container2.prototype.containsControl = function(control) {
                      return this.children.indexOf(control) !== -1;
                    };
                    Container2.prototype.addControl = function(control) {
                      if (!control) {
                        return this;
                      }
                      var index = this._children.indexOf(control);
                      if (index !== -1) {
                        return this;
                      }
                      control._link(this._host);
                      control._markAllAsDirty();
                      this._reOrderControl(control);
                      this._markAsDirty();
                      this.onControlAddedObservable.notifyObservers(control);
                      return this;
                    };
                    Container2.prototype.clearControls = function() {
                      var children = this.children.slice();
                      for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {
                        var child = children_1[_i];
                        this.removeControl(child);
                      }
                      return this;
                    };
                    Container2.prototype.removeControl = function(control) {
                      var index = this._children.indexOf(control);
                      if (index !== -1) {
                        this._children.splice(index, 1);
                        control.parent = null;
                      }
                      control.linkWithMesh(null);
                      if (this._host) {
                        this._host._cleanControlAfterRemoval(control);
                      }
                      this._markAsDirty();
                      this.onControlRemovedObservable.notifyObservers(control);
                      return this;
                    };
                    Container2.prototype._reOrderControl = function(control) {
                      var linkedMesh = control.linkedMesh;
                      this.removeControl(control);
                      var wasAdded = false;
                      for (var index = 0; index < this._children.length; index++) {
                        if (this._children[index].zIndex > control.zIndex) {
                          this._children.splice(index, 0, control);
                          wasAdded = true;
                          break;
                        }
                      }
                      if (!wasAdded) {
                        this._children.push(control);
                      }
                      control.parent = this;
                      if (linkedMesh) {
                        control.linkWithMesh(linkedMesh);
                      }
                      this._markAsDirty();
                    };
                    Container2.prototype._offsetLeft = function(offset) {
                      _super.prototype._offsetLeft.call(this, offset);
                      for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
                        var child = _a[_i];
                        child._offsetLeft(offset);
                      }
                    };
                    Container2.prototype._offsetTop = function(offset) {
                      _super.prototype._offsetTop.call(this, offset);
                      for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
                        var child = _a[_i];
                        child._offsetTop(offset);
                      }
                    };
                    Container2.prototype._markAllAsDirty = function() {
                      _super.prototype._markAllAsDirty.call(this);
                      for (var index = 0; index < this._children.length; index++) {
                        this._children[index]._markAllAsDirty();
                      }
                    };
                    Container2.prototype._getBackgroundColor = function(context) {
                      return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;
                    };
                    Container2.prototype._localDraw = function(context) {
                      if (this._background || this._backgroundGradient) {
                        context.save();
                        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                          context.shadowColor = this.shadowColor;
                          context.shadowBlur = this.shadowBlur;
                          context.shadowOffsetX = this.shadowOffsetX;
                          context.shadowOffsetY = this.shadowOffsetY;
                        }
                        context.fillStyle = this._getBackgroundColor(context);
                        context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
                        context.restore();
                      }
                    };
                    Container2.prototype._link = function(host) {
                      _super.prototype._link.call(this, host);
                      for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
                        var child = _a[_i];
                        child._link(host);
                      }
                    };
                    Container2.prototype._beforeLayout = function() {
                    };
                    Container2.prototype._processMeasures = function(parentMeasure, context) {
                      if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {
                        _super.prototype._processMeasures.call(this, parentMeasure, context);
                        this._evaluateClippingState(parentMeasure);
                        if (this._renderToIntermediateTexture) {
                          if (this._intermediateTexture && this._host.getScene() != this._intermediateTexture.getScene()) {
                            this._intermediateTexture.dispose();
                            this._intermediateTexture = null;
                          }
                          if (!this._intermediateTexture) {
                            this._intermediateTexture = new core_Misc_logger__WEBPACK_IMPORTED_MODULE_1__.DynamicTexture("", { width: this._currentMeasure.width, height: this._currentMeasure.height }, this._host.getScene(), false, core_Misc_logger__WEBPACK_IMPORTED_MODULE_1__.Texture.NEAREST_SAMPLINGMODE, core_Misc_logger__WEBPACK_IMPORTED_MODULE_1__.Constants.TEXTUREFORMAT_RGBA, false);
                            this._intermediateTexture.hasAlpha = true;
                          } else {
                            this._intermediateTexture.scaleTo(this._currentMeasure.width, this._currentMeasure.height);
                          }
                        }
                      }
                    };
                    Container2.prototype._layout = function(parentMeasure, context) {
                      var _a, _b;
                      if (!this.isDirty && (!this.isVisible || this.notRenderable)) {
                        return false;
                      }
                      this.host._numLayoutCalls++;
                      if (this._isDirty) {
                        this._currentMeasure.transformToRef(this._transformMatrix, this._prevCurrentMeasureTransformedIntoGlobalSpace);
                      }
                      var rebuildCount = 0;
                      context.save();
                      this._applyStates(context);
                      this._beforeLayout();
                      do {
                        var computedWidth = -1;
                        var computedHeight = -1;
                        this._rebuildLayout = false;
                        this._processMeasures(parentMeasure, context);
                        if (!this._isClipped) {
                          for (var _i = 0, _c = this._children; _i < _c.length; _i++) {
                            var child = _c[_i];
                            child._tempParentMeasure.copyFrom(this._measureForChildren);
                            if (child._layout(this._measureForChildren, context)) {
                              if (child.isVisible && !child.notRenderable) {
                                if (this.adaptWidthToChildren && child._width.isPixel) {
                                  computedWidth = Math.max(computedWidth, child._currentMeasure.width + child._paddingLeftInPixels + child._paddingRightInPixels);
                                }
                                if (this.adaptHeightToChildren && child._height.isPixel) {
                                  computedHeight = Math.max(computedHeight, child._currentMeasure.height + child._paddingTopInPixels + child._paddingBottomInPixels);
                                }
                              }
                            }
                          }
                          if (this.adaptWidthToChildren && computedWidth >= 0) {
                            computedWidth += this.paddingLeftInPixels + this.paddingRightInPixels;
                            if (this.width !== computedWidth + "px") {
                              (_a = this.parent) === null || _a === void 0 ? void 0 : _a._markAsDirty();
                              this.width = computedWidth + "px";
                              this._width.ignoreAdaptiveScaling = true;
                              this._rebuildLayout = true;
                            }
                          }
                          if (this.adaptHeightToChildren && computedHeight >= 0) {
                            computedHeight += this.paddingTopInPixels + this.paddingBottomInPixels;
                            if (this.height !== computedHeight + "px") {
                              (_b = this.parent) === null || _b === void 0 ? void 0 : _b._markAsDirty();
                              this.height = computedHeight + "px";
                              this._height.ignoreAdaptiveScaling = true;
                              this._rebuildLayout = true;
                            }
                          }
                          this._postMeasure();
                        }
                        rebuildCount++;
                      } while (this._rebuildLayout && rebuildCount < this.maxLayoutCycle);
                      if (rebuildCount >= 3 && this.logLayoutCycleErrors) {
                        core_Misc_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Error("Layout cycle detected in GUI (Container name=".concat(this.name, ", uniqueId=").concat(this.uniqueId, ")"));
                      }
                      context.restore();
                      if (this._isDirty) {
                        this.invalidateRect();
                        this._isDirty = false;
                      }
                      return true;
                    };
                    Container2.prototype._postMeasure = function() {
                    };
                    Container2.prototype._draw = function(context, invalidatedRectangle) {
                      var renderToIntermediateTextureThisDraw = this._renderToIntermediateTexture && this._intermediateTexture;
                      var contextToDrawTo = renderToIntermediateTextureThisDraw ? this._intermediateTexture.getContext() : context;
                      if (renderToIntermediateTextureThisDraw) {
                        contextToDrawTo.save();
                        contextToDrawTo.translate(-this._currentMeasure.left, -this._currentMeasure.top);
                        if (invalidatedRectangle) {
                          this._transformMatrix.invertToRef(this._inverseTransformMatrix);
                          invalidatedRectangle.transformToRef(this._inverseTransformMatrix, this._inverseMeasure);
                          contextToDrawTo.clearRect(this._inverseMeasure.left, this._inverseMeasure.top, this._inverseMeasure.width, this._inverseMeasure.height);
                        } else {
                          contextToDrawTo.clearRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
                        }
                      }
                      this._localDraw(contextToDrawTo);
                      context.save();
                      if (this.clipChildren) {
                        this._clipForChildren(contextToDrawTo);
                      }
                      for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
                        var child = _a[_i];
                        if (invalidatedRectangle) {
                          if (!child._intersectsRect(invalidatedRectangle)) {
                            continue;
                          }
                        }
                        child._render(contextToDrawTo, invalidatedRectangle);
                      }
                      if (renderToIntermediateTextureThisDraw) {
                        contextToDrawTo.restore();
                        context.save();
                        context.globalAlpha = this.alpha;
                        context.drawImage(contextToDrawTo.canvas, this._currentMeasure.left, this._currentMeasure.top);
                        context.restore();
                      }
                      context.restore();
                    };
                    Container2.prototype.getDescendantsToRef = function(results, directDescendantsOnly, predicate) {
                      if (directDescendantsOnly === void 0) {
                        directDescendantsOnly = false;
                      }
                      if (!this.children) {
                        return;
                      }
                      for (var index = 0; index < this.children.length; index++) {
                        var item = this.children[index];
                        if (!predicate || predicate(item)) {
                          results.push(item);
                        }
                        if (!directDescendantsOnly) {
                          item.getDescendantsToRef(results, false, predicate);
                        }
                      }
                    };
                    Container2.prototype._processPicking = function(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY) {
                      if (!this._isEnabled || !this.isVisible || this.notRenderable) {
                        return false;
                      }
                      var contains = _super.prototype.contains.call(this, x, y);
                      if (!contains && this.clipChildren) {
                        return false;
                      }
                      for (var index = this._children.length - 1; index >= 0; index--) {
                        var child = this._children[index];
                        if (child._processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY)) {
                          if (child.hoverCursor) {
                            this._host._changeCursor(child.hoverCursor);
                          }
                          return true;
                        }
                      }
                      if (!contains) {
                        return false;
                      }
                      if (!this.isHitTestVisible) {
                        return false;
                      }
                      return this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);
                    };
                    Container2.prototype._additionalProcessing = function(parentMeasure, context) {
                      _super.prototype._additionalProcessing.call(this, parentMeasure, context);
                      this._measureForChildren.copyFrom(this._currentMeasure);
                    };
                    Container2.prototype.serialize = function(serializationObject) {
                      _super.prototype.serialize.call(this, serializationObject);
                      if (this.backgroundGradient) {
                        serializationObject.backgroundGradient = {};
                        this.backgroundGradient.serialize(serializationObject.backgroundGradient);
                      }
                      if (!this.children.length) {
                        return;
                      }
                      serializationObject.children = [];
                      for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
                        var child = _a[_i];
                        var childSerializationObject = {};
                        child.serialize(childSerializationObject);
                        serializationObject.children.push(childSerializationObject);
                      }
                    };
                    Container2.prototype.dispose = function() {
                      var _a;
                      _super.prototype.dispose.call(this);
                      for (var index = this.children.length - 1; index >= 0; index--) {
                        this.children[index].dispose();
                      }
                      (_a = this._intermediateTexture) === null || _a === void 0 ? void 0 : _a.dispose();
                    };
                    Container2.prototype._parseFromContent = function(serializedObject, host) {
                      var _a;
                      _super.prototype._parseFromContent.call(this, serializedObject, host);
                      this._link(host);
                      if (serializedObject.backgroundGradient) {
                        var className = core_Misc_logger__WEBPACK_IMPORTED_MODULE_1__.Tools.Instantiate("BABYLON.GUI." + serializedObject.backgroundGradient.className);
                        this._backgroundGradient = new className();
                        (_a = this._backgroundGradient) === null || _a === void 0 ? void 0 : _a.parse(serializedObject.backgroundGradient);
                      }
                      if (!serializedObject.children) {
                        return;
                      }
                      for (var _i = 0, _b = serializedObject.children; _i < _b.length; _i++) {
                        var childData = _b[_i];
                        this.addControl(_control__WEBPACK_IMPORTED_MODULE_2__.Control.Parse(childData, host));
                      }
                    };
                    Container2.prototype.isReady = function() {
                      for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
                        var child = _a[_i];
                        if (!child.isReady()) {
                          return false;
                        }
                      }
                      return true;
                    };
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_logger__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Container2.prototype, "renderToIntermediateTexture", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_logger__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Container2.prototype, "maxLayoutCycle", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_logger__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Container2.prototype, "adaptHeightToChildren", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_logger__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Container2.prototype, "adaptWidthToChildren", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_logger__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Container2.prototype, "background", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_logger__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Container2.prototype, "backgroundGradient", null);
                    return Container2;
                  }(_control__WEBPACK_IMPORTED_MODULE_2__.Control)
                );
                (0, core_Misc_logger__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.Container", Container);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/control.js": (
              /*!****************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/control.js ***!
                \****************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "Control": () => (
                    /* binding */
                    Control
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Engines/engineStore */
                  "core/Misc/perfCounter"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__);
                var _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ../valueAndUnit */
                  "../../../lts/gui/dist/2D/valueAndUnit.js"
                );
                var _measure__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ../measure */
                  "../../../lts/gui/dist/2D/measure.js"
                );
                var _math2D__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
                  /*! ../math2D */
                  "../../../lts/gui/dist/2D/math2D.js"
                );
                var Control = (
                  /** @class */
                  function() {
                    function Control2(name) {
                      this.name = name;
                      this._alpha = 1;
                      this._alphaSet = false;
                      this._zIndex = 0;
                      this._currentMeasure = _measure__WEBPACK_IMPORTED_MODULE_3__.Measure.Empty();
                      this._tempPaddingMeasure = _measure__WEBPACK_IMPORTED_MODULE_3__.Measure.Empty();
                      this._fontFamily = "Arial";
                      this._fontStyle = "";
                      this._fontWeight = "";
                      this._fontSize = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit(18, _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit.UNITMODE_PIXEL, false);
                      this._width = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit(1, _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit.UNITMODE_PERCENTAGE, false);
                      this._height = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit(1, _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit.UNITMODE_PERCENTAGE, false);
                      this._color = "";
                      this._style = null;
                      this._horizontalAlignment = Control2.HORIZONTAL_ALIGNMENT_CENTER;
                      this._verticalAlignment = Control2.VERTICAL_ALIGNMENT_CENTER;
                      this._isDirty = true;
                      this._wasDirty = false;
                      this._tempParentMeasure = _measure__WEBPACK_IMPORTED_MODULE_3__.Measure.Empty();
                      this._prevCurrentMeasureTransformedIntoGlobalSpace = _measure__WEBPACK_IMPORTED_MODULE_3__.Measure.Empty();
                      this._cachedParentMeasure = _measure__WEBPACK_IMPORTED_MODULE_3__.Measure.Empty();
                      this._descendantsOnlyPadding = false;
                      this._paddingLeft = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit(0);
                      this._paddingRight = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit(0);
                      this._paddingTop = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit(0);
                      this._paddingBottom = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit(0);
                      this._left = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit(0);
                      this._top = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit(0);
                      this._scaleX = 1;
                      this._scaleY = 1;
                      this._rotation = 0;
                      this._transformCenterX = 0.5;
                      this._transformCenterY = 0.5;
                      this._transformMatrix = _math2D__WEBPACK_IMPORTED_MODULE_4__.Matrix2D.Identity();
                      this._invertTransformMatrix = _math2D__WEBPACK_IMPORTED_MODULE_4__.Matrix2D.Identity();
                      this._transformedPosition = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Vector2.Zero();
                      this._isMatrixDirty = true;
                      this._isVisible = true;
                      this._isHighlighted = false;
                      this._highlightColor = "#4affff";
                      this._highlightLineWidth = 2;
                      this._fontSet = false;
                      this._dummyVector2 = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Vector2.Zero();
                      this._downCount = 0;
                      this._enterCount = -1;
                      this._doNotRender = false;
                      this._downPointerIds = {};
                      this._evaluatedMeasure = new _measure__WEBPACK_IMPORTED_MODULE_3__.Measure(0, 0, 0, 0);
                      this._evaluatedParentMeasure = new _measure__WEBPACK_IMPORTED_MODULE_3__.Measure(0, 0, 0, 0);
                      this._isEnabled = true;
                      this._disabledColor = "#9a9a9a";
                      this._disabledColorItem = "#6a6a6a";
                      this._isReadOnly = false;
                      this._gradient = null;
                      this._rebuildLayout = false;
                      this._customData = {};
                      this._isClipped = false;
                      this._automaticSize = false;
                      this.metadata = null;
                      this.isHitTestVisible = true;
                      this.isPointerBlocker = false;
                      this.isFocusInvisible = false;
                      this._clipChildren = true;
                      this._clipContent = true;
                      this.useBitmapCache = false;
                      this._shadowOffsetX = 0;
                      this._shadowOffsetY = 0;
                      this._shadowBlur = 0;
                      this._previousShadowBlur = 0;
                      this._shadowColor = "black";
                      this.hoverCursor = "";
                      this._linkOffsetX = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit(0);
                      this._linkOffsetY = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit(0);
                      this._accessibilityTag = null;
                      this.onAccessibilityTagChangedObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      this.onWheelObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      this.onPointerMoveObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      this.onPointerOutObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      this.onPointerDownObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      this.onPointerUpObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      this.onPointerClickObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      this.onPointerEnterObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      this.onDirtyObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      this.onBeforeDrawObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      this.onAfterDrawObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      this.onDisposeObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      this.onIsVisibleChangedObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      this.fixedRatio = 0;
                      this._fixedRatioMasterIsWidth = true;
                      this.animations = null;
                      this._tmpMeasureA = new _measure__WEBPACK_IMPORTED_MODULE_3__.Measure(0, 0, 0, 0);
                    }
                    Object.defineProperty(Control2.prototype, "isReadOnly", {
                      /**
                       * Gets or sets a boolean indicating if the control is readonly (default: false).
                       * A readonly control will still raise pointer events but will not react to them
                       */
                      get: function() {
                        return this._isReadOnly;
                      },
                      set: function(value) {
                        this._isReadOnly = value;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "transformedMeasure", {
                      /**
                       * Gets the transformed measure, that is the bounding box of the control after applying all transformations
                       */
                      get: function() {
                        return this._evaluatedMeasure;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "clipChildren", {
                      get: function() {
                        return this._clipChildren;
                      },
                      /**
                       * Sets/Gets a boolean indicating if the children are clipped to the current control bounds.
                       * Please note that not clipping children may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children
                       */
                      set: function(value) {
                        this._clipChildren = value;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "clipContent", {
                      get: function() {
                        return this._clipContent;
                      },
                      /**
                       * Sets/Gets a boolean indicating that control content must be clipped
                       * Please note that not clipping content may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children
                       */
                      set: function(value) {
                        this._clipContent = value;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "shadowOffsetX", {
                      /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */
                      get: function() {
                        return this._shadowOffsetX;
                      },
                      set: function(value) {
                        if (this._shadowOffsetX === value) {
                          return;
                        }
                        this._shadowOffsetX = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "shadowOffsetY", {
                      /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */
                      get: function() {
                        return this._shadowOffsetY;
                      },
                      set: function(value) {
                        if (this._shadowOffsetY === value) {
                          return;
                        }
                        this._shadowOffsetY = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "shadowBlur", {
                      /** Gets or sets a value indicating the amount of blur to use to render the shadow */
                      get: function() {
                        return this._shadowBlur;
                      },
                      set: function(value) {
                        if (this._shadowBlur === value) {
                          return;
                        }
                        this._previousShadowBlur = this._shadowBlur;
                        this._shadowBlur = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "shadowColor", {
                      /** Gets or sets a value indicating the color of the shadow (black by default ie. "#000") */
                      get: function() {
                        return this._shadowColor;
                      },
                      set: function(value) {
                        if (this._shadowColor === value) {
                          return;
                        }
                        this._shadowColor = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "typeName", {
                      // Properties
                      /** Gets the control type name */
                      get: function() {
                        return this._getTypeName();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Control2.prototype.getClassName = function() {
                      return this._getTypeName();
                    };
                    Object.defineProperty(Control2.prototype, "accessibilityTag", {
                      get: function() {
                        return this._accessibilityTag;
                      },
                      /**
                       * Gets or sets the accessibility tag to describe the control for accessibility purpose.
                       * By default, GUI controls already indicate accessibility info, but one can override the info using this tag.
                       */
                      set: function(value) {
                        this._accessibilityTag = value;
                        this.onAccessibilityTagChangedObservable.notifyObservers(value);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "host", {
                      /**
                       * Get the hosting AdvancedDynamicTexture
                       */
                      get: function() {
                        return this._host;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "fontOffset", {
                      /** Gets or set information about font offsets (used to render and align text) */
                      get: function() {
                        return this._fontOffset;
                      },
                      set: function(offset) {
                        this._fontOffset = offset;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "alpha", {
                      /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */
                      get: function() {
                        return this._alpha;
                      },
                      set: function(value) {
                        if (this._alpha === value) {
                          return;
                        }
                        this._alphaSet = true;
                        this._alpha = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "highlightLineWidth", {
                      /**
                       * Gets or sets a number indicating size of stroke we want to highlight the control with (mostly for debugging purpose)
                       */
                      get: function() {
                        return this._highlightLineWidth;
                      },
                      set: function(value) {
                        if (this._highlightLineWidth === value) {
                          return;
                        }
                        this._highlightLineWidth = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "isHighlighted", {
                      /**
                       * Gets or sets a boolean indicating that we want to highlight the control (mostly for debugging purpose)
                       */
                      get: function() {
                        return this._isHighlighted;
                      },
                      set: function(value) {
                        if (this._isHighlighted === value) {
                          return;
                        }
                        this._isHighlighted = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "highlightColor", {
                      /**
                       * Gets or sets a string defining the color to use for highlighting this control
                       */
                      get: function() {
                        return this._highlightColor;
                      },
                      set: function(value) {
                        if (this._highlightColor === value) {
                          return;
                        }
                        this._highlightColor = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "scaleX", {
                      /** Gets or sets a value indicating the scale factor on X axis (1 by default)
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling
                       */
                      get: function() {
                        return this._scaleX;
                      },
                      set: function(value) {
                        if (this._scaleX === value) {
                          return;
                        }
                        this._scaleX = value;
                        this._markAsDirty();
                        this._markMatrixAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "scaleY", {
                      /** Gets or sets a value indicating the scale factor on Y axis (1 by default)
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling
                       */
                      get: function() {
                        return this._scaleY;
                      },
                      set: function(value) {
                        if (this._scaleY === value) {
                          return;
                        }
                        this._scaleY = value;
                        this._markAsDirty();
                        this._markMatrixAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "rotation", {
                      /** Gets or sets the rotation angle (0 by default)
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling
                       */
                      get: function() {
                        return this._rotation;
                      },
                      set: function(value) {
                        if (this._rotation === value) {
                          return;
                        }
                        this._rotation = value;
                        this._markAsDirty();
                        this._markMatrixAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "transformCenterY", {
                      /** Gets or sets the transformation center on Y axis (0 by default)
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling
                       */
                      get: function() {
                        return this._transformCenterY;
                      },
                      set: function(value) {
                        if (this._transformCenterY === value) {
                          return;
                        }
                        this._transformCenterY = value;
                        this._markAsDirty();
                        this._markMatrixAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "transformCenterX", {
                      /** Gets or sets the transformation center on X axis (0 by default)
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling
                       */
                      get: function() {
                        return this._transformCenterX;
                      },
                      set: function(value) {
                        if (this._transformCenterX === value) {
                          return;
                        }
                        this._transformCenterX = value;
                        this._markAsDirty();
                        this._markMatrixAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "horizontalAlignment", {
                      /**
                       * Gets or sets the horizontal alignment
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#alignments
                       */
                      get: function() {
                        return this._horizontalAlignment;
                      },
                      set: function(value) {
                        if (this._horizontalAlignment === value) {
                          return;
                        }
                        this._horizontalAlignment = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "verticalAlignment", {
                      /**
                       * Gets or sets the vertical alignment
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#alignments
                       */
                      get: function() {
                        return this._verticalAlignment;
                      },
                      set: function(value) {
                        if (this._verticalAlignment === value) {
                          return;
                        }
                        this._verticalAlignment = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "width", {
                      /**
                       * Gets or sets control width
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
                       */
                      get: function() {
                        return this._width.toString(this._host);
                      },
                      set: function(value) {
                        this._fixedRatioMasterIsWidth = true;
                        if (this._width.toString(this._host) === value) {
                          return;
                        }
                        if (this._width.fromString(value)) {
                          this._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "widthInPixels", {
                      /**
                       * Gets or sets the control width in pixel
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
                       */
                      get: function() {
                        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);
                      },
                      set: function(value) {
                        if (isNaN(value)) {
                          return;
                        }
                        this._fixedRatioMasterIsWidth = true;
                        this.width = value + "px";
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "height", {
                      /**
                       * Gets or sets control height
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
                       */
                      get: function() {
                        return this._height.toString(this._host);
                      },
                      set: function(value) {
                        this._fixedRatioMasterIsWidth = false;
                        if (this._height.toString(this._host) === value) {
                          return;
                        }
                        if (this._height.fromString(value)) {
                          this._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "heightInPixels", {
                      /**
                       * Gets or sets control height in pixel
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
                       */
                      get: function() {
                        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);
                      },
                      set: function(value) {
                        if (isNaN(value)) {
                          return;
                        }
                        this._fixedRatioMasterIsWidth = false;
                        this.height = value + "px";
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "fontFamily", {
                      /** Gets or set font family */
                      get: function() {
                        return this._fontFamily;
                      },
                      set: function(value) {
                        if (this._fontFamily === value) {
                          return;
                        }
                        this._fontFamily = value;
                        this._resetFontCache();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "fontStyle", {
                      /** Gets or sets font style */
                      get: function() {
                        return this._fontStyle;
                      },
                      set: function(value) {
                        if (this._fontStyle === value) {
                          return;
                        }
                        this._fontStyle = value;
                        this._resetFontCache();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "fontWeight", {
                      /** Gets or sets font weight */
                      get: function() {
                        return this._fontWeight;
                      },
                      set: function(value) {
                        if (this._fontWeight === value) {
                          return;
                        }
                        this._fontWeight = value;
                        this._resetFontCache();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "style", {
                      /**
                       * Gets or sets style
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#styles
                       */
                      get: function() {
                        return this._style;
                      },
                      set: function(value) {
                        var _this = this;
                        if (this._style) {
                          this._style.onChangedObservable.remove(this._styleObserver);
                          this._styleObserver = null;
                        }
                        this._style = value;
                        if (this._style) {
                          this._styleObserver = this._style.onChangedObservable.add(function() {
                            _this._markAsDirty();
                            _this._resetFontCache();
                          });
                        }
                        this._markAsDirty();
                        this._resetFontCache();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "_isFontSizeInPercentage", {
                      /** @internal */
                      get: function() {
                        return this._fontSize.isPercentage;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "fontSizeInPixels", {
                      /** Gets or sets font size in pixels */
                      get: function() {
                        var fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;
                        if (fontSizeToUse.isPixel) {
                          return fontSizeToUse.getValue(this._host);
                        }
                        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);
                      },
                      set: function(value) {
                        if (isNaN(value)) {
                          return;
                        }
                        this.fontSize = value + "px";
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "fontSize", {
                      /** Gets or sets font size */
                      get: function() {
                        return this._fontSize.toString(this._host);
                      },
                      set: function(value) {
                        if (this._fontSize.toString(this._host) === value) {
                          return;
                        }
                        if (this._fontSize.fromString(value)) {
                          this._markAsDirty();
                          this._resetFontCache();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "color", {
                      /** Gets or sets foreground color */
                      get: function() {
                        return this._color;
                      },
                      set: function(value) {
                        if (this._color === value) {
                          return;
                        }
                        this._color = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "gradient", {
                      /** Gets or sets gradient. Setting a gradient will override the color */
                      get: function() {
                        return this._gradient;
                      },
                      set: function(value) {
                        if (this._gradient === value) {
                          return;
                        }
                        this._gradient = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "zIndex", {
                      /** Gets or sets z index which is used to reorder controls on the z axis */
                      get: function() {
                        return this._zIndex;
                      },
                      set: function(value) {
                        if (this.zIndex === value) {
                          return;
                        }
                        this._zIndex = value;
                        if (this.parent) {
                          this.parent._reOrderControl(this);
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "notRenderable", {
                      /** Gets or sets a boolean indicating if the control can be rendered */
                      get: function() {
                        return this._doNotRender;
                      },
                      set: function(value) {
                        if (this._doNotRender === value) {
                          return;
                        }
                        this._doNotRender = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "isVisible", {
                      /** Gets or sets a boolean indicating if the control is visible */
                      get: function() {
                        return this._isVisible;
                      },
                      set: function(value) {
                        if (this._isVisible === value) {
                          return;
                        }
                        this._isVisible = value;
                        this._markAsDirty(true);
                        this.onIsVisibleChangedObservable.notifyObservers(value);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "isDirty", {
                      /** Gets a boolean indicating that the control needs to update its rendering */
                      get: function() {
                        return this._isDirty;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "linkedMesh", {
                      /**
                       * Gets the current linked mesh (or null if none)
                       */
                      get: function() {
                        return this._linkedMesh;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "descendantsOnlyPadding", {
                      /**
                       * Gets or sets a value indicating the padding should work like in CSS.
                       * Basically, it will add the padding amount on each side of the parent control for its children.
                       */
                      get: function() {
                        return this._descendantsOnlyPadding;
                      },
                      set: function(value) {
                        if (this._descendantsOnlyPadding === value) {
                          return;
                        }
                        this._descendantsOnlyPadding = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "paddingLeft", {
                      /**
                       * Gets or sets a value indicating the padding to use on the left of the control
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
                       */
                      get: function() {
                        return this._paddingLeft.toString(this._host);
                      },
                      set: function(value) {
                        if (this._paddingLeft.fromString(value)) {
                          this._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "paddingLeftInPixels", {
                      /**
                       * Gets or sets a value indicating the padding in pixels to use on the left of the control
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
                       */
                      get: function() {
                        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);
                      },
                      set: function(value) {
                        if (isNaN(value)) {
                          return;
                        }
                        this.paddingLeft = value + "px";
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "_paddingLeftInPixels", {
                      /** @internal */
                      get: function() {
                        if (this._descendantsOnlyPadding) {
                          return 0;
                        }
                        return this.paddingLeftInPixels;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "paddingRight", {
                      /**
                       * Gets or sets a value indicating the padding to use on the right of the control
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
                       */
                      get: function() {
                        return this._paddingRight.toString(this._host);
                      },
                      set: function(value) {
                        if (this._paddingRight.fromString(value)) {
                          this._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "paddingRightInPixels", {
                      /**
                       * Gets or sets a value indicating the padding in pixels to use on the right of the control
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
                       */
                      get: function() {
                        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);
                      },
                      set: function(value) {
                        if (isNaN(value)) {
                          return;
                        }
                        this.paddingRight = value + "px";
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "_paddingRightInPixels", {
                      /** @internal */
                      get: function() {
                        if (this._descendantsOnlyPadding) {
                          return 0;
                        }
                        return this.paddingRightInPixels;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "paddingTop", {
                      /**
                       * Gets or sets a value indicating the padding to use on the top of the control
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
                       */
                      get: function() {
                        return this._paddingTop.toString(this._host);
                      },
                      set: function(value) {
                        if (this._paddingTop.fromString(value)) {
                          this._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "paddingTopInPixels", {
                      /**
                       * Gets or sets a value indicating the padding in pixels to use on the top of the control
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
                       */
                      get: function() {
                        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);
                      },
                      set: function(value) {
                        if (isNaN(value)) {
                          return;
                        }
                        this.paddingTop = value + "px";
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "_paddingTopInPixels", {
                      /** @internal */
                      get: function() {
                        if (this._descendantsOnlyPadding) {
                          return 0;
                        }
                        return this.paddingTopInPixels;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "paddingBottom", {
                      /**
                       * Gets or sets a value indicating the padding to use on the bottom of the control
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
                       */
                      get: function() {
                        return this._paddingBottom.toString(this._host);
                      },
                      set: function(value) {
                        if (this._paddingBottom.fromString(value)) {
                          this._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "paddingBottomInPixels", {
                      /**
                       * Gets or sets a value indicating the padding in pixels to use on the bottom of the control
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
                       */
                      get: function() {
                        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);
                      },
                      set: function(value) {
                        if (isNaN(value)) {
                          return;
                        }
                        this.paddingBottom = value + "px";
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "_paddingBottomInPixels", {
                      /** @internal */
                      get: function() {
                        if (this._descendantsOnlyPadding) {
                          return 0;
                        }
                        return this.paddingBottomInPixels;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "left", {
                      /**
                       * Gets or sets a value indicating the left coordinate of the control
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
                       */
                      get: function() {
                        return this._left.toString(this._host);
                      },
                      set: function(value) {
                        if (this._left.fromString(value)) {
                          this._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "leftInPixels", {
                      /**
                       * Gets or sets a value indicating the left coordinate in pixels of the control
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
                       */
                      get: function() {
                        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);
                      },
                      set: function(value) {
                        if (isNaN(value)) {
                          return;
                        }
                        this.left = value + "px";
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "top", {
                      /**
                       * Gets or sets a value indicating the top coordinate of the control
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
                       */
                      get: function() {
                        return this._top.toString(this._host);
                      },
                      set: function(value) {
                        if (this._top.fromString(value)) {
                          this._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "topInPixels", {
                      /**
                       * Gets or sets a value indicating the top coordinate in pixels of the control
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
                       */
                      get: function() {
                        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);
                      },
                      set: function(value) {
                        if (isNaN(value)) {
                          return;
                        }
                        this.top = value + "px";
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "linkOffsetX", {
                      /**
                       * Gets or sets a value indicating the offset on X axis to the linked mesh
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions
                       */
                      get: function() {
                        return this._linkOffsetX.toString(this._host);
                      },
                      set: function(value) {
                        if (this._linkOffsetX.fromString(value)) {
                          this._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "linkOffsetXInPixels", {
                      /**
                       * Gets or sets a value indicating the offset in pixels on X axis to the linked mesh
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions
                       */
                      get: function() {
                        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);
                      },
                      set: function(value) {
                        if (isNaN(value)) {
                          return;
                        }
                        this.linkOffsetX = value + "px";
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "linkOffsetY", {
                      /**
                       * Gets or sets a value indicating the offset on Y axis to the linked mesh
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions
                       */
                      get: function() {
                        return this._linkOffsetY.toString(this._host);
                      },
                      set: function(value) {
                        if (this._linkOffsetY.fromString(value)) {
                          this._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "linkOffsetYInPixels", {
                      /**
                       * Gets or sets a value indicating the offset in pixels on Y axis to the linked mesh
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions
                       */
                      get: function() {
                        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);
                      },
                      set: function(value) {
                        if (isNaN(value)) {
                          return;
                        }
                        this.linkOffsetY = value + "px";
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "centerX", {
                      /** Gets the center coordinate on X axis */
                      get: function() {
                        return this._currentMeasure.left + this._currentMeasure.width / 2;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "centerY", {
                      /** Gets the center coordinate on Y axis */
                      get: function() {
                        return this._currentMeasure.top + this._currentMeasure.height / 2;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "isEnabled", {
                      /** Gets or sets if control is Enabled */
                      get: function() {
                        return this._isEnabled;
                      },
                      set: function(value) {
                        var _this = this;
                        if (this._isEnabled === value) {
                          return;
                        }
                        this._isEnabled = value;
                        this._markAsDirty();
                        var recursivelyFirePointerOut = function(control) {
                          if (!control.host) {
                            return;
                          }
                          for (var pointer in control.host._lastControlOver) {
                            if (control === _this.host._lastControlOver[pointer]) {
                              control._onPointerOut(control, null, true);
                              delete control.host._lastControlOver[pointer];
                            }
                          }
                          if (control.children !== void 0) {
                            control.children.forEach(recursivelyFirePointerOut);
                          }
                        };
                        recursivelyFirePointerOut(this);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "disabledColor", {
                      /** Gets or sets background color of control if it's disabled. Only applies to Button class. */
                      get: function() {
                        return this._disabledColor;
                      },
                      set: function(value) {
                        if (this._disabledColor === value) {
                          return;
                        }
                        this._disabledColor = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2.prototype, "disabledColorItem", {
                      /** Gets or sets front color of control if it's disabled. Only applies to Checkbox class. */
                      get: function() {
                        return this._disabledColorItem;
                      },
                      set: function(value) {
                        if (this._disabledColorItem === value) {
                          return;
                        }
                        this._disabledColorItem = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Control2.prototype._getTypeName = function() {
                      return "Control";
                    };
                    Control2.prototype.getAscendantOfClass = function(className) {
                      if (!this.parent) {
                        return null;
                      }
                      if (this.parent.getClassName() === className) {
                        return this.parent;
                      }
                      return this.parent.getAscendantOfClass(className);
                    };
                    Control2.prototype.markAsDirty = function(force) {
                      if (force === void 0) {
                        force = false;
                      }
                      this._markAsDirty(force);
                    };
                    Control2.prototype.markAllAsDirty = function() {
                      this._markAllAsDirty();
                    };
                    Control2.prototype._resetFontCache = function() {
                      this._fontSet = true;
                      this._markAsDirty();
                    };
                    Control2.prototype.isAscendant = function(container) {
                      if (!this.parent) {
                        return false;
                      }
                      if (this.parent === container) {
                        return true;
                      }
                      return this.parent.isAscendant(container);
                    };
                    Control2.prototype.getLocalCoordinates = function(globalCoordinates) {
                      var result = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Vector2.Zero();
                      this.getLocalCoordinatesToRef(globalCoordinates, result);
                      return result;
                    };
                    Control2.prototype.getLocalCoordinatesToRef = function(globalCoordinates, result) {
                      result.x = globalCoordinates.x - this._currentMeasure.left;
                      result.y = globalCoordinates.y - this._currentMeasure.top;
                      return this;
                    };
                    Control2.prototype.getParentLocalCoordinates = function(globalCoordinates) {
                      var result = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Vector2.Zero();
                      result.x = globalCoordinates.x - this._cachedParentMeasure.left;
                      result.y = globalCoordinates.y - this._cachedParentMeasure.top;
                      return result;
                    };
                    Control2.prototype.moveToVector3 = function(position, scene) {
                      if (!this._host || this.parent !== this._host._rootContainer) {
                        core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Tools.Error("Cannot move a control to a vector3 if the control is not at root level");
                        return;
                      }
                      this.horizontalAlignment = Control2.HORIZONTAL_ALIGNMENT_LEFT;
                      this.verticalAlignment = Control2.VERTICAL_ALIGNMENT_TOP;
                      var globalViewport = this._host._getGlobalViewport();
                      var projectedPosition = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Vector3.Project(position, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Matrix.IdentityReadOnly, scene.getTransformMatrix(), globalViewport);
                      this._moveToProjectedPosition(projectedPosition);
                      if (projectedPosition.z < 0 || projectedPosition.z > 1) {
                        this.notRenderable = true;
                        return;
                      }
                      this.notRenderable = false;
                    };
                    Control2.prototype.getDescendantsToRef = function(results, directDescendantsOnly, predicate) {
                      if (directDescendantsOnly === void 0) {
                        directDescendantsOnly = false;
                      }
                    };
                    Control2.prototype.getDescendants = function(directDescendantsOnly, predicate) {
                      var results = new Array();
                      this.getDescendantsToRef(results, directDescendantsOnly, predicate);
                      return results;
                    };
                    Control2.prototype.linkWithMesh = function(mesh) {
                      if (!this._host || this.parent && this.parent !== this._host._rootContainer) {
                        if (mesh) {
                          core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Tools.Error("Cannot link a control to a mesh if the control is not at root level");
                        }
                        return;
                      }
                      var index = this._host._linkedControls.indexOf(this);
                      if (index !== -1) {
                        this._linkedMesh = mesh;
                        if (!mesh) {
                          this._host._linkedControls.splice(index, 1);
                        }
                        return;
                      } else if (!mesh) {
                        return;
                      }
                      this.horizontalAlignment = Control2.HORIZONTAL_ALIGNMENT_LEFT;
                      this.verticalAlignment = Control2.VERTICAL_ALIGNMENT_TOP;
                      this._linkedMesh = mesh;
                      this._host._linkedControls.push(this);
                    };
                    Control2.prototype.setPadding = function(paddingTop, paddingRight, paddingBottom, paddingLeft) {
                      var top = paddingTop;
                      var right = paddingRight !== null && paddingRight !== void 0 ? paddingRight : top;
                      var bottom = paddingBottom !== null && paddingBottom !== void 0 ? paddingBottom : top;
                      var left = paddingLeft !== null && paddingLeft !== void 0 ? paddingLeft : right;
                      this.paddingTop = top;
                      this.paddingRight = right;
                      this.paddingBottom = bottom;
                      this.paddingLeft = left;
                    };
                    Control2.prototype.setPaddingInPixels = function(paddingTop, paddingRight, paddingBottom, paddingLeft) {
                      var top = paddingTop;
                      var right = paddingRight !== null && paddingRight !== void 0 ? paddingRight : top;
                      var bottom = paddingBottom !== null && paddingBottom !== void 0 ? paddingBottom : top;
                      var left = paddingLeft !== null && paddingLeft !== void 0 ? paddingLeft : right;
                      this.paddingTopInPixels = top;
                      this.paddingRightInPixels = right;
                      this.paddingBottomInPixels = bottom;
                      this.paddingLeftInPixels = left;
                    };
                    Control2.prototype._moveToProjectedPosition = function(projectedPosition) {
                      var _a;
                      var oldLeft = this._left.getValue(this._host);
                      var oldTop = this._top.getValue(this._host);
                      var parentMeasure = (_a = this.parent) === null || _a === void 0 ? void 0 : _a._currentMeasure;
                      if (parentMeasure) {
                        this._processMeasures(parentMeasure, this._host.getContext());
                      }
                      var newLeft = projectedPosition.x + this._linkOffsetX.getValue(this._host) - this._currentMeasure.width / 2;
                      var newTop = projectedPosition.y + this._linkOffsetY.getValue(this._host) - this._currentMeasure.height / 2;
                      var leftAndTopIgnoreAdaptiveScaling = this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling;
                      if (leftAndTopIgnoreAdaptiveScaling) {
                        if (Math.abs(newLeft - oldLeft) < 0.5) {
                          newLeft = oldLeft;
                        }
                        if (Math.abs(newTop - oldTop) < 0.5) {
                          newTop = oldTop;
                        }
                      }
                      if (!leftAndTopIgnoreAdaptiveScaling && oldLeft === newLeft && oldTop === newTop) {
                        return;
                      }
                      this.left = newLeft + "px";
                      this.top = newTop + "px";
                      this._left.ignoreAdaptiveScaling = true;
                      this._top.ignoreAdaptiveScaling = true;
                      this._markAsDirty();
                    };
                    Control2.prototype._offsetLeft = function(offset) {
                      this._isDirty = true;
                      this._currentMeasure.left += offset;
                    };
                    Control2.prototype._offsetTop = function(offset) {
                      this._isDirty = true;
                      this._currentMeasure.top += offset;
                    };
                    Control2.prototype._markMatrixAsDirty = function() {
                      this._isMatrixDirty = true;
                      this._flagDescendantsAsMatrixDirty();
                    };
                    Control2.prototype._flagDescendantsAsMatrixDirty = function() {
                    };
                    Control2.prototype._intersectsRect = function(rect, context) {
                      this._transform(context);
                      if (this._evaluatedMeasure.left >= rect.left + rect.width) {
                        return false;
                      }
                      if (this._evaluatedMeasure.top >= rect.top + rect.height) {
                        return false;
                      }
                      if (this._evaluatedMeasure.left + this._evaluatedMeasure.width <= rect.left) {
                        return false;
                      }
                      if (this._evaluatedMeasure.top + this._evaluatedMeasure.height <= rect.top) {
                        return false;
                      }
                      return true;
                    };
                    Control2.prototype._computeAdditionnalOffsetX = function() {
                      return 0;
                    };
                    Control2.prototype._computeAdditionnalOffsetY = function() {
                      return 0;
                    };
                    Control2.prototype.invalidateRect = function() {
                      this._transform();
                      if (this.host && this.host.useInvalidateRectOptimization) {
                        this._currentMeasure.transformToRef(this._transformMatrix, this._tmpMeasureA);
                        _measure__WEBPACK_IMPORTED_MODULE_3__.Measure.CombineToRef(this._tmpMeasureA, this._prevCurrentMeasureTransformedIntoGlobalSpace, this._tmpMeasureA);
                        var shadowOffsetX = this.shadowOffsetX;
                        var shadowOffsetY = this.shadowOffsetY;
                        var shadowBlur = Math.max(this._previousShadowBlur, this.shadowBlur);
                        var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);
                        var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);
                        var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);
                        var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);
                        var offsetX = this._computeAdditionnalOffsetX();
                        var offsetY = this._computeAdditionnalOffsetY();
                        this.host.invalidateRect(Math.floor(this._tmpMeasureA.left + leftShadowOffset - offsetX), Math.floor(this._tmpMeasureA.top + topShadowOffset - offsetY), Math.ceil(this._tmpMeasureA.left + this._tmpMeasureA.width + rightShadowOffset + offsetX), Math.ceil(this._tmpMeasureA.top + this._tmpMeasureA.height + bottomShadowOffset + offsetY));
                      }
                    };
                    Control2.prototype._markAsDirty = function(force) {
                      if (force === void 0) {
                        force = false;
                      }
                      if (!this._isVisible && !force) {
                        return;
                      }
                      this._isDirty = true;
                      this._markMatrixAsDirty();
                      if (this._host) {
                        this._host.markAsDirty();
                      }
                    };
                    Control2.prototype._markAllAsDirty = function() {
                      this._markAsDirty();
                      if (this._font) {
                        this._prepareFont();
                      }
                    };
                    Control2.prototype._link = function(host) {
                      this._host = host;
                      if (this._host) {
                        this.uniqueId = this._host.getScene().getUniqueId();
                      }
                    };
                    Control2.prototype._transform = function(context) {
                      if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {
                        return;
                      }
                      var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;
                      var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;
                      if (context) {
                        context.translate(offsetX, offsetY);
                        context.rotate(this._rotation);
                        context.scale(this._scaleX, this._scaleY);
                        context.translate(-offsetX, -offsetY);
                      }
                      if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {
                        this._cachedOffsetX = offsetX;
                        this._cachedOffsetY = offsetY;
                        this._isMatrixDirty = false;
                        this._flagDescendantsAsMatrixDirty();
                        _math2D__WEBPACK_IMPORTED_MODULE_4__.Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this.parent ? this.parent._transformMatrix : null, this._transformMatrix);
                        this._transformMatrix.invertToRef(this._invertTransformMatrix);
                        this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);
                      }
                    };
                    Control2.prototype._renderHighlight = function(context) {
                      if (!this.isHighlighted) {
                        return;
                      }
                      context.save();
                      context.strokeStyle = this._highlightColor;
                      context.lineWidth = this._highlightLineWidth;
                      this._renderHighlightSpecific(context);
                      context.restore();
                    };
                    Control2.prototype._renderHighlightSpecific = function(context) {
                      context.strokeRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
                    };
                    Control2.prototype._getColor = function(context) {
                      return this.gradient ? this.gradient.getCanvasGradient(context) : this.color;
                    };
                    Control2.prototype._applyStates = function(context) {
                      if (this._isFontSizeInPercentage) {
                        this._fontSet = true;
                      }
                      if (this._host && this._host.useSmallestIdeal && !this._font) {
                        this._fontSet = true;
                      }
                      if (this._fontSet) {
                        this._prepareFont();
                        this._fontSet = false;
                      }
                      if (this._font) {
                        context.font = this._font;
                      }
                      if (this._color || this.gradient) {
                        context.fillStyle = this._getColor(context);
                      }
                      if (Control2.AllowAlphaInheritance) {
                        context.globalAlpha *= this._alpha;
                      } else if (this._alphaSet) {
                        context.globalAlpha = this.parent && !this.parent.renderToIntermediateTexture ? this.parent.alpha * this._alpha : this._alpha;
                      }
                    };
                    Control2.prototype._layout = function(parentMeasure, context) {
                      if (!this.isDirty && (!this.isVisible || this.notRenderable)) {
                        return false;
                      }
                      if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {
                        this.host._numLayoutCalls++;
                        this._currentMeasure.addAndTransformToRef(this._transformMatrix, -this._paddingLeftInPixels | 0, -this._paddingTopInPixels | 0, this._paddingRightInPixels | 0, this._paddingBottomInPixels | 0, this._prevCurrentMeasureTransformedIntoGlobalSpace);
                        context.save();
                        this._applyStates(context);
                        var rebuildCount = 0;
                        do {
                          this._rebuildLayout = false;
                          this._processMeasures(parentMeasure, context);
                          rebuildCount++;
                        } while (this._rebuildLayout && rebuildCount < 3);
                        if (rebuildCount >= 3) {
                          core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Logger.Error("Layout cycle detected in GUI (Control name=".concat(this.name, ", uniqueId=").concat(this.uniqueId, ")"));
                        }
                        context.restore();
                        this.invalidateRect();
                        this._evaluateClippingState(parentMeasure);
                      }
                      this._wasDirty = this._isDirty;
                      this._isDirty = false;
                      return true;
                    };
                    Control2.prototype._processMeasures = function(parentMeasure, context) {
                      this._tempPaddingMeasure.copyFrom(parentMeasure);
                      if (this.parent && this.parent.descendantsOnlyPadding) {
                        this._tempPaddingMeasure.left += this.parent.paddingLeftInPixels;
                        this._tempPaddingMeasure.top += this.parent.paddingTopInPixels;
                        this._tempPaddingMeasure.width -= this.parent.paddingLeftInPixels + this.parent.paddingRightInPixels;
                        this._tempPaddingMeasure.height -= this.parent.paddingTopInPixels + this.parent.paddingBottomInPixels;
                      }
                      this._currentMeasure.copyFrom(this._tempPaddingMeasure);
                      this._preMeasure(this._tempPaddingMeasure, context);
                      this._measure();
                      this._computeAlignment(this._tempPaddingMeasure, context);
                      this._currentMeasure.left = this._currentMeasure.left | 0;
                      this._currentMeasure.top = this._currentMeasure.top | 0;
                      this._currentMeasure.width = this._currentMeasure.width | 0;
                      this._currentMeasure.height = this._currentMeasure.height | 0;
                      this._additionalProcessing(this._tempPaddingMeasure, context);
                      this._cachedParentMeasure.copyFrom(this._tempPaddingMeasure);
                      this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);
                      if (this.onDirtyObservable.hasObservers()) {
                        this.onDirtyObservable.notifyObservers(this);
                      }
                    };
                    Control2.prototype._evaluateClippingState = function(parentMeasure) {
                      this._transform();
                      this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);
                      if (this.parent && this.parent.clipChildren) {
                        parentMeasure.transformToRef(this.parent._transformMatrix, this._evaluatedParentMeasure);
                        if (this._evaluatedMeasure.left > this._evaluatedParentMeasure.left + this._evaluatedParentMeasure.width) {
                          this._isClipped = true;
                          return;
                        }
                        if (this._evaluatedMeasure.left + this._evaluatedMeasure.width < this._evaluatedParentMeasure.left) {
                          this._isClipped = true;
                          return;
                        }
                        if (this._evaluatedMeasure.top > this._evaluatedParentMeasure.top + this._evaluatedParentMeasure.height) {
                          this._isClipped = true;
                          return;
                        }
                        if (this._evaluatedMeasure.top + this._evaluatedMeasure.height < this._evaluatedParentMeasure.top) {
                          this._isClipped = true;
                          return;
                        }
                      }
                      this._isClipped = false;
                    };
                    Control2.prototype._measure = function() {
                      if (this._width.isPixel) {
                        this._currentMeasure.width = this._width.getValue(this._host);
                      } else {
                        this._currentMeasure.width *= this._width.getValue(this._host);
                      }
                      if (this._height.isPixel) {
                        this._currentMeasure.height = this._height.getValue(this._host);
                      } else {
                        this._currentMeasure.height *= this._height.getValue(this._host);
                      }
                      if (this.fixedRatio !== 0) {
                        if (this._fixedRatioMasterIsWidth) {
                          this._currentMeasure.height = this._currentMeasure.width * this.fixedRatio;
                        } else {
                          this._currentMeasure.width = this._currentMeasure.height * this.fixedRatio;
                        }
                      }
                    };
                    Control2.prototype._computeAlignment = function(parentMeasure, context) {
                      var width = this._currentMeasure.width;
                      var height = this._currentMeasure.height;
                      var parentWidth = parentMeasure.width;
                      var parentHeight = parentMeasure.height;
                      var x = 0;
                      var y = 0;
                      switch (this.horizontalAlignment) {
                        case Control2.HORIZONTAL_ALIGNMENT_LEFT:
                          x = 0;
                          break;
                        case Control2.HORIZONTAL_ALIGNMENT_RIGHT:
                          x = parentWidth - width;
                          break;
                        case Control2.HORIZONTAL_ALIGNMENT_CENTER:
                          x = (parentWidth - width) / 2;
                          break;
                      }
                      switch (this.verticalAlignment) {
                        case Control2.VERTICAL_ALIGNMENT_TOP:
                          y = 0;
                          break;
                        case Control2.VERTICAL_ALIGNMENT_BOTTOM:
                          y = parentHeight - height;
                          break;
                        case Control2.VERTICAL_ALIGNMENT_CENTER:
                          y = (parentHeight - height) / 2;
                          break;
                      }
                      if (!this.descendantsOnlyPadding) {
                        if (this._paddingLeft.isPixel) {
                          this._currentMeasure.left += this._paddingLeft.getValue(this._host);
                          this._currentMeasure.width -= this._paddingLeft.getValue(this._host);
                        } else {
                          this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);
                          this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);
                        }
                        if (this._paddingRight.isPixel) {
                          this._currentMeasure.width -= this._paddingRight.getValue(this._host);
                        } else {
                          this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);
                        }
                        if (this._paddingTop.isPixel) {
                          this._currentMeasure.top += this._paddingTop.getValue(this._host);
                          this._currentMeasure.height -= this._paddingTop.getValue(this._host);
                        } else {
                          this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);
                          this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);
                        }
                        if (this._paddingBottom.isPixel) {
                          this._currentMeasure.height -= this._paddingBottom.getValue(this._host);
                        } else {
                          this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);
                        }
                      }
                      if (this._left.isPixel) {
                        this._currentMeasure.left += this._left.getValue(this._host);
                      } else {
                        this._currentMeasure.left += parentWidth * this._left.getValue(this._host);
                      }
                      if (this._top.isPixel) {
                        this._currentMeasure.top += this._top.getValue(this._host);
                      } else {
                        this._currentMeasure.top += parentHeight * this._top.getValue(this._host);
                      }
                      this._currentMeasure.left += x;
                      this._currentMeasure.top += y;
                    };
                    Control2.prototype._preMeasure = function(parentMeasure, context) {
                    };
                    Control2.prototype._additionalProcessing = function(parentMeasure, context) {
                    };
                    Control2.prototype._clipForChildren = function(context) {
                    };
                    Control2.prototype._clip = function(context, invalidatedRectangle) {
                      context.beginPath();
                      Control2._ClipMeasure.copyFrom(this._currentMeasure);
                      if (invalidatedRectangle) {
                        invalidatedRectangle.transformToRef(this._invertTransformMatrix, this._tmpMeasureA);
                        var intersection = new _measure__WEBPACK_IMPORTED_MODULE_3__.Measure(0, 0, 0, 0);
                        intersection.left = Math.max(this._tmpMeasureA.left, this._currentMeasure.left);
                        intersection.top = Math.max(this._tmpMeasureA.top, this._currentMeasure.top);
                        intersection.width = Math.min(this._tmpMeasureA.left + this._tmpMeasureA.width, this._currentMeasure.left + this._currentMeasure.width) - intersection.left;
                        intersection.height = Math.min(this._tmpMeasureA.top + this._tmpMeasureA.height, this._currentMeasure.top + this._currentMeasure.height) - intersection.top;
                        Control2._ClipMeasure.copyFrom(intersection);
                      }
                      if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                        var shadowOffsetX = this.shadowOffsetX;
                        var shadowOffsetY = this.shadowOffsetY;
                        var shadowBlur = this.shadowBlur;
                        var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);
                        var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);
                        var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);
                        var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);
                        context.rect(Control2._ClipMeasure.left + leftShadowOffset, Control2._ClipMeasure.top + topShadowOffset, Control2._ClipMeasure.width + rightShadowOffset - leftShadowOffset, Control2._ClipMeasure.height + bottomShadowOffset - topShadowOffset);
                      } else {
                        context.rect(Control2._ClipMeasure.left, Control2._ClipMeasure.top, Control2._ClipMeasure.width, Control2._ClipMeasure.height);
                      }
                      context.clip();
                    };
                    Control2.prototype._render = function(context, invalidatedRectangle) {
                      if (!this.isVisible || this.notRenderable || this._isClipped) {
                        this._isDirty = false;
                        return false;
                      }
                      this.host._numRenderCalls++;
                      context.save();
                      this._applyStates(context);
                      this._transform(context);
                      if (this.clipContent) {
                        this._clip(context, invalidatedRectangle);
                      }
                      if (this.onBeforeDrawObservable.hasObservers()) {
                        this.onBeforeDrawObservable.notifyObservers(this);
                      }
                      if (this.useBitmapCache && !this._wasDirty && this._cacheData) {
                        context.putImageData(this._cacheData, this._currentMeasure.left, this._currentMeasure.top);
                      } else {
                        this._draw(context, invalidatedRectangle);
                      }
                      if (this.useBitmapCache && this._wasDirty) {
                        this._cacheData = context.getImageData(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
                      }
                      this._renderHighlight(context);
                      if (this.onAfterDrawObservable.hasObservers()) {
                        this.onAfterDrawObservable.notifyObservers(this);
                      }
                      context.restore();
                      return true;
                    };
                    Control2.prototype._draw = function(context, invalidatedRectangle) {
                    };
                    Control2.prototype.contains = function(x, y) {
                      this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);
                      x = this._transformedPosition.x;
                      y = this._transformedPosition.y;
                      if (x < this._currentMeasure.left) {
                        return false;
                      }
                      if (x > this._currentMeasure.left + this._currentMeasure.width) {
                        return false;
                      }
                      if (y < this._currentMeasure.top) {
                        return false;
                      }
                      if (y > this._currentMeasure.top + this._currentMeasure.height) {
                        return false;
                      }
                      if (this.isPointerBlocker) {
                        this._host._shouldBlockPointer = true;
                      }
                      return true;
                    };
                    Control2.prototype._processPicking = function(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY) {
                      if (!this._isEnabled) {
                        return false;
                      }
                      if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {
                        return false;
                      }
                      if (!this.contains(x, y)) {
                        return false;
                      }
                      this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);
                      return true;
                    };
                    Control2.prototype._onPointerMove = function(target, coordinates, pointerId, pi) {
                      var canNotify = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this, pi);
                      if (canNotify && this.parent != null && !this.isPointerBlocker) {
                        this.parent._onPointerMove(target, coordinates, pointerId, pi);
                      }
                    };
                    Control2.prototype._onPointerEnter = function(target, pi) {
                      if (!this._isEnabled) {
                        return false;
                      }
                      if (this._enterCount > 0) {
                        return false;
                      }
                      if (this._enterCount === -1) {
                        this._enterCount = 0;
                      }
                      this._enterCount++;
                      var canNotify = this.onPointerEnterObservable.notifyObservers(this, -1, target, this, pi);
                      if (canNotify && this.parent != null && !this.isPointerBlocker) {
                        this.parent._onPointerEnter(target, pi);
                      }
                      return true;
                    };
                    Control2.prototype._onPointerOut = function(target, pi, force) {
                      if (force === void 0) {
                        force = false;
                      }
                      if (!force && (!this._isEnabled || target === this)) {
                        return;
                      }
                      this._enterCount = 0;
                      var canNotify = true;
                      if (!target.isAscendant(this)) {
                        canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this, pi);
                      }
                      if (canNotify && this.parent != null && !this.isPointerBlocker) {
                        this.parent._onPointerOut(target, pi, force);
                      }
                    };
                    Control2.prototype._onPointerDown = function(target, coordinates, pointerId, buttonIndex, pi) {
                      this._onPointerEnter(this, pi);
                      if (this._downCount !== 0) {
                        return false;
                      }
                      this._downCount++;
                      this._downPointerIds[pointerId] = true;
                      var canNotify = this.onPointerDownObservable.notifyObservers(new _math2D__WEBPACK_IMPORTED_MODULE_4__.Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);
                      if (canNotify && this.parent != null && !this.isPointerBlocker) {
                        this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);
                      }
                      if (pi && this.uniqueId !== this._host.rootContainer.uniqueId) {
                        this._host._capturedPointerIds.add(pi.event.pointerId);
                      }
                      return true;
                    };
                    Control2.prototype._onPointerUp = function(target, coordinates, pointerId, buttonIndex, notifyClick, pi) {
                      if (!this._isEnabled) {
                        return;
                      }
                      this._downCount = 0;
                      delete this._downPointerIds[pointerId];
                      var canNotifyClick = notifyClick;
                      if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {
                        canNotifyClick = this.onPointerClickObservable.notifyObservers(new _math2D__WEBPACK_IMPORTED_MODULE_4__.Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);
                      }
                      var canNotify = this.onPointerUpObservable.notifyObservers(new _math2D__WEBPACK_IMPORTED_MODULE_4__.Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);
                      if (canNotify && this.parent != null && !this.isPointerBlocker) {
                        this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick, pi);
                      }
                      if (pi && this.uniqueId !== this._host.rootContainer.uniqueId) {
                        this._host._capturedPointerIds.delete(pi.event.pointerId);
                      }
                    };
                    Control2.prototype._forcePointerUp = function(pointerId) {
                      if (pointerId === void 0) {
                        pointerId = null;
                      }
                      if (pointerId !== null) {
                        this._onPointerUp(this, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Vector2.Zero(), pointerId, 0, true);
                      } else {
                        for (var key in this._downPointerIds) {
                          this._onPointerUp(this, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Vector2.Zero(), +key, 0, true);
                        }
                      }
                    };
                    Control2.prototype._onWheelScroll = function(deltaX, deltaY) {
                      if (!this._isEnabled) {
                        return;
                      }
                      var canNotify = this.onWheelObservable.notifyObservers(new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Vector2(deltaX, deltaY));
                      if (canNotify && this.parent != null) {
                        this.parent._onWheelScroll(deltaX, deltaY);
                      }
                    };
                    Control2.prototype._onCanvasBlur = function() {
                    };
                    Control2.prototype._processObservables = function(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY) {
                      if (!this._isEnabled) {
                        return false;
                      }
                      this._dummyVector2.copyFromFloats(x, y);
                      if (type === core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.PointerEventTypes.POINTERMOVE) {
                        this._onPointerMove(this, this._dummyVector2, pointerId, pi);
                        var previousControlOver = this._host._lastControlOver[pointerId];
                        if (previousControlOver && previousControlOver !== this) {
                          previousControlOver._onPointerOut(this, pi);
                        }
                        if (previousControlOver !== this) {
                          this._onPointerEnter(this, pi);
                        }
                        this._host._lastControlOver[pointerId] = this;
                        return true;
                      }
                      if (type === core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.PointerEventTypes.POINTERDOWN) {
                        this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex, pi);
                        this._host._registerLastControlDown(this, pointerId);
                        this._host._lastPickedControl = this;
                        return true;
                      }
                      if (type === core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.PointerEventTypes.POINTERUP) {
                        if (this._host._lastControlDown[pointerId]) {
                          this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true, pi);
                        }
                        delete this._host._lastControlDown[pointerId];
                        return true;
                      }
                      if (type === core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.PointerEventTypes.POINTERWHEEL) {
                        if (this._host._lastControlOver[pointerId]) {
                          this._host._lastControlOver[pointerId]._onWheelScroll(deltaX, deltaY);
                          return true;
                        }
                      }
                      return false;
                    };
                    Control2.prototype._prepareFont = function() {
                      if (!this._font && !this._fontSet) {
                        return;
                      }
                      if (this._style) {
                        this._font = this._style.fontStyle + " " + this._style.fontWeight + " " + this.fontSizeInPixels + "px " + this._style.fontFamily;
                      } else {
                        this._font = this._fontStyle + " " + this._fontWeight + " " + this.fontSizeInPixels + "px " + this._fontFamily;
                      }
                      this._fontOffset = Control2._GetFontOffset(this._font);
                      this.getDescendants().forEach(function(child) {
                        return child._markAllAsDirty();
                      });
                    };
                    Control2.prototype.clone = function(host) {
                      var serialization = {};
                      this.serialize(serialization);
                      var controlType = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Tools.Instantiate("BABYLON.GUI." + serialization.className);
                      var cloned = new controlType();
                      cloned.parse(serialization, host);
                      return cloned;
                    };
                    Control2.prototype.parse = function(serializedObject, host) {
                      var _this = this;
                      core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.SerializationHelper.Parse(function() {
                        return _this;
                      }, serializedObject, null);
                      this.name = serializedObject.name;
                      this._parseFromContent(serializedObject, host !== null && host !== void 0 ? host : this._host);
                      return this;
                    };
                    Control2.prototype.serialize = function(serializationObject) {
                      core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.SerializationHelper.Serialize(this, serializationObject);
                      serializationObject.name = this.name;
                      serializationObject.className = this.getClassName();
                      if (this._font) {
                        serializationObject.fontFamily = this._fontFamily;
                        serializationObject.fontSize = this.fontSize;
                        serializationObject.fontWeight = this.fontWeight;
                        serializationObject.fontStyle = this.fontStyle;
                      }
                      if (this._gradient) {
                        serializationObject.gradient = {};
                        this._gradient.serialize(serializationObject.gradient);
                      }
                      core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.SerializationHelper.AppendSerializedAnimations(this, serializationObject);
                    };
                    Control2.prototype._parseFromContent = function(serializedObject, host) {
                      var _a;
                      if (serializedObject.fontFamily) {
                        this.fontFamily = serializedObject.fontFamily;
                      }
                      if (serializedObject.fontSize) {
                        this.fontSize = serializedObject.fontSize;
                      }
                      if (serializedObject.fontWeight) {
                        this.fontWeight = serializedObject.fontWeight;
                      }
                      if (serializedObject.fontStyle) {
                        this.fontStyle = serializedObject.fontStyle;
                      }
                      if (serializedObject.gradient) {
                        var className = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Tools.Instantiate("BABYLON.GUI." + serializedObject.gradient.className);
                        this._gradient = new className();
                        (_a = this._gradient) === null || _a === void 0 ? void 0 : _a.parse(serializedObject.gradient);
                      }
                      if (serializedObject.animations) {
                        this.animations = [];
                        for (var animationIndex = 0; animationIndex < serializedObject.animations.length; animationIndex++) {
                          var parsedAnimation = serializedObject.animations[animationIndex];
                          var internalClass = (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.GetClass)("BABYLON.Animation");
                          if (internalClass) {
                            this.animations.push(internalClass.Parse(parsedAnimation));
                          }
                        }
                        if (serializedObject.autoAnimate && this._host && this._host.getScene()) {
                          this._host.getScene().beginAnimation(this, serializedObject.autoAnimateFrom, serializedObject.autoAnimateTo, serializedObject.autoAnimateLoop, serializedObject.autoAnimateSpeed || 1);
                        }
                      }
                    };
                    Control2.prototype.dispose = function() {
                      this.onDirtyObservable.clear();
                      this.onBeforeDrawObservable.clear();
                      this.onAfterDrawObservable.clear();
                      this.onPointerDownObservable.clear();
                      this.onPointerEnterObservable.clear();
                      this.onPointerMoveObservable.clear();
                      this.onPointerOutObservable.clear();
                      this.onPointerUpObservable.clear();
                      this.onPointerClickObservable.clear();
                      this.onWheelObservable.clear();
                      if (this._styleObserver && this._style) {
                        this._style.onChangedObservable.remove(this._styleObserver);
                        this._styleObserver = null;
                      }
                      if (this.parent) {
                        this.parent.removeControl(this);
                        this.parent = null;
                      }
                      if (this._host) {
                        var index = this._host._linkedControls.indexOf(this);
                        if (index > -1) {
                          this.linkWithMesh(null);
                        }
                      }
                      this.onDisposeObservable.notifyObservers(this);
                      this.onDisposeObservable.clear();
                    };
                    Object.defineProperty(Control2, "HORIZONTAL_ALIGNMENT_LEFT", {
                      /** HORIZONTAL_ALIGNMENT_LEFT */
                      get: function() {
                        return Control2._HORIZONTAL_ALIGNMENT_LEFT;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2, "HORIZONTAL_ALIGNMENT_RIGHT", {
                      /** HORIZONTAL_ALIGNMENT_RIGHT */
                      get: function() {
                        return Control2._HORIZONTAL_ALIGNMENT_RIGHT;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2, "HORIZONTAL_ALIGNMENT_CENTER", {
                      /** HORIZONTAL_ALIGNMENT_CENTER */
                      get: function() {
                        return Control2._HORIZONTAL_ALIGNMENT_CENTER;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2, "VERTICAL_ALIGNMENT_TOP", {
                      /** VERTICAL_ALIGNMENT_TOP */
                      get: function() {
                        return Control2._VERTICAL_ALIGNMENT_TOP;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2, "VERTICAL_ALIGNMENT_BOTTOM", {
                      /** VERTICAL_ALIGNMENT_BOTTOM */
                      get: function() {
                        return Control2._VERTICAL_ALIGNMENT_BOTTOM;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control2, "VERTICAL_ALIGNMENT_CENTER", {
                      /** VERTICAL_ALIGNMENT_CENTER */
                      get: function() {
                        return Control2._VERTICAL_ALIGNMENT_CENTER;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Control2._GetFontOffset = function(font) {
                      if (Control2._FontHeightSizes[font]) {
                        return Control2._FontHeightSizes[font];
                      }
                      var engine = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.EngineStore.LastCreatedEngine;
                      if (!engine) {
                        throw new Error("Invalid engine. Unable to create a canvas.");
                      }
                      var result = engine.getFontOffset(font);
                      Control2._FontHeightSizes[font] = result;
                      return result;
                    };
                    Control2.Parse = function(serializedObject, host) {
                      var controlType = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Tools.Instantiate("BABYLON.GUI." + serializedObject.className);
                      var control = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.SerializationHelper.Parse(function() {
                        return new controlType();
                      }, serializedObject, null);
                      control.name = serializedObject.name;
                      control._parseFromContent(serializedObject, host);
                      return control;
                    };
                    Control2.drawEllipse = function(x, y, width, height, context) {
                      context.translate(x, y);
                      context.scale(width, height);
                      context.beginPath();
                      context.arc(0, 0, 1, 0, 2 * Math.PI);
                      context.closePath();
                      context.scale(1 / width, 1 / height);
                      context.translate(-x, -y);
                    };
                    Control2.prototype.isReady = function() {
                      return true;
                    };
                    Control2.AllowAlphaInheritance = false;
                    Control2._ClipMeasure = new _measure__WEBPACK_IMPORTED_MODULE_3__.Measure(0, 0, 0, 0);
                    Control2._HORIZONTAL_ALIGNMENT_LEFT = 0;
                    Control2._HORIZONTAL_ALIGNMENT_RIGHT = 1;
                    Control2._HORIZONTAL_ALIGNMENT_CENTER = 2;
                    Control2._VERTICAL_ALIGNMENT_TOP = 0;
                    Control2._VERTICAL_ALIGNMENT_BOTTOM = 1;
                    Control2._VERTICAL_ALIGNMENT_CENTER = 2;
                    Control2._FontHeightSizes = {};
                    Control2.AddHeader = function() {
                    };
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "metadata", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "isHitTestVisible", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "isPointerBlocker", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "isFocusInvisible", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "clipChildren", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "clipContent", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "useBitmapCache", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "shadowOffsetX", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "shadowOffsetY", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "shadowBlur", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "shadowColor", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "hoverCursor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "fontOffset", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "alpha", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "scaleX", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "scaleY", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "rotation", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "transformCenterY", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "transformCenterX", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "horizontalAlignment", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "verticalAlignment", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "fixedRatio", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "width", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "height", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "style", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "color", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "gradient", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "zIndex", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "notRenderable", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "isVisible", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "descendantsOnlyPadding", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "paddingLeft", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "paddingRight", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "paddingTop", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "paddingBottom", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "left", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "top", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "linkOffsetX", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "linkOffsetY", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "isEnabled", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "disabledColor", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "disabledColorItem", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "overlapGroup", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Control2.prototype, "overlapDeltaMultiplier", void 0);
                    return Control2;
                  }()
                );
                (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.Control", Control);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/displayGrid.js": (
              /*!********************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/displayGrid.js ***!
                \********************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "DisplayGrid": () => (
                    /* binding */
                    DisplayGrid
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var _control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./control */
                  "../../../lts/gui/dist/2D/controls/control.js"
                );
                var core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! core/Misc/decorators */
                  "core/Misc/perfCounter"
                );
                var core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2___default = __webpack_require__2.n(core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__);
                var DisplayGrid = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(DisplayGrid2, _super);
                    function DisplayGrid2(name) {
                      var _this = _super.call(this, name) || this;
                      _this.name = name;
                      _this._cellWidth = 20;
                      _this._cellHeight = 20;
                      _this._minorLineTickness = 1;
                      _this._minorLineColor = "DarkGray";
                      _this._majorLineTickness = 2;
                      _this._majorLineColor = "White";
                      _this._majorLineFrequency = 5;
                      _this._background = "Black";
                      _this._displayMajorLines = true;
                      _this._displayMinorLines = true;
                      return _this;
                    }
                    Object.defineProperty(DisplayGrid2.prototype, "displayMinorLines", {
                      /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */
                      get: function() {
                        return this._displayMinorLines;
                      },
                      set: function(value) {
                        if (this._displayMinorLines === value) {
                          return;
                        }
                        this._displayMinorLines = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(DisplayGrid2.prototype, "displayMajorLines", {
                      /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */
                      get: function() {
                        return this._displayMajorLines;
                      },
                      set: function(value) {
                        if (this._displayMajorLines === value) {
                          return;
                        }
                        this._displayMajorLines = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(DisplayGrid2.prototype, "background", {
                      /** Gets or sets background color (Black by default) */
                      get: function() {
                        return this._background;
                      },
                      set: function(value) {
                        if (this._background === value) {
                          return;
                        }
                        this._background = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(DisplayGrid2.prototype, "cellWidth", {
                      /** Gets or sets the width of each cell (20 by default) */
                      get: function() {
                        return this._cellWidth;
                      },
                      set: function(value) {
                        this._cellWidth = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(DisplayGrid2.prototype, "cellHeight", {
                      /** Gets or sets the height of each cell (20 by default) */
                      get: function() {
                        return this._cellHeight;
                      },
                      set: function(value) {
                        this._cellHeight = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(DisplayGrid2.prototype, "minorLineTickness", {
                      /** Gets or sets the tickness of minor lines (1 by default) */
                      get: function() {
                        return this._minorLineTickness;
                      },
                      set: function(value) {
                        this._minorLineTickness = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(DisplayGrid2.prototype, "minorLineColor", {
                      /** Gets or sets the color of minor lines (DarkGray by default) */
                      get: function() {
                        return this._minorLineColor;
                      },
                      set: function(value) {
                        this._minorLineColor = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(DisplayGrid2.prototype, "majorLineTickness", {
                      /** Gets or sets the tickness of major lines (2 by default) */
                      get: function() {
                        return this._majorLineTickness;
                      },
                      set: function(value) {
                        this._majorLineTickness = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(DisplayGrid2.prototype, "majorLineColor", {
                      /** Gets or sets the color of major lines (White by default) */
                      get: function() {
                        return this._majorLineColor;
                      },
                      set: function(value) {
                        this._majorLineColor = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(DisplayGrid2.prototype, "majorLineFrequency", {
                      /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/
                      get: function() {
                        return this._majorLineFrequency;
                      },
                      set: function(value) {
                        this._majorLineFrequency = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    DisplayGrid2.prototype._draw = function(context) {
                      context.save();
                      this._applyStates(context);
                      if (this._isEnabled) {
                        if (this._background) {
                          context.fillStyle = this._background;
                          context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
                        }
                        var cellCountX = this._currentMeasure.width / this._cellWidth;
                        var cellCountY = this._currentMeasure.height / this._cellHeight;
                        var left = this._currentMeasure.left + this._currentMeasure.width / 2;
                        var top_1 = this._currentMeasure.top + this._currentMeasure.height / 2;
                        if (this._displayMinorLines) {
                          context.strokeStyle = this._minorLineColor;
                          context.lineWidth = this._minorLineTickness;
                          for (var x = -cellCountX / 2 + 1; x < cellCountX / 2; x++) {
                            var cellX = left + x * this.cellWidth;
                            context.beginPath();
                            context.moveTo(cellX, this._currentMeasure.top);
                            context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);
                            context.stroke();
                          }
                          for (var y = -cellCountY / 2 + 1; y < cellCountY / 2; y++) {
                            var cellY = top_1 + y * this.cellHeight;
                            context.beginPath();
                            context.moveTo(this._currentMeasure.left, cellY);
                            context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);
                            context.stroke();
                          }
                        }
                        if (this._displayMajorLines) {
                          context.strokeStyle = this._majorLineColor;
                          context.lineWidth = this._majorLineTickness;
                          for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {
                            var cellX = left + x * this.cellWidth;
                            context.beginPath();
                            context.moveTo(cellX, this._currentMeasure.top);
                            context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);
                            context.stroke();
                          }
                          for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {
                            var cellY = top_1 + y * this.cellHeight;
                            context.moveTo(this._currentMeasure.left, cellY);
                            context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);
                            context.closePath();
                            context.stroke();
                          }
                        }
                      }
                      context.restore();
                    };
                    DisplayGrid2.prototype._getTypeName = function() {
                      return "DisplayGrid";
                    };
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.serialize)()
                    ], DisplayGrid2.prototype, "displayMinorLines", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.serialize)()
                    ], DisplayGrid2.prototype, "displayMajorLines", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.serialize)()
                    ], DisplayGrid2.prototype, "background", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.serialize)()
                    ], DisplayGrid2.prototype, "cellWidth", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.serialize)()
                    ], DisplayGrid2.prototype, "cellHeight", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.serialize)()
                    ], DisplayGrid2.prototype, "minorLineTickness", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.serialize)()
                    ], DisplayGrid2.prototype, "minorLineColor", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.serialize)()
                    ], DisplayGrid2.prototype, "majorLineTickness", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.serialize)()
                    ], DisplayGrid2.prototype, "majorLineColor", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.serialize)()
                    ], DisplayGrid2.prototype, "majorLineFrequency", null);
                    return DisplayGrid2;
                  }(_control__WEBPACK_IMPORTED_MODULE_1__.Control)
                );
                (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.RegisterClass)("BABYLON.GUI.DisplayGrid", DisplayGrid);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/ellipse.js": (
              /*!****************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/ellipse.js ***!
                \****************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "Ellipse": () => (
                    /* binding */
                    Ellipse
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var _container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./container */
                  "../../../lts/gui/dist/2D/controls/container.js"
                );
                var _control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./control */
                  "../../../lts/gui/dist/2D/controls/control.js"
                );
                var core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! core/Misc/decorators */
                  "core/Misc/perfCounter"
                );
                var core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_3___default = __webpack_require__2.n(core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_3__);
                var Ellipse = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Ellipse2, _super);
                    function Ellipse2(name) {
                      var _this = _super.call(this, name) || this;
                      _this.name = name;
                      _this._thickness = 1;
                      return _this;
                    }
                    Object.defineProperty(Ellipse2.prototype, "thickness", {
                      /** Gets or sets border thickness */
                      get: function() {
                        return this._thickness;
                      },
                      set: function(value) {
                        if (this._thickness === value) {
                          return;
                        }
                        this._thickness = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Ellipse2.prototype._getTypeName = function() {
                      return "Ellipse";
                    };
                    Ellipse2.prototype._localDraw = function(context) {
                      context.save();
                      if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                        context.shadowColor = this.shadowColor;
                        context.shadowBlur = this.shadowBlur;
                        context.shadowOffsetX = this.shadowOffsetX;
                        context.shadowOffsetY = this.shadowOffsetY;
                      }
                      _control__WEBPACK_IMPORTED_MODULE_2__.Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);
                      if (this._backgroundGradient || this._background) {
                        context.fillStyle = this._getBackgroundColor(context);
                        context.fill();
                      }
                      if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                        context.shadowBlur = 0;
                        context.shadowOffsetX = 0;
                        context.shadowOffsetY = 0;
                      }
                      if (this._thickness) {
                        if (this.color) {
                          context.strokeStyle = this.color;
                        }
                        context.lineWidth = this._thickness;
                        context.stroke();
                      }
                      context.restore();
                    };
                    Ellipse2.prototype._additionalProcessing = function(parentMeasure, context) {
                      _super.prototype._additionalProcessing.call(this, parentMeasure, context);
                      this._measureForChildren.width -= 2 * this._thickness;
                      this._measureForChildren.height -= 2 * this._thickness;
                      this._measureForChildren.left += this._thickness;
                      this._measureForChildren.top += this._thickness;
                    };
                    Ellipse2.prototype._clipForChildren = function(context) {
                      _control__WEBPACK_IMPORTED_MODULE_2__.Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);
                      context.clip();
                    };
                    Ellipse2.prototype._renderHighlightSpecific = function(context) {
                      _control__WEBPACK_IMPORTED_MODULE_2__.Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2 - this._highlightLineWidth / 2, this._currentMeasure.height / 2 - this._highlightLineWidth / 2, context);
                      context.stroke();
                    };
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_3__.serialize)()
                    ], Ellipse2.prototype, "thickness", null);
                    return Ellipse2;
                  }(_container__WEBPACK_IMPORTED_MODULE_1__.Container)
                );
                (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_3__.RegisterClass)("BABYLON.GUI.Ellipse", Ellipse);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/focusableButton.js": (
              /*!************************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/focusableButton.js ***!
                \************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "FocusableButton": () => (
                    /* binding */
                    FocusableButton
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var _button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./button */
                  "../../../lts/gui/dist/2D/controls/button.js"
                );
                var core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! core/Misc/observable */
                  "core/Misc/perfCounter"
                );
                var core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2___default = __webpack_require__2.n(core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__);
                var FocusableButton = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(FocusableButton2, _super);
                    function FocusableButton2(name) {
                      var _this = _super.call(this, name) || this;
                      _this.name = name;
                      _this.focusedColor = null;
                      _this._isFocused = false;
                      _this._unfocusedColor = null;
                      _this.onFocusObservable = new core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.Observable();
                      _this.onBlurObservable = new core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.Observable();
                      _this.onKeyboardEventProcessedObservable = new core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.Observable();
                      _this._unfocusedColor = _this.color;
                      return _this;
                    }
                    FocusableButton2.prototype.onBlur = function() {
                      if (this._isFocused) {
                        this._isFocused = false;
                        if (this.focusedColor && this._unfocusedColor != null) {
                          this.color = this._unfocusedColor;
                        }
                        this.onBlurObservable.notifyObservers(this);
                      }
                    };
                    FocusableButton2.prototype.onFocus = function() {
                      this._isFocused = true;
                      if (this.focusedColor) {
                        this._unfocusedColor = this.color;
                        this.color = this.focusedColor;
                      }
                      this.onFocusObservable.notifyObservers(this);
                    };
                    FocusableButton2.prototype.keepsFocusWith = function() {
                      return null;
                    };
                    FocusableButton2.prototype.focus = function() {
                      this._host.moveFocusToControl(this);
                    };
                    FocusableButton2.prototype.blur = function() {
                      this._host.focusedControl = null;
                    };
                    FocusableButton2.prototype.processKeyboard = function(evt) {
                      this.onKeyboardEventProcessedObservable.notifyObservers(evt, -1, this);
                    };
                    FocusableButton2.prototype._onPointerDown = function(target, coordinates, pointerId, buttonIndex, pi) {
                      if (!this.isReadOnly) {
                        this.focus();
                      }
                      return _super.prototype._onPointerDown.call(this, target, coordinates, pointerId, buttonIndex, pi);
                    };
                    FocusableButton2.prototype.displose = function() {
                      _super.prototype.dispose.call(this);
                      this.onBlurObservable.clear();
                      this.onFocusObservable.clear();
                      this.onKeyboardEventProcessedObservable.clear();
                    };
                    return FocusableButton2;
                  }(_button__WEBPACK_IMPORTED_MODULE_1__.Button)
                );
                (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.RegisterClass)("BABYLON.GUI.FocusableButton", FocusableButton);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/focusableControl.js": (
              /*!*************************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/focusableControl.js ***!
                \*************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/gradient/BaseGradient.js": (
              /*!******************************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/gradient/BaseGradient.js ***!
                \******************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "BaseGradient": () => (
                    /* binding */
                    BaseGradient
                  )
                  /* harmony export */
                });
                var BaseGradient = (
                  /** @class */
                  function() {
                    function BaseGradient2() {
                      this._colorStops = [];
                      this._gradientDirty = true;
                    }
                    BaseGradient2.prototype._addColorStopsToCanvasGradient = function() {
                      for (var _i = 0, _a = this._colorStops; _i < _a.length; _i++) {
                        var stop_1 = _a[_i];
                        this._canvasGradient.addColorStop(stop_1.offset, stop_1.color);
                      }
                    };
                    BaseGradient2.prototype.getCanvasGradient = function(context) {
                      if (this._gradientDirty || this._context !== context) {
                        this._context = context;
                        this._canvasGradient = this._createCanvasGradient(context);
                        this._addColorStopsToCanvasGradient();
                        this._gradientDirty = false;
                      }
                      return this._canvasGradient;
                    };
                    BaseGradient2.prototype.addColorStop = function(offset, color) {
                      this._colorStops.push({ offset, color });
                      this._gradientDirty = true;
                    };
                    BaseGradient2.prototype.removeColorStop = function(offset) {
                      this._colorStops = this._colorStops.filter(function(colorStop) {
                        return colorStop.offset !== offset;
                      });
                      this._gradientDirty = true;
                    };
                    BaseGradient2.prototype.clearColorStops = function() {
                      this._colorStops = [];
                      this._gradientDirty = true;
                    };
                    Object.defineProperty(BaseGradient2.prototype, "colorStops", {
                      /** Color stops of the gradient */
                      get: function() {
                        return this._colorStops;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    BaseGradient2.prototype.getClassName = function() {
                      return "BaseGradient";
                    };
                    BaseGradient2.prototype.serialize = function(serializationObject) {
                      serializationObject.colorStops = this._colorStops;
                      serializationObject.className = this.getClassName();
                    };
                    BaseGradient2.prototype.parse = function(serializationObject) {
                      this._colorStops = serializationObject.colorStops;
                    };
                    return BaseGradient2;
                  }()
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/gradient/LinearGradient.js": (
              /*!********************************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/gradient/LinearGradient.js ***!
                \********************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "LinearGradient": () => (
                    /* binding */
                    LinearGradient
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var _BaseGradient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./BaseGradient */
                  "../../../lts/gui/dist/2D/controls/gradient/BaseGradient.js"
                );
                var core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! core/Misc/typeStore */
                  "core/Misc/perfCounter"
                );
                var core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2___default = __webpack_require__2.n(core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__);
                var LinearGradient = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(LinearGradient2, _super);
                    function LinearGradient2(x0, y0, x1, y1) {
                      var _this = _super.call(this) || this;
                      _this._x0 = x0 !== null && x0 !== void 0 ? x0 : 0;
                      _this._y0 = y0 !== null && y0 !== void 0 ? y0 : 0;
                      _this._x1 = x1 !== null && x1 !== void 0 ? x1 : 0;
                      _this._y1 = y1 !== null && y1 !== void 0 ? y1 : 0;
                      return _this;
                    }
                    LinearGradient2.prototype._createCanvasGradient = function(context) {
                      return context.createLinearGradient(this._x0, this._y0, this._x1, this._y1);
                    };
                    Object.defineProperty(LinearGradient2.prototype, "x0", {
                      /** X axis coordinate of the starting point in the line */
                      get: function() {
                        return this._x0;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(LinearGradient2.prototype, "x1", {
                      /** X axis coordinate of the ending point in the line */
                      get: function() {
                        return this._x1;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(LinearGradient2.prototype, "y0", {
                      /** Y axis coordinate of the starting point in the line */
                      get: function() {
                        return this._y0;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(LinearGradient2.prototype, "y1", {
                      /** Y axis coordinate of the ending point in the line */
                      get: function() {
                        return this._y1;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    LinearGradient2.prototype.getClassName = function() {
                      return "LinearGradient";
                    };
                    LinearGradient2.prototype.serialize = function(serializationObject) {
                      _super.prototype.serialize.call(this, serializationObject);
                      serializationObject.x0 = this._x0;
                      serializationObject.y0 = this._y0;
                      serializationObject.x1 = this._x1;
                      serializationObject.y1 = this._y1;
                    };
                    LinearGradient2.prototype.parse = function(serializationObject) {
                      _super.prototype.parse.call(this, serializationObject);
                      this._x0 = serializationObject.x0;
                      this._y0 = serializationObject.y0;
                      this._x1 = serializationObject.x1;
                      this._y1 = serializationObject.y1;
                    };
                    return LinearGradient2;
                  }(_BaseGradient__WEBPACK_IMPORTED_MODULE_1__.BaseGradient)
                );
                (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.RegisterClass)("BABYLON.GUI.LinearGradient", LinearGradient);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/gradient/RadialGradient.js": (
              /*!********************************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/gradient/RadialGradient.js ***!
                \********************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "RadialGradient": () => (
                    /* binding */
                    RadialGradient
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var _BaseGradient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./BaseGradient */
                  "../../../lts/gui/dist/2D/controls/gradient/BaseGradient.js"
                );
                var core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! core/Misc/typeStore */
                  "core/Misc/perfCounter"
                );
                var core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2___default = __webpack_require__2.n(core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__);
                var RadialGradient = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(RadialGradient2, _super);
                    function RadialGradient2(x0, y0, r0, x1, y1, r1) {
                      var _this = _super.call(this) || this;
                      _this._x0 = x0 !== null && x0 !== void 0 ? x0 : 0;
                      _this._y0 = y0 !== null && y0 !== void 0 ? y0 : 0;
                      _this._r0 = r0 !== null && r0 !== void 0 ? r0 : 0;
                      _this._x1 = x1 !== null && x1 !== void 0 ? x1 : 0;
                      _this._y1 = y1 !== null && y1 !== void 0 ? y1 : 0;
                      _this._r1 = r1 !== null && r1 !== void 0 ? r1 : 0;
                      return _this;
                    }
                    RadialGradient2.prototype._createCanvasGradient = function(context) {
                      return context.createRadialGradient(this._x0, this._y0, this._r0, this._x1, this._y1, this._r1);
                    };
                    Object.defineProperty(RadialGradient2.prototype, "x0", {
                      /** x coordinate of the first circle's center */
                      get: function() {
                        return this._x0;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(RadialGradient2.prototype, "x1", {
                      /** x coordinate of the second circle's center */
                      get: function() {
                        return this._x1;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(RadialGradient2.prototype, "y0", {
                      /** y coordinate of the first circle's center */
                      get: function() {
                        return this._y0;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(RadialGradient2.prototype, "y1", {
                      /** y coordinate of the second circle's center */
                      get: function() {
                        return this._y1;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(RadialGradient2.prototype, "r0", {
                      /** radius of the first circle */
                      get: function() {
                        return this._r0;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(RadialGradient2.prototype, "r1", {
                      /** radius of the second circle */
                      get: function() {
                        return this._r1;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    RadialGradient2.prototype.getClassName = function() {
                      return "RadialGradient";
                    };
                    RadialGradient2.prototype.serialize = function(serializationObject) {
                      _super.prototype.serialize.call(this, serializationObject);
                      serializationObject.x0 = this._x0;
                      serializationObject.y0 = this._y0;
                      serializationObject.r0 = this._r0;
                      serializationObject.x1 = this._x1;
                      serializationObject.y1 = this._y1;
                      serializationObject.r1 = this._r1;
                    };
                    RadialGradient2.prototype.parse = function(serializationObject) {
                      _super.prototype.parse.call(this, serializationObject);
                      this._x0 = serializationObject.x0;
                      this._y0 = serializationObject.y0;
                      this._r0 = serializationObject.r0;
                      this._x1 = serializationObject.x1;
                      this._y1 = serializationObject.y1;
                      this._r1 = serializationObject.r1;
                    };
                    return RadialGradient2;
                  }(_BaseGradient__WEBPACK_IMPORTED_MODULE_1__.BaseGradient)
                );
                (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.RegisterClass)("BABYLON.GUI.RadialGradient", RadialGradient);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/grid.js": (
              /*!*************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/grid.js ***!
                \*************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "Grid": () => (
                    /* binding */
                    Grid
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var _container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./container */
                  "../../../lts/gui/dist/2D/controls/container.js"
                );
                var _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ../valueAndUnit */
                  "../../../lts/gui/dist/2D/valueAndUnit.js"
                );
                var _control__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./control */
                  "../../../lts/gui/dist/2D/controls/control.js"
                );
                var core_Misc_tools__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
                  /*! core/Misc/decorators */
                  "core/Misc/perfCounter"
                );
                var core_Misc_tools__WEBPACK_IMPORTED_MODULE_4___default = __webpack_require__2.n(core_Misc_tools__WEBPACK_IMPORTED_MODULE_4__);
                var Grid = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Grid2, _super);
                    function Grid2(name) {
                      var _this = _super.call(this, name) || this;
                      _this.name = name;
                      _this._rowDefinitions = new Array();
                      _this._rowDefinitionObservers = [];
                      _this._columnDefinitions = new Array();
                      _this._columnDefinitionObservers = [];
                      _this._cells = {};
                      _this._childControls = new Array();
                      return _this;
                    }
                    Object.defineProperty(Grid2.prototype, "clipContent", {
                      get: function() {
                        return this._clipContent;
                      },
                      /**
                       * Sets/Gets a boolean indicating that control content must be clipped
                       * Please note that not clipping content may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children
                       */
                      set: function(value) {
                        this._clipContent = value;
                        for (var key in this._cells) {
                          this._cells[key].clipContent = value;
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Grid2.prototype, "clipChildren", {
                      get: function() {
                        return this._clipChildren;
                      },
                      /**
                       * Sets/Gets a boolean indicating if the children are clipped to the current control bounds.
                       * Please note that not clipping children may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children
                       */
                      set: function(value) {
                        this._clipChildren = value;
                        for (var key in this._cells) {
                          this._cells[key].clipChildren = value;
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Grid2.prototype, "columnCount", {
                      /**
                       * Gets the number of columns
                       */
                      get: function() {
                        return this._columnDefinitions.length;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Grid2.prototype, "rowCount", {
                      /**
                       * Gets the number of rows
                       */
                      get: function() {
                        return this._rowDefinitions.length;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Grid2.prototype, "children", {
                      /** Gets the list of children */
                      get: function() {
                        return this._childControls;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Grid2.prototype, "cells", {
                      /** Gets the list of cells (e.g. the containers) */
                      get: function() {
                        return this._cells;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Grid2.prototype.getRowDefinition = function(index) {
                      if (index < 0 || index >= this._rowDefinitions.length) {
                        return null;
                      }
                      return this._rowDefinitions[index];
                    };
                    Grid2.prototype.getColumnDefinition = function(index) {
                      if (index < 0 || index >= this._columnDefinitions.length) {
                        return null;
                      }
                      return this._columnDefinitions[index];
                    };
                    Grid2.prototype.addRowDefinition = function(height, isPixel) {
                      var _this = this;
                      if (isPixel === void 0) {
                        isPixel = false;
                      }
                      this._rowDefinitions.push(new _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit(height, isPixel ? _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit.UNITMODE_PIXEL : _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit.UNITMODE_PERCENTAGE));
                      this._rowDefinitionObservers.push(this._rowDefinitions[this.rowCount - 1].onChangedObservable.add(function() {
                        return _this._markAsDirty();
                      }));
                      this._markAsDirty();
                      return this;
                    };
                    Grid2.prototype.addColumnDefinition = function(width, isPixel) {
                      var _this = this;
                      if (isPixel === void 0) {
                        isPixel = false;
                      }
                      this._columnDefinitions.push(new _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit(width, isPixel ? _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit.UNITMODE_PIXEL : _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit.UNITMODE_PERCENTAGE));
                      this._columnDefinitionObservers.push(this._columnDefinitions[this.columnCount - 1].onChangedObservable.add(function() {
                        return _this._markAsDirty();
                      }));
                      this._markAsDirty();
                      return this;
                    };
                    Grid2.prototype.setRowDefinition = function(index, height, isPixel) {
                      var _this = this;
                      if (isPixel === void 0) {
                        isPixel = false;
                      }
                      if (index < 0 || index >= this._rowDefinitions.length) {
                        return this;
                      }
                      var current = this._rowDefinitions[index];
                      if (current && current.isPixel === isPixel && current.value === height) {
                        return this;
                      }
                      this._rowDefinitions[index].onChangedObservable.remove(this._rowDefinitionObservers[index]);
                      this._rowDefinitions[index] = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit(height, isPixel ? _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit.UNITMODE_PIXEL : _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit.UNITMODE_PERCENTAGE);
                      this._rowDefinitionObservers[index] = this._rowDefinitions[index].onChangedObservable.add(function() {
                        return _this._markAsDirty();
                      });
                      this._markAsDirty();
                      return this;
                    };
                    Grid2.prototype.setColumnDefinition = function(index, width, isPixel) {
                      var _this = this;
                      if (isPixel === void 0) {
                        isPixel = false;
                      }
                      if (index < 0 || index >= this._columnDefinitions.length) {
                        return this;
                      }
                      var current = this._columnDefinitions[index];
                      if (current && current.isPixel === isPixel && current.value === width) {
                        return this;
                      }
                      this._columnDefinitions[index].onChangedObservable.remove(this._columnDefinitionObservers[index]);
                      this._columnDefinitions[index] = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit(width, isPixel ? _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit.UNITMODE_PIXEL : _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit.UNITMODE_PERCENTAGE);
                      this._columnDefinitionObservers[index] = this._columnDefinitions[index].onChangedObservable.add(function() {
                        return _this._markAsDirty();
                      });
                      this._markAsDirty();
                      return this;
                    };
                    Grid2.prototype.getChildrenAt = function(row, column) {
                      var cell = this._cells["".concat(row, ":").concat(column)];
                      if (!cell) {
                        return null;
                      }
                      return cell.children;
                    };
                    Grid2.prototype.getChildCellInfo = function(child) {
                      return child._tag;
                    };
                    Grid2.prototype._removeCell = function(cell, key) {
                      if (!cell) {
                        return;
                      }
                      _super.prototype.removeControl.call(this, cell);
                      for (var _i = 0, _a = cell.children; _i < _a.length; _i++) {
                        var control = _a[_i];
                        var childIndex = this._childControls.indexOf(control);
                        if (childIndex !== -1) {
                          this._childControls.splice(childIndex, 1);
                        }
                      }
                      delete this._cells[key];
                    };
                    Grid2.prototype._offsetCell = function(previousKey, key) {
                      if (!this._cells[key]) {
                        return;
                      }
                      this._cells[previousKey] = this._cells[key];
                      for (var _i = 0, _a = this._cells[previousKey].children; _i < _a.length; _i++) {
                        var control = _a[_i];
                        control._tag = previousKey;
                      }
                      delete this._cells[key];
                    };
                    Grid2.prototype.removeColumnDefinition = function(index) {
                      if (index < 0 || index >= this._columnDefinitions.length) {
                        return this;
                      }
                      for (var x = 0; x < this._rowDefinitions.length; x++) {
                        var key = "".concat(x, ":").concat(index);
                        var cell = this._cells[key];
                        this._removeCell(cell, key);
                      }
                      for (var x = 0; x < this._rowDefinitions.length; x++) {
                        for (var y = index + 1; y < this._columnDefinitions.length; y++) {
                          var previousKey = "".concat(x, ":").concat(y - 1);
                          var key = "".concat(x, ":").concat(y);
                          this._offsetCell(previousKey, key);
                        }
                      }
                      this._columnDefinitions[index].onChangedObservable.remove(this._columnDefinitionObservers[index]);
                      this._columnDefinitions.splice(index, 1);
                      this._columnDefinitionObservers.splice(index, 1);
                      this._markAsDirty();
                      return this;
                    };
                    Grid2.prototype.removeRowDefinition = function(index) {
                      if (index < 0 || index >= this._rowDefinitions.length) {
                        return this;
                      }
                      for (var y = 0; y < this._columnDefinitions.length; y++) {
                        var key = "".concat(index, ":").concat(y);
                        var cell = this._cells[key];
                        this._removeCell(cell, key);
                      }
                      for (var y = 0; y < this._columnDefinitions.length; y++) {
                        for (var x = index + 1; x < this._rowDefinitions.length; x++) {
                          var previousKey = "".concat(x - 1, ":").concat(y);
                          var key = "".concat(x, ":").concat(y);
                          this._offsetCell(previousKey, key);
                        }
                      }
                      this._rowDefinitions[index].onChangedObservable.remove(this._rowDefinitionObservers[index]);
                      this._rowDefinitions.splice(index, 1);
                      this._rowDefinitionObservers.splice(index, 1);
                      this._markAsDirty();
                      return this;
                    };
                    Grid2.prototype.addControl = function(control, row, column) {
                      if (row === void 0) {
                        row = 0;
                      }
                      if (column === void 0) {
                        column = 0;
                      }
                      if (this._rowDefinitions.length === 0) {
                        this.addRowDefinition(1, false);
                      }
                      if (this._columnDefinitions.length === 0) {
                        this.addColumnDefinition(1, false);
                      }
                      if (this._childControls.indexOf(control) !== -1) {
                        core_Misc_tools__WEBPACK_IMPORTED_MODULE_4__.Tools.Warn("Control (Name:".concat(control.name, ", UniqueId:").concat(control.uniqueId, ") is already associated with this grid. You must remove it before reattaching it"));
                        return this;
                      }
                      var x = Math.min(row, this._rowDefinitions.length - 1);
                      var y = Math.min(column, this._columnDefinitions.length - 1);
                      var key = "".concat(x, ":").concat(y);
                      var goodContainer = this._cells[key];
                      if (!goodContainer) {
                        goodContainer = new _container__WEBPACK_IMPORTED_MODULE_1__.Container(key);
                        this._cells[key] = goodContainer;
                        goodContainer.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                        goodContainer.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.VERTICAL_ALIGNMENT_TOP;
                        goodContainer.clipContent = this.clipContent;
                        goodContainer.clipChildren = this.clipChildren;
                        _super.prototype.addControl.call(this, goodContainer);
                      }
                      goodContainer.addControl(control);
                      this._childControls.push(control);
                      control._tag = key;
                      control.parent = this;
                      this._markAsDirty();
                      return this;
                    };
                    Grid2.prototype.removeControl = function(control) {
                      var index = this._childControls.indexOf(control);
                      if (index !== -1) {
                        this._childControls.splice(index, 1);
                      }
                      var cell = this._cells[control._tag];
                      if (cell) {
                        cell.removeControl(control);
                        control._tag = null;
                      }
                      this._markAsDirty();
                      return this;
                    };
                    Grid2.prototype._getTypeName = function() {
                      return "Grid";
                    };
                    Grid2.prototype._getGridDefinitions = function(definitionCallback) {
                      var widths = [];
                      var heights = [];
                      var lefts = [];
                      var tops = [];
                      var availableWidth = this._currentMeasure.width;
                      var globalWidthPercentage = 0;
                      var availableHeight = this._currentMeasure.height;
                      var globalHeightPercentage = 0;
                      var index = 0;
                      for (var _i = 0, _a = this._rowDefinitions; _i < _a.length; _i++) {
                        var rowDefinition = _a[_i];
                        if (rowDefinition.isPixel) {
                          var height = rowDefinition.getValue(this._host);
                          availableHeight -= height;
                          heights[index] = height;
                        } else {
                          globalHeightPercentage += rowDefinition.value;
                        }
                        index++;
                      }
                      var top = 0;
                      index = 0;
                      for (var _b = 0, _c = this._rowDefinitions; _b < _c.length; _b++) {
                        var rowDefinition = _c[_b];
                        tops.push(top);
                        if (!rowDefinition.isPixel) {
                          var height = Math.round(rowDefinition.value / globalHeightPercentage * availableHeight);
                          top += height;
                          heights[index] = height;
                        } else {
                          top += rowDefinition.getValue(this._host);
                        }
                        index++;
                      }
                      index = 0;
                      for (var _d = 0, _e = this._columnDefinitions; _d < _e.length; _d++) {
                        var columnDefinition = _e[_d];
                        if (columnDefinition.isPixel) {
                          var width = columnDefinition.getValue(this._host);
                          availableWidth -= width;
                          widths[index] = width;
                        } else {
                          globalWidthPercentage += columnDefinition.value;
                        }
                        index++;
                      }
                      var left = 0;
                      index = 0;
                      for (var _f = 0, _g = this._columnDefinitions; _f < _g.length; _f++) {
                        var columnDefinition = _g[_f];
                        lefts.push(left);
                        if (!columnDefinition.isPixel) {
                          var width = Math.round(columnDefinition.value / globalWidthPercentage * availableWidth);
                          left += width;
                          widths[index] = width;
                        } else {
                          left += columnDefinition.getValue(this._host);
                        }
                        index++;
                      }
                      definitionCallback(lefts, tops, widths, heights);
                    };
                    Grid2.prototype._additionalProcessing = function(parentMeasure, context) {
                      var _this = this;
                      this._getGridDefinitions(function(lefts, tops, widths, heights) {
                        for (var key in _this._cells) {
                          if (!Object.prototype.hasOwnProperty.call(_this._cells, key)) {
                            continue;
                          }
                          var split = key.split(":");
                          var x = parseInt(split[0]);
                          var y = parseInt(split[1]);
                          var cell = _this._cells[key];
                          cell.leftInPixels = lefts[y];
                          cell.topInPixels = tops[x];
                          cell.widthInPixels = widths[y];
                          cell.heightInPixels = heights[x];
                          cell._left.ignoreAdaptiveScaling = true;
                          cell._top.ignoreAdaptiveScaling = true;
                          cell._width.ignoreAdaptiveScaling = true;
                          cell._height.ignoreAdaptiveScaling = true;
                        }
                      });
                      _super.prototype._additionalProcessing.call(this, parentMeasure, context);
                    };
                    Grid2.prototype._flagDescendantsAsMatrixDirty = function() {
                      for (var key in this._cells) {
                        if (!Object.prototype.hasOwnProperty.call(this._cells, key)) {
                          continue;
                        }
                        var child = this._cells[key];
                        child._markMatrixAsDirty();
                      }
                    };
                    Grid2.prototype._renderHighlightSpecific = function(context) {
                      var _this = this;
                      _super.prototype._renderHighlightSpecific.call(this, context);
                      this._getGridDefinitions(function(lefts, tops, widths, heights) {
                        for (var index = 0; index < lefts.length; index++) {
                          var left = _this._currentMeasure.left + lefts[index] + widths[index];
                          context.beginPath();
                          context.moveTo(left, _this._currentMeasure.top);
                          context.lineTo(left, _this._currentMeasure.top + _this._currentMeasure.height);
                          context.stroke();
                        }
                        for (var index = 0; index < tops.length; index++) {
                          var top_1 = _this._currentMeasure.top + tops[index] + heights[index];
                          context.beginPath();
                          context.moveTo(_this._currentMeasure.left, top_1);
                          context.lineTo(_this._currentMeasure.left + _this._currentMeasure.width, top_1);
                          context.stroke();
                        }
                      });
                      context.restore();
                    };
                    Grid2.prototype.dispose = function() {
                      _super.prototype.dispose.call(this);
                      for (var _i = 0, _a = this._childControls; _i < _a.length; _i++) {
                        var control = _a[_i];
                        control.dispose();
                      }
                      for (var index = 0; index < this._rowDefinitions.length; index++) {
                        this._rowDefinitions[index].onChangedObservable.remove(this._rowDefinitionObservers[index]);
                      }
                      for (var index = 0; index < this._columnDefinitions.length; index++) {
                        this._columnDefinitions[index].onChangedObservable.remove(this._columnDefinitionObservers[index]);
                      }
                      this._rowDefinitionObservers.length = 0;
                      this._rowDefinitions.length = 0;
                      this._columnDefinitionObservers.length = 0;
                      this._columnDefinitions.length = 0;
                      this._cells = {};
                      this._childControls.length = 0;
                    };
                    Grid2.prototype.serialize = function(serializationObject) {
                      _super.prototype.serialize.call(this, serializationObject);
                      serializationObject.columnCount = this.columnCount;
                      serializationObject.rowCount = this.rowCount;
                      serializationObject.columns = [];
                      serializationObject.rows = [];
                      serializationObject.tags = [];
                      for (var i = 0; i < this.columnCount; ++i) {
                        var cd = this.getColumnDefinition(i);
                        var childSerializationObject = { value: cd === null || cd === void 0 ? void 0 : cd.getValue(this.host), unit: cd === null || cd === void 0 ? void 0 : cd.unit };
                        serializationObject.columns.push(childSerializationObject);
                      }
                      for (var i = 0; i < this.rowCount; ++i) {
                        var rd = this.getRowDefinition(i);
                        var childSerializationObject = { value: rd === null || rd === void 0 ? void 0 : rd.getValue(this.host), unit: rd === null || rd === void 0 ? void 0 : rd.unit };
                        serializationObject.rows.push(childSerializationObject);
                      }
                      this.children.forEach(function(child) {
                        serializationObject.tags.push(child._tag);
                      });
                    };
                    Grid2.prototype._parseFromContent = function(serializedObject, host) {
                      _super.prototype._parseFromContent.call(this, serializedObject, host);
                      var children = [];
                      this.children.forEach(function(child) {
                        children.push(child);
                      });
                      this.removeRowDefinition(0);
                      this.removeColumnDefinition(0);
                      for (var i = 0; i < serializedObject.columnCount; ++i) {
                        var columnValue = serializedObject.columns[i].value;
                        var unit = serializedObject.columns[i].unit;
                        this.addColumnDefinition(columnValue, unit === 1 ? true : false);
                      }
                      for (var i = 0; i < serializedObject.rowCount; ++i) {
                        var rowValue = serializedObject.rows[i].value;
                        var unit = serializedObject.rows[i].unit;
                        this.addRowDefinition(rowValue, unit === 1 ? true : false);
                      }
                      for (var i = 0; i < children.length; ++i) {
                        var cellInfo = serializedObject.tags[i];
                        var rowNumber = parseInt(cellInfo.substring(0, cellInfo.search(":")));
                        if (isNaN(rowNumber)) {
                          rowNumber = 0;
                        }
                        var columnNumber = parseInt(cellInfo.substring(cellInfo.search(":") + 1));
                        if (isNaN(columnNumber)) {
                          columnNumber = 0;
                        }
                        this.addControl(children[i], rowNumber, columnNumber);
                      }
                    };
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_tools__WEBPACK_IMPORTED_MODULE_4__.serialize)()
                    ], Grid2.prototype, "clipContent", null);
                    return Grid2;
                  }(_container__WEBPACK_IMPORTED_MODULE_1__.Container)
                );
                (0, core_Misc_tools__WEBPACK_IMPORTED_MODULE_4__.RegisterClass)("BABYLON.GUI.Grid", Grid);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/image.js": (
              /*!**************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/image.js ***!
                \**************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "Image": () => (
                    /* binding */
                    Image
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Engines/engineStore */
                  "core/Misc/perfCounter"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__);
                var _control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./control */
                  "../../../lts/gui/dist/2D/controls/control.js"
                );
                var Image = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Image2, _super);
                    function Image2(name, url) {
                      if (url === void 0) {
                        url = null;
                      }
                      var _this = _super.call(this, name) || this;
                      _this.name = name;
                      _this._workingCanvas = null;
                      _this._loaded = false;
                      _this._stretch = Image2.STRETCH_FILL;
                      _this._autoScale = false;
                      _this._sourceLeft = 0;
                      _this._sourceTop = 0;
                      _this._sourceWidth = 0;
                      _this._sourceHeight = 0;
                      _this._svgAttributesComputationCompleted = false;
                      _this._isSVG = false;
                      _this._cellWidth = 0;
                      _this._cellHeight = 0;
                      _this._cellId = -1;
                      _this._populateNinePatchSlicesFromImage = false;
                      _this._imageDataCache = { data: null, key: "" };
                      _this.onImageLoadedObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this.onSVGAttributesComputedObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this.source = url;
                      return _this;
                    }
                    Object.defineProperty(Image2.prototype, "isLoaded", {
                      /**
                       * Gets a boolean indicating that the content is loaded
                       */
                      get: function() {
                        return this._loaded;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Image2.prototype.isReady = function() {
                      return this.isLoaded;
                    };
                    Object.defineProperty(Image2.prototype, "detectPointerOnOpaqueOnly", {
                      /**
                       * Gets or sets a boolean indicating if pointers should only be validated on pixels with alpha > 0.
                       * Beware using this as this will consume more memory as the image has to be stored twice
                       */
                      get: function() {
                        return this._detectPointerOnOpaqueOnly;
                      },
                      set: function(value) {
                        if (this._detectPointerOnOpaqueOnly === value) {
                          return;
                        }
                        this._detectPointerOnOpaqueOnly = value;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Image2.prototype, "sliceLeft", {
                      /**
                       * Gets or sets the left value for slicing (9-patch)
                       */
                      get: function() {
                        return this._sliceLeft;
                      },
                      set: function(value) {
                        if (this._sliceLeft === value) {
                          return;
                        }
                        this._sliceLeft = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Image2.prototype, "sliceRight", {
                      /**
                       * Gets or sets the right value for slicing (9-patch)
                       */
                      get: function() {
                        return this._sliceRight;
                      },
                      set: function(value) {
                        if (this._sliceRight === value) {
                          return;
                        }
                        this._sliceRight = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Image2.prototype, "sliceTop", {
                      /**
                       * Gets or sets the top value for slicing (9-patch)
                       */
                      get: function() {
                        return this._sliceTop;
                      },
                      set: function(value) {
                        if (this._sliceTop === value) {
                          return;
                        }
                        this._sliceTop = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Image2.prototype, "sliceBottom", {
                      /**
                       * Gets or sets the bottom value for slicing (9-patch)
                       */
                      get: function() {
                        return this._sliceBottom;
                      },
                      set: function(value) {
                        if (this._sliceBottom === value) {
                          return;
                        }
                        this._sliceBottom = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Image2.prototype, "sourceLeft", {
                      /**
                       * Gets or sets the left coordinate in the source image
                       */
                      get: function() {
                        return this._sourceLeft;
                      },
                      set: function(value) {
                        if (this._sourceLeft === value) {
                          return;
                        }
                        this._sourceLeft = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Image2.prototype, "sourceTop", {
                      /**
                       * Gets or sets the top coordinate in the source image
                       */
                      get: function() {
                        return this._sourceTop;
                      },
                      set: function(value) {
                        if (this._sourceTop === value) {
                          return;
                        }
                        this._sourceTop = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Image2.prototype, "sourceWidth", {
                      /**
                       * Gets or sets the width to capture in the source image
                       */
                      get: function() {
                        return this._sourceWidth;
                      },
                      set: function(value) {
                        if (this._sourceWidth === value) {
                          return;
                        }
                        this._sourceWidth = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Image2.prototype, "sourceHeight", {
                      /**
                       * Gets or sets the height to capture in the source image
                       */
                      get: function() {
                        return this._sourceHeight;
                      },
                      set: function(value) {
                        if (this._sourceHeight === value) {
                          return;
                        }
                        this._sourceHeight = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Image2.prototype, "imageWidth", {
                      /**
                       * Gets the image width
                       */
                      get: function() {
                        return this._imageWidth;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Image2.prototype, "imageHeight", {
                      /**
                       * Gets the image height
                       */
                      get: function() {
                        return this._imageHeight;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Image2.prototype, "populateNinePatchSlicesFromImage", {
                      /**
                       * Gets or sets a boolean indicating if nine patch slices (left, top, right, bottom) should be read from image data
                       */
                      get: function() {
                        return this._populateNinePatchSlicesFromImage;
                      },
                      set: function(value) {
                        if (this._populateNinePatchSlicesFromImage === value) {
                          return;
                        }
                        this._populateNinePatchSlicesFromImage = value;
                        if (this._populateNinePatchSlicesFromImage && this._loaded) {
                          this._extractNinePatchSliceDataFromImage();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Image2.prototype, "isSVG", {
                      /** Indicates if the format of the image is SVG */
                      get: function() {
                        return this._isSVG;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Image2.prototype, "svgAttributesComputationCompleted", {
                      /** Gets the status of the SVG attributes computation (sourceLeft, sourceTop, sourceWidth, sourceHeight) */
                      get: function() {
                        return this._svgAttributesComputationCompleted;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Image2.prototype, "autoScale", {
                      /**
                       * Gets or sets a boolean indicating if the image can force its container to adapt its size
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image
                       */
                      get: function() {
                        return this._autoScale;
                      },
                      set: function(value) {
                        if (this._autoScale === value) {
                          return;
                        }
                        this._autoScale = value;
                        if (value && this._loaded) {
                          this.synchronizeSizeWithContent();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Image2.prototype, "stretch", {
                      /** Gets or sets the stretching mode used by the image */
                      get: function() {
                        return this._stretch;
                      },
                      set: function(value) {
                        if (this._stretch === value) {
                          return;
                        }
                        this._stretch = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Image2.prototype._rotate90 = function(n, preserveProperties) {
                      var _a, _b;
                      if (preserveProperties === void 0) {
                        preserveProperties = false;
                      }
                      var width = this._domImage.width;
                      var height = this._domImage.height;
                      var engine = ((_b = (_a = this._host) === null || _a === void 0 ? void 0 : _a.getScene()) === null || _b === void 0 ? void 0 : _b.getEngine()) || core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.EngineStore.LastCreatedEngine;
                      if (!engine) {
                        throw new Error("Invalid engine. Unable to create a canvas.");
                      }
                      var canvas = engine.createCanvas(height, width);
                      var context = canvas.getContext("2d");
                      context.translate(canvas.width / 2, canvas.height / 2);
                      context.rotate(n * Math.PI / 2);
                      context.drawImage(this._domImage, 0, 0, width, height, -width / 2, -height / 2, width, height);
                      var dataUrl = canvas.toDataURL("image/jpg");
                      var rotatedImage = new Image2(this.name + "rotated", dataUrl);
                      if (preserveProperties) {
                        rotatedImage._stretch = this._stretch;
                        rotatedImage._autoScale = this._autoScale;
                        rotatedImage._cellId = this._cellId;
                        rotatedImage._cellWidth = n % 1 ? this._cellHeight : this._cellWidth;
                        rotatedImage._cellHeight = n % 1 ? this._cellWidth : this._cellHeight;
                      }
                      this._handleRotationForSVGImage(this, rotatedImage, n);
                      this._imageDataCache.data = null;
                      return rotatedImage;
                    };
                    Image2.prototype._handleRotationForSVGImage = function(srcImage, dstImage, n) {
                      var _this = this;
                      if (!srcImage._isSVG) {
                        return;
                      }
                      if (srcImage._svgAttributesComputationCompleted) {
                        this._rotate90SourceProperties(srcImage, dstImage, n);
                        this._markAsDirty();
                      } else {
                        srcImage.onSVGAttributesComputedObservable.addOnce(function() {
                          _this._rotate90SourceProperties(srcImage, dstImage, n);
                          _this._markAsDirty();
                        });
                      }
                    };
                    Image2.prototype._rotate90SourceProperties = function(srcImage, dstImage, n) {
                      var _a, _b;
                      var srcLeft = srcImage.sourceLeft, srcTop = srcImage.sourceTop, srcWidth = srcImage.domImage.width, srcHeight = srcImage.domImage.height;
                      var dstLeft = srcLeft, dstTop = srcTop, dstWidth = srcImage.sourceWidth, dstHeight = srcImage.sourceHeight;
                      if (n != 0) {
                        var mult = n < 0 ? -1 : 1;
                        n = n % 4;
                        for (var i = 0; i < Math.abs(n); ++i) {
                          dstLeft = -(srcTop - srcHeight / 2) * mult + srcHeight / 2;
                          dstTop = (srcLeft - srcWidth / 2) * mult + srcWidth / 2;
                          _a = [dstHeight, dstWidth], dstWidth = _a[0], dstHeight = _a[1];
                          if (n < 0) {
                            dstTop -= dstHeight;
                          } else {
                            dstLeft -= dstWidth;
                          }
                          srcLeft = dstLeft;
                          srcTop = dstTop;
                          _b = [srcHeight, srcWidth], srcWidth = _b[0], srcHeight = _b[1];
                        }
                      }
                      dstImage.sourceLeft = dstLeft;
                      dstImage.sourceTop = dstTop;
                      dstImage.sourceWidth = dstWidth;
                      dstImage.sourceHeight = dstHeight;
                    };
                    Image2.prototype._extractNinePatchSliceDataFromImage = function() {
                      var _a, _b;
                      var width = this._domImage.width;
                      var height = this._domImage.height;
                      if (!this._workingCanvas) {
                        var engine = ((_b = (_a = this._host) === null || _a === void 0 ? void 0 : _a.getScene()) === null || _b === void 0 ? void 0 : _b.getEngine()) || core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.EngineStore.LastCreatedEngine;
                        if (!engine) {
                          throw new Error("Invalid engine. Unable to create a canvas.");
                        }
                        this._workingCanvas = engine.createCanvas(width, height);
                      }
                      var canvas = this._workingCanvas;
                      var context = canvas.getContext("2d");
                      context.drawImage(this._domImage, 0, 0, width, height);
                      var imageData = context.getImageData(0, 0, width, height);
                      this._sliceLeft = -1;
                      this._sliceRight = -1;
                      for (var x = 0; x < width; x++) {
                        var alpha = imageData.data[x * 4 + 3];
                        if (alpha > 127 && this._sliceLeft === -1) {
                          this._sliceLeft = x;
                          continue;
                        }
                        if (alpha < 127 && this._sliceLeft > -1) {
                          this._sliceRight = x;
                          break;
                        }
                      }
                      this._sliceTop = -1;
                      this._sliceBottom = -1;
                      for (var y = 0; y < height; y++) {
                        var alpha = imageData.data[y * width * 4 + 3];
                        if (alpha > 127 && this._sliceTop === -1) {
                          this._sliceTop = y;
                          continue;
                        }
                        if (alpha < 127 && this._sliceTop > -1) {
                          this._sliceBottom = y;
                          break;
                        }
                      }
                    };
                    Object.defineProperty(Image2.prototype, "domImage", {
                      get: function() {
                        return this._domImage;
                      },
                      /**
                       * Gets or sets the internal DOM image used to render the control
                       */
                      set: function(value) {
                        var _this = this;
                        this._domImage = value;
                        this._loaded = false;
                        this._imageDataCache.data = null;
                        if (this._domImage.width) {
                          this._onImageLoaded();
                        } else {
                          this._domImage.onload = function() {
                            _this._onImageLoaded();
                          };
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Image2.prototype._onImageLoaded = function() {
                      this._imageDataCache.data = null;
                      this._imageWidth = this._domImage.width;
                      this._imageHeight = this._domImage.height;
                      this._loaded = true;
                      if (this._populateNinePatchSlicesFromImage) {
                        this._extractNinePatchSliceDataFromImage();
                      }
                      if (this._autoScale) {
                        this.synchronizeSizeWithContent();
                      }
                      this.onImageLoadedObservable.notifyObservers(this);
                      this._markAsDirty();
                    };
                    Object.defineProperty(Image2.prototype, "source", {
                      /**
                       * Gets the image source url
                       */
                      get: function() {
                        return this._source;
                      },
                      /**
                       * Gets or sets image source url
                       */
                      set: function(value) {
                        var _this = this;
                        var _a, _b;
                        if (this._source === value) {
                          return;
                        }
                        this._removeCacheUsage(this._source);
                        this._loaded = false;
                        this._source = value;
                        this._imageDataCache.data = null;
                        if (value) {
                          value = this._svgCheck(value);
                        }
                        var engine = ((_b = (_a = this._host) === null || _a === void 0 ? void 0 : _a.getScene()) === null || _b === void 0 ? void 0 : _b.getEngine()) || core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.EngineStore.LastCreatedEngine;
                        if (!engine) {
                          throw new Error("Invalid engine. Unable to create a canvas.");
                        }
                        if (value && Image2.SourceImgCache.has(value)) {
                          var cachedData = Image2.SourceImgCache.get(value);
                          this._domImage = cachedData.img;
                          cachedData.timesUsed += 1;
                          if (cachedData.loaded) {
                            this._onImageLoaded();
                          } else {
                            cachedData.waitingForLoadCallback.push(this._onImageLoaded.bind(this));
                          }
                          return;
                        }
                        this._domImage = engine.createCanvasImage();
                        if (value) {
                          Image2.SourceImgCache.set(value, { img: this._domImage, timesUsed: 1, loaded: false, waitingForLoadCallback: [this._onImageLoaded.bind(this)] });
                        }
                        this._domImage.onload = function() {
                          if (value) {
                            var cachedData2 = Image2.SourceImgCache.get(value);
                            if (cachedData2) {
                              cachedData2.loaded = true;
                              for (var _i = 0, _a2 = cachedData2.waitingForLoadCallback; _i < _a2.length; _i++) {
                                var waitingCallback = _a2[_i];
                                waitingCallback();
                              }
                              cachedData2.waitingForLoadCallback.length = 0;
                              return;
                            }
                          }
                          _this._onImageLoaded();
                        };
                        if (value) {
                          core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Tools.SetCorsBehavior(value, this._domImage);
                          core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Tools.SetReferrerPolicyBehavior(this.referrerPolicy, this._domImage);
                          this._domImage.src = value;
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Image2.ResetImageCache = function() {
                      Image2.SourceImgCache.clear();
                    };
                    Image2.prototype._removeCacheUsage = function(source) {
                      var value = source && Image2.SourceImgCache.get(source);
                      if (value) {
                        value.timesUsed -= 1;
                        if (value.timesUsed === 0) {
                          Image2.SourceImgCache.delete(source);
                        }
                      }
                    };
                    Image2.prototype._svgCheck = function(value) {
                      var _this = this;
                      if (window.SVGSVGElement && value.search(/.svg#/gi) !== -1 && value.indexOf("#") === value.lastIndexOf("#")) {
                        this._isSVG = true;
                        var svgsrc_1 = value.split("#")[0];
                        var elemid_1 = value.split("#")[1];
                        var svgExist_1 = document.body.querySelector('object[data="' + svgsrc_1 + '"]');
                        if (svgExist_1) {
                          var svgDoc = svgExist_1.contentDocument;
                          if (svgDoc && svgDoc.documentElement) {
                            var vb = svgDoc.documentElement.getAttribute("viewBox");
                            var docwidth = Number(svgDoc.documentElement.getAttribute("width"));
                            var docheight = Number(svgDoc.documentElement.getAttribute("height"));
                            var elem = svgDoc.getElementById(elemid_1);
                            if (elem && vb && docwidth && docheight) {
                              this._getSVGAttribs(svgExist_1, elemid_1);
                              return value;
                            }
                          }
                          svgExist_1.addEventListener("load", function() {
                            _this._getSVGAttribs(svgExist_1, elemid_1);
                          });
                        } else {
                          var svgImage = document.createElement("object");
                          svgImage.data = svgsrc_1;
                          svgImage.type = "image/svg+xml";
                          svgImage.width = "0%";
                          svgImage.height = "0%";
                          document.body.appendChild(svgImage);
                          svgImage.onload = function() {
                            var svgobj = document.body.querySelector('object[data="' + svgsrc_1 + '"]');
                            if (svgobj) {
                              _this._getSVGAttribs(svgobj, elemid_1);
                            }
                          };
                        }
                        return svgsrc_1;
                      } else {
                        return value;
                      }
                    };
                    Image2.prototype._getSVGAttribs = function(svgsrc, elemid) {
                      var svgDoc = svgsrc.contentDocument;
                      if (svgDoc && svgDoc.documentElement) {
                        var vb = svgDoc.documentElement.getAttribute("viewBox");
                        var docwidth = Number(svgDoc.documentElement.getAttribute("width"));
                        var docheight = Number(svgDoc.documentElement.getAttribute("height"));
                        var elem = svgDoc.getElementById(elemid);
                        if (vb && docwidth && docheight && elem) {
                          var vb_width = Number(vb.split(" ")[2]);
                          var vb_height = Number(vb.split(" ")[3]);
                          var elem_bbox = elem.getBBox();
                          var elem_matrix_a = 1;
                          var elem_matrix_d = 1;
                          var elem_matrix_e = 0;
                          var elem_matrix_f = 0;
                          var mainMatrix = elem.transform.baseVal.consolidate().matrix;
                          if (elem.transform && elem.transform.baseVal.consolidate()) {
                            elem_matrix_a = mainMatrix.a;
                            elem_matrix_d = mainMatrix.d;
                            elem_matrix_e = mainMatrix.e;
                            elem_matrix_f = mainMatrix.f;
                          }
                          this.sourceLeft = (elem_matrix_a * elem_bbox.x + elem_matrix_e) * docwidth / vb_width;
                          this.sourceTop = (elem_matrix_d * elem_bbox.y + elem_matrix_f) * docheight / vb_height;
                          this.sourceWidth = elem_bbox.width * elem_matrix_a * (docwidth / vb_width);
                          this.sourceHeight = elem_bbox.height * elem_matrix_d * (docheight / vb_height);
                          this._svgAttributesComputationCompleted = true;
                          this.onSVGAttributesComputedObservable.notifyObservers(this);
                        }
                      }
                    };
                    Object.defineProperty(Image2.prototype, "cellWidth", {
                      /**
                       * Gets or sets the cell width to use when animation sheet is enabled
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image
                       */
                      get: function() {
                        return this._cellWidth;
                      },
                      set: function(value) {
                        if (this._cellWidth === value) {
                          return;
                        }
                        this._cellWidth = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Image2.prototype, "cellHeight", {
                      /**
                       * Gets or sets the cell height to use when animation sheet is enabled
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image
                       */
                      get: function() {
                        return this._cellHeight;
                      },
                      set: function(value) {
                        if (this._cellHeight === value) {
                          return;
                        }
                        this._cellHeight = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Image2.prototype, "cellId", {
                      /**
                       * Gets or sets the cell id to use (this will turn on the animation sheet mode)
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image
                       */
                      get: function() {
                        return this._cellId;
                      },
                      set: function(value) {
                        if (this._cellId === value) {
                          return;
                        }
                        this._cellId = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Image2.prototype.contains = function(x, y) {
                      if (!_super.prototype.contains.call(this, x, y)) {
                        return false;
                      }
                      if (!this._detectPointerOnOpaqueOnly || !this._workingCanvas) {
                        return true;
                      }
                      var width = this._currentMeasure.width | 0;
                      var height = this._currentMeasure.height | 0;
                      var key = width + "_" + height;
                      var imageData = this._imageDataCache.data;
                      if (!imageData || this._imageDataCache.key !== key) {
                        var canvas = this._workingCanvas;
                        var context_1 = canvas.getContext("2d");
                        this._imageDataCache.data = imageData = context_1.getImageData(0, 0, width, height).data;
                        this._imageDataCache.key = key;
                      }
                      x = x - this._currentMeasure.left | 0;
                      y = y - this._currentMeasure.top | 0;
                      var pickedPixel = imageData[(x + y * width) * 4 + 3];
                      return pickedPixel > 0;
                    };
                    Image2.prototype._getTypeName = function() {
                      return "Image";
                    };
                    Image2.prototype.synchronizeSizeWithContent = function() {
                      if (!this._loaded) {
                        return;
                      }
                      this.width = this._domImage.width + "px";
                      this.height = this._domImage.height + "px";
                    };
                    Image2.prototype._processMeasures = function(parentMeasure, context) {
                      if (this._loaded) {
                        switch (this._stretch) {
                          case Image2.STRETCH_NONE:
                            break;
                          case Image2.STRETCH_FILL:
                            break;
                          case Image2.STRETCH_UNIFORM:
                            break;
                          case Image2.STRETCH_NINE_PATCH:
                            break;
                          case Image2.STRETCH_EXTEND:
                            if (this._autoScale) {
                              this.synchronizeSizeWithContent();
                            }
                            if (this.parent && this.parent.parent) {
                              this.parent.adaptWidthToChildren = true;
                              this.parent.adaptHeightToChildren = true;
                            }
                            break;
                        }
                      }
                      _super.prototype._processMeasures.call(this, parentMeasure, context);
                    };
                    Image2.prototype._prepareWorkingCanvasForOpaqueDetection = function() {
                      var _a, _b;
                      if (!this._detectPointerOnOpaqueOnly) {
                        return;
                      }
                      var width = this._currentMeasure.width;
                      var height = this._currentMeasure.height;
                      if (!this._workingCanvas) {
                        var engine = ((_b = (_a = this._host) === null || _a === void 0 ? void 0 : _a.getScene()) === null || _b === void 0 ? void 0 : _b.getEngine()) || core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.EngineStore.LastCreatedEngine;
                        if (!engine) {
                          throw new Error("Invalid engine. Unable to create a canvas.");
                        }
                        this._workingCanvas = engine.createCanvas(width, height);
                      }
                      var canvas = this._workingCanvas;
                      var context = canvas.getContext("2d");
                      context.clearRect(0, 0, width, height);
                    };
                    Image2.prototype._drawImage = function(context, sx, sy, sw, sh, tx, ty, tw, th) {
                      context.drawImage(this._domImage, sx, sy, sw, sh, tx, ty, tw, th);
                      if (!this._detectPointerOnOpaqueOnly) {
                        return;
                      }
                      var canvas = this._workingCanvas;
                      context = canvas.getContext("2d");
                      context.drawImage(this._domImage, sx, sy, sw, sh, tx - this._currentMeasure.left, ty - this._currentMeasure.top, tw, th);
                    };
                    Image2.prototype._draw = function(context) {
                      context.save();
                      if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                        context.shadowColor = this.shadowColor;
                        context.shadowBlur = this.shadowBlur;
                        context.shadowOffsetX = this.shadowOffsetX;
                        context.shadowOffsetY = this.shadowOffsetY;
                      }
                      var x, y, width, height;
                      if (this.cellId == -1) {
                        x = this._sourceLeft;
                        y = this._sourceTop;
                        width = this._sourceWidth ? this._sourceWidth : this._imageWidth;
                        height = this._sourceHeight ? this._sourceHeight : this._imageHeight;
                      } else {
                        var rowCount = this._domImage.naturalWidth / this.cellWidth;
                        var column = this.cellId / rowCount >> 0;
                        var row = this.cellId % rowCount;
                        x = this.cellWidth * row;
                        y = this.cellHeight * column;
                        width = this.cellWidth;
                        height = this.cellHeight;
                      }
                      this._prepareWorkingCanvasForOpaqueDetection();
                      this._applyStates(context);
                      if (this._loaded) {
                        switch (this._stretch) {
                          case Image2.STRETCH_NONE:
                            this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
                            break;
                          case Image2.STRETCH_FILL:
                            this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
                            break;
                          case Image2.STRETCH_UNIFORM: {
                            var hRatio = this._currentMeasure.width / width;
                            var vRatio = this._currentMeasure.height / height;
                            var ratio = Math.min(hRatio, vRatio);
                            var centerX = (this._currentMeasure.width - width * ratio) / 2;
                            var centerY = (this._currentMeasure.height - height * ratio) / 2;
                            this._drawImage(context, x, y, width, height, this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);
                            break;
                          }
                          case Image2.STRETCH_EXTEND:
                            this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
                            break;
                          case Image2.STRETCH_NINE_PATCH:
                            this._renderNinePatch(context);
                            break;
                        }
                      }
                      context.restore();
                    };
                    Image2.prototype._renderNinePatch = function(context) {
                      var leftWidth = this._sliceLeft;
                      var topHeight = this._sliceTop;
                      var bottomHeight = this._imageHeight - this._sliceBottom;
                      var rightWidth = this._imageWidth - this._sliceRight;
                      var centerWidth = this._sliceRight - this._sliceLeft;
                      var centerHeight = this._sliceBottom - this._sliceTop;
                      var targetCenterWidth = this._currentMeasure.width - rightWidth - leftWidth + 2;
                      var targetCenterHeight = this._currentMeasure.height - bottomHeight - topHeight + 2;
                      var centerLeftOffset = this._currentMeasure.left + leftWidth - 1;
                      var centerTopOffset = this._currentMeasure.top + topHeight - 1;
                      var rightOffset = this._currentMeasure.left + this._currentMeasure.width - rightWidth;
                      var bottomOffset = this._currentMeasure.top + this._currentMeasure.height - bottomHeight;
                      this._drawImage(context, 0, 0, leftWidth, topHeight, this._currentMeasure.left, this._currentMeasure.top, leftWidth, topHeight);
                      context.clearRect(centerLeftOffset, this._currentMeasure.top, targetCenterWidth, topHeight);
                      this._drawImage(context, this._sliceLeft, 0, centerWidth, topHeight, centerLeftOffset, this._currentMeasure.top, targetCenterWidth, topHeight);
                      context.clearRect(rightOffset, this._currentMeasure.top, rightWidth, topHeight);
                      this._drawImage(context, this._sliceRight, 0, rightWidth, topHeight, rightOffset, this._currentMeasure.top, rightWidth, topHeight);
                      context.clearRect(this._currentMeasure.left, centerTopOffset, leftWidth, targetCenterHeight);
                      this._drawImage(context, 0, this._sliceTop, leftWidth, centerHeight, this._currentMeasure.left, centerTopOffset, leftWidth, targetCenterHeight);
                      context.clearRect(centerLeftOffset, centerTopOffset, targetCenterWidth, targetCenterHeight);
                      this._drawImage(context, this._sliceLeft, this._sliceTop, centerWidth, centerHeight, centerLeftOffset, centerTopOffset, targetCenterWidth, targetCenterHeight);
                      context.clearRect(rightOffset, centerTopOffset, rightWidth, targetCenterHeight);
                      this._drawImage(context, this._sliceRight, this._sliceTop, rightWidth, centerHeight, rightOffset, centerTopOffset, rightWidth, targetCenterHeight);
                      context.clearRect(this._currentMeasure.left, bottomOffset, leftWidth, bottomHeight);
                      this._drawImage(context, 0, this._sliceBottom, leftWidth, bottomHeight, this._currentMeasure.left, bottomOffset, leftWidth, bottomHeight);
                      context.clearRect(centerLeftOffset, bottomOffset, targetCenterWidth, bottomHeight);
                      this._drawImage(context, this.sliceLeft, this._sliceBottom, centerWidth, bottomHeight, centerLeftOffset, bottomOffset, targetCenterWidth, bottomHeight);
                      context.clearRect(rightOffset, bottomOffset, rightWidth, bottomHeight);
                      this._drawImage(context, this._sliceRight, this._sliceBottom, rightWidth, bottomHeight, rightOffset, bottomOffset, rightWidth, bottomHeight);
                    };
                    Image2.prototype.dispose = function() {
                      _super.prototype.dispose.call(this);
                      this.onImageLoadedObservable.clear();
                      this.onSVGAttributesComputedObservable.clear();
                      this._removeCacheUsage(this._source);
                    };
                    Image2.SourceImgCache = /* @__PURE__ */ new Map();
                    Image2.STRETCH_NONE = 0;
                    Image2.STRETCH_FILL = 1;
                    Image2.STRETCH_UNIFORM = 2;
                    Image2.STRETCH_EXTEND = 3;
                    Image2.STRETCH_NINE_PATCH = 4;
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Image2.prototype, "detectPointerOnOpaqueOnly", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Image2.prototype, "sliceLeft", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Image2.prototype, "sliceRight", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Image2.prototype, "sliceTop", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Image2.prototype, "sliceBottom", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Image2.prototype, "sourceLeft", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Image2.prototype, "sourceTop", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Image2.prototype, "sourceWidth", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Image2.prototype, "sourceHeight", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Image2.prototype, "populateNinePatchSlicesFromImage", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Image2.prototype, "autoScale", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Image2.prototype, "stretch", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Image2.prototype, "source", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Image2.prototype, "cellWidth", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Image2.prototype, "cellHeight", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Image2.prototype, "cellId", null);
                    return Image2;
                  }(_control__WEBPACK_IMPORTED_MODULE_2__.Control)
                );
                (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.Image", Image);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/index.js": (
              /*!**************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/index.js ***!
                \**************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "BaseGradient": () => (
                    /* reexport safe */
                    _gradient_BaseGradient__WEBPACK_IMPORTED_MODULE_31__.BaseGradient
                  ),
                  /* harmony export */
                  "BaseSlider": () => (
                    /* reexport safe */
                    _sliders_baseSlider__WEBPACK_IMPORTED_MODULE_25__.BaseSlider
                  ),
                  /* harmony export */
                  "Button": () => (
                    /* reexport safe */
                    _button__WEBPACK_IMPORTED_MODULE_0__.Button
                  ),
                  /* harmony export */
                  "Checkbox": () => (
                    /* reexport safe */
                    _checkbox__WEBPACK_IMPORTED_MODULE_1__.Checkbox
                  ),
                  /* harmony export */
                  "CheckboxGroup": () => (
                    /* reexport safe */
                    _selector__WEBPACK_IMPORTED_MODULE_17__.CheckboxGroup
                  ),
                  /* harmony export */
                  "ColorPicker": () => (
                    /* reexport safe */
                    _colorpicker__WEBPACK_IMPORTED_MODULE_2__.ColorPicker
                  ),
                  /* harmony export */
                  "Container": () => (
                    /* reexport safe */
                    _container__WEBPACK_IMPORTED_MODULE_3__.Container
                  ),
                  /* harmony export */
                  "Control": () => (
                    /* reexport safe */
                    _control__WEBPACK_IMPORTED_MODULE_4__.Control
                  ),
                  /* harmony export */
                  "DisplayGrid": () => (
                    /* reexport safe */
                    _displayGrid__WEBPACK_IMPORTED_MODULE_24__.DisplayGrid
                  ),
                  /* harmony export */
                  "Ellipse": () => (
                    /* reexport safe */
                    _ellipse__WEBPACK_IMPORTED_MODULE_5__.Ellipse
                  ),
                  /* harmony export */
                  "FocusableButton": () => (
                    /* reexport safe */
                    _focusableButton__WEBPACK_IMPORTED_MODULE_6__.FocusableButton
                  ),
                  /* harmony export */
                  "Grid": () => (
                    /* reexport safe */
                    _grid__WEBPACK_IMPORTED_MODULE_8__.Grid
                  ),
                  /* harmony export */
                  "Image": () => (
                    /* reexport safe */
                    _image__WEBPACK_IMPORTED_MODULE_9__.Image
                  ),
                  /* harmony export */
                  "ImageBasedSlider": () => (
                    /* reexport safe */
                    _sliders_imageBasedSlider__WEBPACK_IMPORTED_MODULE_27__.ImageBasedSlider
                  ),
                  /* harmony export */
                  "ImageScrollBar": () => (
                    /* reexport safe */
                    _sliders_imageScrollBar__WEBPACK_IMPORTED_MODULE_29__.ImageScrollBar
                  ),
                  /* harmony export */
                  "InputPassword": () => (
                    /* reexport safe */
                    _inputPassword__WEBPACK_IMPORTED_MODULE_12__.InputPassword
                  ),
                  /* harmony export */
                  "InputText": () => (
                    /* reexport safe */
                    _inputText__WEBPACK_IMPORTED_MODULE_10__.InputText
                  ),
                  /* harmony export */
                  "InputTextArea": () => (
                    /* reexport safe */
                    _inputTextArea__WEBPACK_IMPORTED_MODULE_11__.InputTextArea
                  ),
                  /* harmony export */
                  "KeyPropertySet": () => (
                    /* reexport safe */
                    _virtualKeyboard__WEBPACK_IMPORTED_MODULE_22__.KeyPropertySet
                  ),
                  /* harmony export */
                  "Line": () => (
                    /* reexport safe */
                    _line__WEBPACK_IMPORTED_MODULE_13__.Line
                  ),
                  /* harmony export */
                  "LinearGradient": () => (
                    /* reexport safe */
                    _gradient_LinearGradient__WEBPACK_IMPORTED_MODULE_32__.LinearGradient
                  ),
                  /* harmony export */
                  "MultiLine": () => (
                    /* reexport safe */
                    _multiLine__WEBPACK_IMPORTED_MODULE_14__.MultiLine
                  ),
                  /* harmony export */
                  "RadialGradient": () => (
                    /* reexport safe */
                    _gradient_RadialGradient__WEBPACK_IMPORTED_MODULE_33__.RadialGradient
                  ),
                  /* harmony export */
                  "RadioButton": () => (
                    /* reexport safe */
                    _radioButton__WEBPACK_IMPORTED_MODULE_15__.RadioButton
                  ),
                  /* harmony export */
                  "RadioGroup": () => (
                    /* reexport safe */
                    _selector__WEBPACK_IMPORTED_MODULE_17__.RadioGroup
                  ),
                  /* harmony export */
                  "Rectangle": () => (
                    /* reexport safe */
                    _rectangle__WEBPACK_IMPORTED_MODULE_23__.Rectangle
                  ),
                  /* harmony export */
                  "ScrollBar": () => (
                    /* reexport safe */
                    _sliders_scrollBar__WEBPACK_IMPORTED_MODULE_28__.ScrollBar
                  ),
                  /* harmony export */
                  "ScrollViewer": () => (
                    /* reexport safe */
                    _scrollViewers_scrollViewer__WEBPACK_IMPORTED_MODULE_18__.ScrollViewer
                  ),
                  /* harmony export */
                  "SelectionPanel": () => (
                    /* reexport safe */
                    _selector__WEBPACK_IMPORTED_MODULE_17__.SelectionPanel
                  ),
                  /* harmony export */
                  "SelectorGroup": () => (
                    /* reexport safe */
                    _selector__WEBPACK_IMPORTED_MODULE_17__.SelectorGroup
                  ),
                  /* harmony export */
                  "Slider": () => (
                    /* reexport safe */
                    _sliders_slider__WEBPACK_IMPORTED_MODULE_26__.Slider
                  ),
                  /* harmony export */
                  "SliderGroup": () => (
                    /* reexport safe */
                    _selector__WEBPACK_IMPORTED_MODULE_17__.SliderGroup
                  ),
                  /* harmony export */
                  "StackPanel": () => (
                    /* reexport safe */
                    _stackPanel__WEBPACK_IMPORTED_MODULE_16__.StackPanel
                  ),
                  /* harmony export */
                  "TextBlock": () => (
                    /* reexport safe */
                    _textBlock__WEBPACK_IMPORTED_MODULE_19__.TextBlock
                  ),
                  /* harmony export */
                  "TextWrapper": () => (
                    /* reexport safe */
                    _textWrapper__WEBPACK_IMPORTED_MODULE_20__.TextWrapper
                  ),
                  /* harmony export */
                  "TextWrapping": () => (
                    /* reexport safe */
                    _textBlock__WEBPACK_IMPORTED_MODULE_19__.TextWrapping
                  ),
                  /* harmony export */
                  "ToggleButton": () => (
                    /* reexport safe */
                    _toggleButton__WEBPACK_IMPORTED_MODULE_21__.ToggleButton
                  ),
                  /* harmony export */
                  "VirtualKeyboard": () => (
                    /* reexport safe */
                    _virtualKeyboard__WEBPACK_IMPORTED_MODULE_22__.VirtualKeyboard
                  ),
                  /* harmony export */
                  "name": () => (
                    /* reexport safe */
                    _statics__WEBPACK_IMPORTED_MODULE_30__.name
                  )
                  /* harmony export */
                });
                var _button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! ./button */
                  "../../../lts/gui/dist/2D/controls/button.js"
                );
                var _checkbox__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./checkbox */
                  "../../../lts/gui/dist/2D/controls/checkbox.js"
                );
                var _colorpicker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./colorpicker */
                  "../../../lts/gui/dist/2D/controls/colorpicker.js"
                );
                var _container__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./container */
                  "../../../lts/gui/dist/2D/controls/container.js"
                );
                var _control__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
                  /*! ./control */
                  "../../../lts/gui/dist/2D/controls/control.js"
                );
                var _ellipse__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
                  /*! ./ellipse */
                  "../../../lts/gui/dist/2D/controls/ellipse.js"
                );
                var _focusableButton__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
                  /*! ./focusableButton */
                  "../../../lts/gui/dist/2D/controls/focusableButton.js"
                );
                var _focusableControl__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
                  /*! ./focusableControl */
                  "../../../lts/gui/dist/2D/controls/focusableControl.js"
                );
                var _grid__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__2(
                  /*! ./grid */
                  "../../../lts/gui/dist/2D/controls/grid.js"
                );
                var _image__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__2(
                  /*! ./image */
                  "../../../lts/gui/dist/2D/controls/image.js"
                );
                var _inputText__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__2(
                  /*! ./inputText */
                  "../../../lts/gui/dist/2D/controls/inputText.js"
                );
                var _inputTextArea__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__2(
                  /*! ./inputTextArea */
                  "../../../lts/gui/dist/2D/controls/inputTextArea.js"
                );
                var _inputPassword__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__2(
                  /*! ./inputPassword */
                  "../../../lts/gui/dist/2D/controls/inputPassword.js"
                );
                var _line__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__2(
                  /*! ./line */
                  "../../../lts/gui/dist/2D/controls/line.js"
                );
                var _multiLine__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__2(
                  /*! ./multiLine */
                  "../../../lts/gui/dist/2D/controls/multiLine.js"
                );
                var _radioButton__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__2(
                  /*! ./radioButton */
                  "../../../lts/gui/dist/2D/controls/radioButton.js"
                );
                var _stackPanel__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__2(
                  /*! ./stackPanel */
                  "../../../lts/gui/dist/2D/controls/stackPanel.js"
                );
                var _selector__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__2(
                  /*! ./selector */
                  "../../../lts/gui/dist/2D/controls/selector.js"
                );
                var _scrollViewers_scrollViewer__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__2(
                  /*! ./scrollViewers/scrollViewer */
                  "../../../lts/gui/dist/2D/controls/scrollViewers/scrollViewer.js"
                );
                var _textBlock__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__2(
                  /*! ./textBlock */
                  "../../../lts/gui/dist/2D/controls/textBlock.js"
                );
                var _textWrapper__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__2(
                  /*! ./textWrapper */
                  "../../../lts/gui/dist/2D/controls/textWrapper.js"
                );
                var _toggleButton__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__2(
                  /*! ./toggleButton */
                  "../../../lts/gui/dist/2D/controls/toggleButton.js"
                );
                var _virtualKeyboard__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__2(
                  /*! ./virtualKeyboard */
                  "../../../lts/gui/dist/2D/controls/virtualKeyboard.js"
                );
                var _rectangle__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__2(
                  /*! ./rectangle */
                  "../../../lts/gui/dist/2D/controls/rectangle.js"
                );
                var _displayGrid__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__2(
                  /*! ./displayGrid */
                  "../../../lts/gui/dist/2D/controls/displayGrid.js"
                );
                var _sliders_baseSlider__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__2(
                  /*! ./sliders/baseSlider */
                  "../../../lts/gui/dist/2D/controls/sliders/baseSlider.js"
                );
                var _sliders_slider__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__2(
                  /*! ./sliders/slider */
                  "../../../lts/gui/dist/2D/controls/sliders/slider.js"
                );
                var _sliders_imageBasedSlider__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__2(
                  /*! ./sliders/imageBasedSlider */
                  "../../../lts/gui/dist/2D/controls/sliders/imageBasedSlider.js"
                );
                var _sliders_scrollBar__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__2(
                  /*! ./sliders/scrollBar */
                  "../../../lts/gui/dist/2D/controls/sliders/scrollBar.js"
                );
                var _sliders_imageScrollBar__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__2(
                  /*! ./sliders/imageScrollBar */
                  "../../../lts/gui/dist/2D/controls/sliders/imageScrollBar.js"
                );
                var _statics__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__2(
                  /*! ./statics */
                  "../../../lts/gui/dist/2D/controls/statics.js"
                );
                var _gradient_BaseGradient__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__2(
                  /*! ./gradient/BaseGradient */
                  "../../../lts/gui/dist/2D/controls/gradient/BaseGradient.js"
                );
                var _gradient_LinearGradient__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__2(
                  /*! ./gradient/LinearGradient */
                  "../../../lts/gui/dist/2D/controls/gradient/LinearGradient.js"
                );
                var _gradient_RadialGradient__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__2(
                  /*! ./gradient/RadialGradient */
                  "../../../lts/gui/dist/2D/controls/gradient/RadialGradient.js"
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/inputPassword.js": (
              /*!**********************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/inputPassword.js ***!
                \**********************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "InputPassword": () => (
                    /* binding */
                    InputPassword
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var _inputText__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./inputText */
                  "../../../lts/gui/dist/2D/controls/inputText.js"
                );
                var core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! core/Misc/typeStore */
                  "core/Misc/perfCounter"
                );
                var core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2___default = __webpack_require__2.n(core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__);
                var _textWrapper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./textWrapper */
                  "../../../lts/gui/dist/2D/controls/textWrapper.js"
                );
                var InputPassword = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(InputPassword2, _super);
                    function InputPassword2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    InputPassword2.prototype._getTypeName = function() {
                      return "InputPassword";
                    };
                    InputPassword2.prototype._beforeRenderText = function(textWrapper) {
                      var pwdTextWrapper = new _textWrapper__WEBPACK_IMPORTED_MODULE_3__.TextWrapper();
                      var txt = "";
                      for (var i = 0; i < textWrapper.length; i++) {
                        txt += "•";
                      }
                      pwdTextWrapper.text = txt;
                      return pwdTextWrapper;
                    };
                    return InputPassword2;
                  }(_inputText__WEBPACK_IMPORTED_MODULE_1__.InputText)
                );
                (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.RegisterClass)("BABYLON.GUI.InputPassword", InputPassword);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/inputText.js": (
              /*!******************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/inputText.js ***!
                \******************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "InputText": () => (
                    /* binding */
                    InputText
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Misc/decorators */
                  "core/Misc/perfCounter"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__);
                var _control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./control */
                  "../../../lts/gui/dist/2D/controls/control.js"
                );
                var _valueAndUnit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ../valueAndUnit */
                  "../../../lts/gui/dist/2D/valueAndUnit.js"
                );
                var _textWrapper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
                  /*! ./textWrapper */
                  "../../../lts/gui/dist/2D/controls/textWrapper.js"
                );
                var InputText = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(InputText2, _super);
                    function InputText2(name, text) {
                      if (text === void 0) {
                        text = "";
                      }
                      var _this = _super.call(this, name) || this;
                      _this.name = name;
                      _this._placeholderText = "";
                      _this._background = "#222222";
                      _this._focusedBackground = "#000000";
                      _this._focusedColor = "white";
                      _this._placeholderColor = "gray";
                      _this._thickness = 1;
                      _this._margin = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_3__.ValueAndUnit(10, _valueAndUnit__WEBPACK_IMPORTED_MODULE_3__.ValueAndUnit.UNITMODE_PIXEL);
                      _this._autoStretchWidth = true;
                      _this._maxWidth = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_3__.ValueAndUnit(1, _valueAndUnit__WEBPACK_IMPORTED_MODULE_3__.ValueAndUnit.UNITMODE_PERCENTAGE, false);
                      _this._isFocused = false;
                      _this._blinkIsEven = false;
                      _this._cursorOffset = 0;
                      _this._deadKey = false;
                      _this._addKey = true;
                      _this._currentKey = "";
                      _this._isTextHighlightOn = false;
                      _this._textHighlightColor = "#d5e0ff";
                      _this._highligherOpacity = 0.4;
                      _this._highlightedText = "";
                      _this._startHighlightIndex = 0;
                      _this._endHighlightIndex = 0;
                      _this._cursorIndex = -1;
                      _this._onFocusSelectAll = false;
                      _this._isPointerDown = false;
                      _this.promptMessage = "Please enter text:";
                      _this.disableMobilePrompt = false;
                      _this.onTextChangedObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this.onBeforeKeyAddObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this.onFocusObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this.onBlurObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this.onTextHighlightObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this.onTextCopyObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this.onTextCutObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this.onTextPasteObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this.onKeyboardEventProcessedObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this.text = text;
                      _this.isPointerBlocker = true;
                      return _this;
                    }
                    Object.defineProperty(InputText2.prototype, "maxWidth", {
                      /** Gets or sets the maximum width allowed by the control */
                      get: function() {
                        return this._maxWidth.toString(this._host);
                      },
                      set: function(value) {
                        if (this._maxWidth.toString(this._host) === value) {
                          return;
                        }
                        if (this._maxWidth.fromString(value)) {
                          this._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(InputText2.prototype, "maxWidthInPixels", {
                      /** Gets the maximum width allowed by the control in pixels */
                      get: function() {
                        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(InputText2.prototype, "highligherOpacity", {
                      /** Gets or sets the text highlighter transparency; default: 0.4 */
                      get: function() {
                        return this._highligherOpacity;
                      },
                      set: function(value) {
                        if (this._highligherOpacity === value) {
                          return;
                        }
                        this._highligherOpacity = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(InputText2.prototype, "onFocusSelectAll", {
                      /** Gets or sets a boolean indicating whether to select complete text by default on input focus */
                      get: function() {
                        return this._onFocusSelectAll;
                      },
                      set: function(value) {
                        if (this._onFocusSelectAll === value) {
                          return;
                        }
                        this._onFocusSelectAll = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(InputText2.prototype, "textHighlightColor", {
                      /** Gets or sets the text hightlight color */
                      get: function() {
                        return this._textHighlightColor;
                      },
                      set: function(value) {
                        if (this._textHighlightColor === value) {
                          return;
                        }
                        this._textHighlightColor = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(InputText2.prototype, "margin", {
                      /** Gets or sets control margin */
                      get: function() {
                        return this._margin.toString(this._host);
                      },
                      set: function(value) {
                        if (this._margin.toString(this._host) === value) {
                          return;
                        }
                        if (this._margin.fromString(value)) {
                          this._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(InputText2.prototype, "marginInPixels", {
                      /** Gets control margin in pixels */
                      get: function() {
                        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(InputText2.prototype, "autoStretchWidth", {
                      /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */
                      get: function() {
                        return this._autoStretchWidth;
                      },
                      set: function(value) {
                        if (this._autoStretchWidth === value) {
                          return;
                        }
                        this._autoStretchWidth = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(InputText2.prototype, "thickness", {
                      /** Gets or sets border thickness */
                      get: function() {
                        return this._thickness;
                      },
                      set: function(value) {
                        if (this._thickness === value) {
                          return;
                        }
                        this._thickness = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(InputText2.prototype, "focusedBackground", {
                      /** Gets or sets the background color when focused */
                      get: function() {
                        return this._focusedBackground;
                      },
                      set: function(value) {
                        if (this._focusedBackground === value) {
                          return;
                        }
                        this._focusedBackground = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(InputText2.prototype, "focusedColor", {
                      /** Gets or sets the background color when focused */
                      get: function() {
                        return this._focusedColor;
                      },
                      set: function(value) {
                        if (this._focusedColor === value) {
                          return;
                        }
                        this._focusedColor = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(InputText2.prototype, "background", {
                      /** Gets or sets the background color */
                      get: function() {
                        return this._background;
                      },
                      set: function(value) {
                        if (this._background === value) {
                          return;
                        }
                        this._background = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(InputText2.prototype, "placeholderColor", {
                      /** Gets or sets the placeholder color */
                      get: function() {
                        return this._placeholderColor;
                      },
                      set: function(value) {
                        if (this._placeholderColor === value) {
                          return;
                        }
                        this._placeholderColor = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(InputText2.prototype, "placeholderText", {
                      /** Gets or sets the text displayed when the control is empty */
                      get: function() {
                        return this._placeholderText;
                      },
                      set: function(value) {
                        if (this._placeholderText === value) {
                          return;
                        }
                        this._placeholderText = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(InputText2.prototype, "deadKey", {
                      /** Gets or sets the dead key. 0 to disable. */
                      get: function() {
                        return this._deadKey;
                      },
                      set: function(flag) {
                        this._deadKey = flag;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(InputText2.prototype, "highlightedText", {
                      /** Gets or sets the highlight text */
                      get: function() {
                        return this._highlightedText;
                      },
                      set: function(text) {
                        if (this._highlightedText === text) {
                          return;
                        }
                        this._highlightedText = text;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(InputText2.prototype, "addKey", {
                      /** Gets or sets if the current key should be added */
                      get: function() {
                        return this._addKey;
                      },
                      set: function(flag) {
                        this._addKey = flag;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(InputText2.prototype, "currentKey", {
                      /** Gets or sets the value of the current key being entered */
                      get: function() {
                        return this._currentKey;
                      },
                      set: function(key) {
                        this._currentKey = key;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(InputText2.prototype, "text", {
                      /** Gets or sets the text displayed in the control */
                      get: function() {
                        return this._textWrapper.text;
                      },
                      set: function(value) {
                        var valueAsString = value.toString();
                        if (!this._textWrapper) {
                          this._textWrapper = new _textWrapper__WEBPACK_IMPORTED_MODULE_4__.TextWrapper();
                        }
                        if (this._textWrapper.text === valueAsString) {
                          return;
                        }
                        this._textWrapper.text = valueAsString;
                        this._textHasChanged();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    InputText2.prototype._textHasChanged = function() {
                      this._markAsDirty();
                      this.onTextChangedObservable.notifyObservers(this);
                    };
                    Object.defineProperty(InputText2.prototype, "width", {
                      /** Gets or sets control width */
                      get: function() {
                        return this._width.toString(this._host);
                      },
                      set: function(value) {
                        if (this._width.toString(this._host) === value) {
                          return;
                        }
                        if (this._width.fromString(value)) {
                          this._markAsDirty();
                        }
                        this.autoStretchWidth = false;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    InputText2.prototype.onBlur = function() {
                      this._isFocused = false;
                      this._scrollLeft = null;
                      this._cursorOffset = 0;
                      clearTimeout(this._blinkTimeout);
                      this._markAsDirty();
                      this.onBlurObservable.notifyObservers(this);
                      this._host.unRegisterClipboardEvents();
                      if (this._onClipboardObserver) {
                        this._host.onClipboardObservable.remove(this._onClipboardObserver);
                      }
                      var scene = this._host.getScene();
                      if (this._onPointerDblTapObserver && scene) {
                        scene.onPointerObservable.remove(this._onPointerDblTapObserver);
                      }
                    };
                    InputText2.prototype.onFocus = function() {
                      var _this = this;
                      if (!this._isEnabled) {
                        return;
                      }
                      this._scrollLeft = null;
                      this._isFocused = true;
                      this._blinkIsEven = false;
                      this._cursorOffset = 0;
                      this._markAsDirty();
                      this.onFocusObservable.notifyObservers(this);
                      if (this._focusedBy === "touch" && !this.disableMobilePrompt) {
                        var value = prompt(this.promptMessage);
                        if (value !== null) {
                          this.text = value;
                        }
                        this._host.focusedControl = null;
                        return;
                      }
                      this._host.registerClipboardEvents();
                      this._onClipboardObserver = this._host.onClipboardObservable.add(function(clipboardInfo) {
                        switch (clipboardInfo.type) {
                          case core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.ClipboardEventTypes.COPY:
                            _this._onCopyText(clipboardInfo.event);
                            _this.onTextCopyObservable.notifyObservers(_this);
                            break;
                          case core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.ClipboardEventTypes.CUT:
                            _this._onCutText(clipboardInfo.event);
                            _this.onTextCutObservable.notifyObservers(_this);
                            break;
                          case core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.ClipboardEventTypes.PASTE:
                            _this._onPasteText(clipboardInfo.event);
                            _this.onTextPasteObservable.notifyObservers(_this);
                            break;
                          default:
                            return;
                        }
                      });
                      var scene = this._host.getScene();
                      if (scene) {
                        this._onPointerDblTapObserver = scene.onPointerObservable.add(function(pointerInfo) {
                          if (!_this._isFocused) {
                            return;
                          }
                          if (pointerInfo.type === core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.PointerEventTypes.POINTERDOUBLETAP) {
                            _this._processDblClick(pointerInfo);
                          }
                        });
                      }
                      if (this._onFocusSelectAll) {
                        this._selectAllText();
                      }
                    };
                    InputText2.prototype.focus = function() {
                      this._host.moveFocusToControl(this);
                    };
                    InputText2.prototype.blur = function() {
                      this._host.focusedControl = null;
                    };
                    InputText2.prototype._getTypeName = function() {
                      return "InputText";
                    };
                    InputText2.prototype.keepsFocusWith = function() {
                      if (!this._connectedVirtualKeyboard) {
                        return null;
                      }
                      return [this._connectedVirtualKeyboard];
                    };
                    InputText2.prototype.processKey = function(keyCode, key, evt) {
                      var _a;
                      if (this.isReadOnly) {
                        return;
                      }
                      if (evt && (evt.ctrlKey || evt.metaKey) && (keyCode === 67 || keyCode === 86 || keyCode === 88)) {
                        return;
                      }
                      if (evt && (evt.ctrlKey || evt.metaKey) && keyCode === 65) {
                        this._selectAllText();
                        evt.preventDefault();
                        return;
                      }
                      switch (keyCode) {
                        case 32:
                          key = " ";
                          break;
                        case 191:
                          if (evt) {
                            evt.preventDefault();
                          }
                          break;
                        case 8:
                          if (this._textWrapper.text && this._textWrapper.length > 0) {
                            if (this.isTextHighlightOn) {
                              this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);
                              this._textHasChanged();
                              this.isTextHighlightOn = false;
                              this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;
                              this._blinkIsEven = false;
                              if (evt) {
                                evt.preventDefault();
                              }
                              return;
                            }
                            if (this._cursorOffset === 0) {
                              this.text = this._textWrapper.substr(0, this._textWrapper.length - 1);
                            } else {
                              var deletePosition = this._textWrapper.length - this._cursorOffset;
                              if (deletePosition > 0) {
                                this._textWrapper.removePart(deletePosition - 1, deletePosition);
                                this._textHasChanged();
                              }
                            }
                          }
                          if (evt) {
                            evt.preventDefault();
                          }
                          return;
                        case 46:
                          if (this.isTextHighlightOn) {
                            this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);
                            this._textHasChanged();
                            this.isTextHighlightOn = false;
                            this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;
                            if (evt) {
                              evt.preventDefault();
                            }
                            return;
                          }
                          if (this._textWrapper.text && this._textWrapper.length > 0 && this._cursorOffset > 0) {
                            var deletePosition = this._textWrapper.length - this._cursorOffset;
                            this._textWrapper.removePart(deletePosition, deletePosition + 1);
                            this._textHasChanged();
                            this._cursorOffset--;
                          }
                          if (evt) {
                            evt.preventDefault();
                          }
                          return;
                        case 13:
                          this._host.focusedControl = null;
                          this.isTextHighlightOn = false;
                          return;
                        case 35:
                          this._cursorOffset = 0;
                          this._blinkIsEven = false;
                          this.isTextHighlightOn = false;
                          this._markAsDirty();
                          return;
                        case 36:
                          this._cursorOffset = this._textWrapper.length;
                          this._blinkIsEven = false;
                          this.isTextHighlightOn = false;
                          this._markAsDirty();
                          return;
                        case 37:
                          this._cursorOffset++;
                          if (this._cursorOffset > this._textWrapper.length) {
                            this._cursorOffset = this._textWrapper.length;
                          }
                          if (evt && evt.shiftKey) {
                            this._blinkIsEven = false;
                            if (evt.ctrlKey || evt.metaKey) {
                              if (!this.isTextHighlightOn) {
                                if (this._textWrapper.length === this._cursorOffset) {
                                  return;
                                } else {
                                  this._endHighlightIndex = this._textWrapper.length - this._cursorOffset + 1;
                                }
                              }
                              this._startHighlightIndex = 0;
                              this._cursorIndex = this._textWrapper.length - this._endHighlightIndex;
                              this._cursorOffset = this._textWrapper.length;
                              this.isTextHighlightOn = true;
                              this._markAsDirty();
                              return;
                            }
                            if (!this.isTextHighlightOn) {
                              this.isTextHighlightOn = true;
                              this._cursorIndex = this._cursorOffset >= this._textWrapper.length ? this._textWrapper.length : this._cursorOffset - 1;
                            } else if (this._cursorIndex === -1) {
                              this._cursorIndex = this._textWrapper.length - this._endHighlightIndex;
                              this._cursorOffset = this._startHighlightIndex === 0 ? this._textWrapper.length : this._textWrapper.length - this._startHighlightIndex + 1;
                            }
                            if (this._cursorIndex < this._cursorOffset) {
                              this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;
                              this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;
                            } else if (this._cursorIndex > this._cursorOffset) {
                              this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;
                              this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;
                            } else {
                              this.isTextHighlightOn = false;
                            }
                            this._markAsDirty();
                            return;
                          }
                          if (this.isTextHighlightOn) {
                            this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;
                            this.isTextHighlightOn = false;
                          }
                          if (evt && (evt.ctrlKey || evt.metaKey)) {
                            this._cursorOffset = this._textWrapper.length;
                            evt.preventDefault();
                          }
                          this._blinkIsEven = false;
                          this.isTextHighlightOn = false;
                          this._cursorIndex = -1;
                          this._markAsDirty();
                          return;
                        case 39:
                          this._cursorOffset--;
                          if (this._cursorOffset < 0) {
                            this._cursorOffset = 0;
                          }
                          if (evt && evt.shiftKey) {
                            this._blinkIsEven = false;
                            if (evt.ctrlKey || evt.metaKey) {
                              if (!this.isTextHighlightOn) {
                                if (this._cursorOffset === 0) {
                                  return;
                                } else {
                                  this._startHighlightIndex = this._textWrapper.length - this._cursorOffset - 1;
                                }
                              }
                              this._endHighlightIndex = this._textWrapper.length;
                              this.isTextHighlightOn = true;
                              this._cursorIndex = this._textWrapper.length - this._startHighlightIndex;
                              this._cursorOffset = 0;
                              this._markAsDirty();
                              return;
                            }
                            if (!this.isTextHighlightOn) {
                              this.isTextHighlightOn = true;
                              this._cursorIndex = this._cursorOffset <= 0 ? 0 : this._cursorOffset + 1;
                            } else if (this._cursorIndex === -1) {
                              this._cursorIndex = this._textWrapper.length - this._startHighlightIndex;
                              this._cursorOffset = this._textWrapper.length === this._endHighlightIndex ? 0 : this._textWrapper.length - this._endHighlightIndex - 1;
                            }
                            if (this._cursorIndex < this._cursorOffset) {
                              this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;
                              this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;
                            } else if (this._cursorIndex > this._cursorOffset) {
                              this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;
                              this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;
                            } else {
                              this.isTextHighlightOn = false;
                            }
                            this._markAsDirty();
                            return;
                          }
                          if (this.isTextHighlightOn) {
                            this._cursorOffset = this._textWrapper.length - this._endHighlightIndex;
                            this.isTextHighlightOn = false;
                          }
                          if (evt && (evt.ctrlKey || evt.metaKey)) {
                            this._cursorOffset = 0;
                            evt.preventDefault();
                          }
                          this._blinkIsEven = false;
                          this.isTextHighlightOn = false;
                          this._cursorIndex = -1;
                          this._markAsDirty();
                          return;
                      }
                      if (keyCode === 32) {
                        key = (_a = evt === null || evt === void 0 ? void 0 : evt.key) !== null && _a !== void 0 ? _a : " ";
                      }
                      this._deadKey = key === "Dead";
                      if (key && (keyCode === -1 || // Direct access
                      keyCode === 32 || // Space
                      keyCode === 34 || // "    add support for single and double quotes
                      keyCode === 39 || // '
                      keyCode > 47 && keyCode < 64 || // Numbers
                      keyCode > 64 && keyCode < 91 || // Letters
                      keyCode > 159 && keyCode < 193 || // Special characters
                      keyCode > 218 && keyCode < 223 || // Special characters
                      keyCode > 95 && keyCode < 112)) {
                        this._currentKey = key;
                        this.onBeforeKeyAddObservable.notifyObservers(this);
                        key = this._currentKey;
                        if (this._addKey && !this._deadKey) {
                          if (this.isTextHighlightOn) {
                            this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex, key);
                            this._textHasChanged();
                            this._cursorOffset = this._textWrapper.length - (this._startHighlightIndex + 1);
                            this.isTextHighlightOn = false;
                            this._blinkIsEven = false;
                            this._markAsDirty();
                          } else if (this._cursorOffset === 0) {
                            this.text += this._deadKey && (evt === null || evt === void 0 ? void 0 : evt.key) ? evt.key : key;
                          } else {
                            var insertPosition = this._textWrapper.length - this._cursorOffset;
                            this._textWrapper.removePart(insertPosition, insertPosition, key);
                            this._textHasChanged();
                          }
                        }
                      }
                    };
                    InputText2.prototype._updateValueFromCursorIndex = function(offset) {
                      this._blinkIsEven = false;
                      if (this._cursorIndex === -1) {
                        this._cursorIndex = offset;
                      } else {
                        if (this._cursorIndex < this._cursorOffset) {
                          this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;
                          this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;
                        } else if (this._cursorIndex > this._cursorOffset) {
                          this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;
                          this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;
                        } else {
                          this.isTextHighlightOn = false;
                          this._markAsDirty();
                          return;
                        }
                      }
                      this.isTextHighlightOn = true;
                      this._markAsDirty();
                    };
                    InputText2.prototype._processDblClick = function(evt) {
                      this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;
                      this._endHighlightIndex = this._startHighlightIndex;
                      var moveLeft, moveRight;
                      do {
                        moveRight = this._endHighlightIndex < this._textWrapper.length && this._textWrapper.isWord(this._endHighlightIndex) ? ++this._endHighlightIndex : 0;
                        moveLeft = this._startHighlightIndex > 0 && this._textWrapper.isWord(this._startHighlightIndex - 1) ? --this._startHighlightIndex : 0;
                      } while (moveLeft || moveRight);
                      this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;
                      this.isTextHighlightOn = true;
                      this._clickedCoordinate = null;
                      this._blinkIsEven = true;
                      this._cursorIndex = -1;
                      this._markAsDirty();
                    };
                    InputText2.prototype._selectAllText = function() {
                      this._blinkIsEven = true;
                      this.isTextHighlightOn = true;
                      this._startHighlightIndex = 0;
                      this._endHighlightIndex = this._textWrapper.length;
                      this._cursorOffset = this._textWrapper.length;
                      this._cursorIndex = -1;
                      this._markAsDirty();
                    };
                    InputText2.prototype.processKeyboard = function(evt) {
                      this.processKey(evt.keyCode, evt.key, evt);
                      this.onKeyboardEventProcessedObservable.notifyObservers(evt);
                    };
                    InputText2.prototype._onCopyText = function(ev) {
                      this.isTextHighlightOn = false;
                      try {
                        ev.clipboardData && ev.clipboardData.setData("text/plain", this._highlightedText);
                      } catch (_a) {
                      }
                      this._host.clipboardData = this._highlightedText;
                    };
                    InputText2.prototype._onCutText = function(ev) {
                      if (!this._highlightedText) {
                        return;
                      }
                      this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);
                      this._textHasChanged();
                      this.isTextHighlightOn = false;
                      this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;
                      try {
                        ev.clipboardData && ev.clipboardData.setData("text/plain", this._highlightedText);
                      } catch (_a) {
                      }
                      this._host.clipboardData = this._highlightedText;
                      this._highlightedText = "";
                    };
                    InputText2.prototype._onPasteText = function(ev) {
                      var data = "";
                      if (ev.clipboardData && ev.clipboardData.types.indexOf("text/plain") !== -1) {
                        data = ev.clipboardData.getData("text/plain");
                      } else {
                        data = this._host.clipboardData;
                      }
                      var insertPosition = this._textWrapper.length - this._cursorOffset;
                      this._textWrapper.removePart(insertPosition, insertPosition, data);
                      this._textHasChanged();
                    };
                    InputText2.prototype._draw = function(context) {
                      var _this = this;
                      context.save();
                      this._applyStates(context);
                      if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                        context.shadowColor = this.shadowColor;
                        context.shadowBlur = this.shadowBlur;
                        context.shadowOffsetX = this.shadowOffsetX;
                        context.shadowOffsetY = this.shadowOffsetY;
                      }
                      if (this._isFocused) {
                        if (this._focusedBackground) {
                          context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;
                          context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
                        }
                      } else if (this._background) {
                        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;
                        context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
                      }
                      if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                        context.shadowBlur = 0;
                        context.shadowOffsetX = 0;
                        context.shadowOffsetY = 0;
                      }
                      if (!this._fontOffset || this._wasDirty) {
                        this._fontOffset = _control__WEBPACK_IMPORTED_MODULE_2__.Control._GetFontOffset(context.font);
                      }
                      var clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, this._tempParentMeasure.width);
                      if (this.color) {
                        context.fillStyle = this.color;
                      }
                      var text = this._beforeRenderText(this._textWrapper);
                      if (!this._isFocused && !this._textWrapper.text && this._placeholderText) {
                        text = new _textWrapper__WEBPACK_IMPORTED_MODULE_4__.TextWrapper();
                        text.text = this._placeholderText;
                        if (this._placeholderColor) {
                          context.fillStyle = this._placeholderColor;
                        }
                      }
                      this._textWidth = context.measureText(text.text).width;
                      var marginWidth = this._margin.getValueInPixel(this._host, this._tempParentMeasure.width) * 2;
                      if (this._autoStretchWidth) {
                        this.width = Math.min(this._maxWidth.getValueInPixel(this._host, this._tempParentMeasure.width), this._textWidth + marginWidth) + "px";
                        this._autoStretchWidth = true;
                      }
                      var rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;
                      var availableWidth = this._width.getValueInPixel(this._host, this._tempParentMeasure.width) - marginWidth;
                      context.save();
                      context.beginPath();
                      context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);
                      context.clip();
                      if (this._isFocused && this._textWidth > availableWidth) {
                        var textLeft = clipTextLeft - this._textWidth + availableWidth;
                        if (!this._scrollLeft) {
                          this._scrollLeft = textLeft;
                        }
                      } else {
                        this._scrollLeft = clipTextLeft;
                      }
                      context.fillText(text.text, this._scrollLeft, this._currentMeasure.top + rootY);
                      if (this._isFocused) {
                        if (this._clickedCoordinate) {
                          var rightPosition = this._scrollLeft + this._textWidth;
                          var absoluteCursorPosition = rightPosition - this._clickedCoordinate;
                          var currentSize = 0;
                          this._cursorOffset = 0;
                          var previousDist = 0;
                          do {
                            if (this._cursorOffset) {
                              previousDist = Math.abs(absoluteCursorPosition - currentSize);
                            }
                            this._cursorOffset++;
                            currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;
                          } while (currentSize < absoluteCursorPosition && text.length >= this._cursorOffset);
                          if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {
                            this._cursorOffset--;
                          }
                          this._blinkIsEven = false;
                          this._clickedCoordinate = null;
                        }
                        if (!this._blinkIsEven) {
                          var cursorOffsetText = text.substr(text.length - this._cursorOffset);
                          var cursorOffsetWidth = context.measureText(cursorOffsetText).width;
                          var cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;
                          if (cursorLeft < clipTextLeft) {
                            this._scrollLeft += clipTextLeft - cursorLeft;
                            cursorLeft = clipTextLeft;
                            this._markAsDirty();
                          } else if (cursorLeft > clipTextLeft + availableWidth) {
                            this._scrollLeft += clipTextLeft + availableWidth - cursorLeft;
                            cursorLeft = clipTextLeft + availableWidth;
                            this._markAsDirty();
                          }
                          if (!this.isTextHighlightOn) {
                            context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);
                          }
                        }
                        clearTimeout(this._blinkTimeout);
                        this._blinkTimeout = setTimeout(function() {
                          _this._blinkIsEven = !_this._blinkIsEven;
                          _this._markAsDirty();
                        }, 500);
                        if (this.isTextHighlightOn) {
                          clearTimeout(this._blinkTimeout);
                          var highlightCursorOffsetWidth = context.measureText(text.substring(this._startHighlightIndex)).width;
                          var highlightCursorLeft = this._scrollLeft + this._textWidth - highlightCursorOffsetWidth;
                          this._highlightedText = text.substring(this._startHighlightIndex, this._endHighlightIndex);
                          var width = context.measureText(text.substring(this._startHighlightIndex, this._endHighlightIndex)).width;
                          if (highlightCursorLeft < clipTextLeft) {
                            width = width - (clipTextLeft - highlightCursorLeft);
                            if (!width) {
                              width = context.measureText(text.charAt(text.length - this._cursorOffset)).width;
                            }
                            highlightCursorLeft = clipTextLeft;
                          }
                          context.globalAlpha = this._highligherOpacity;
                          context.fillStyle = this._textHighlightColor;
                          context.fillRect(highlightCursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, width, this._fontOffset.height);
                          context.globalAlpha = 1;
                        }
                      }
                      context.restore();
                      if (this._thickness) {
                        if (this._isFocused) {
                          if (this.focusedColor) {
                            context.strokeStyle = this.focusedColor;
                          }
                        } else {
                          if (this.color) {
                            context.strokeStyle = this.color;
                          }
                        }
                        context.lineWidth = this._thickness;
                        context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);
                      }
                      context.restore();
                    };
                    InputText2.prototype._onPointerDown = function(target, coordinates, pointerId, buttonIndex, pi) {
                      if (!_super.prototype._onPointerDown.call(this, target, coordinates, pointerId, buttonIndex, pi)) {
                        return false;
                      }
                      if (this.isReadOnly) {
                        return true;
                      }
                      this._clickedCoordinate = coordinates.x;
                      this.isTextHighlightOn = false;
                      this._highlightedText = "";
                      this._cursorIndex = -1;
                      this._isPointerDown = true;
                      this._host._capturingControl[pointerId] = this;
                      this._focusedBy = pi.event.pointerType;
                      if (this._host.focusedControl === this) {
                        clearTimeout(this._blinkTimeout);
                        this._markAsDirty();
                        return true;
                      }
                      if (!this._isEnabled) {
                        return false;
                      }
                      this._host.focusedControl = this;
                      return true;
                    };
                    InputText2.prototype._onPointerMove = function(target, coordinates, pointerId, pi) {
                      if (this._host.focusedControl === this && this._isPointerDown && !this.isReadOnly) {
                        this._clickedCoordinate = coordinates.x;
                        this._markAsDirty();
                        this._updateValueFromCursorIndex(this._cursorOffset);
                      }
                      _super.prototype._onPointerMove.call(this, target, coordinates, pointerId, pi);
                    };
                    InputText2.prototype._onPointerUp = function(target, coordinates, pointerId, buttonIndex, notifyClick) {
                      this._isPointerDown = false;
                      delete this._host._capturingControl[pointerId];
                      _super.prototype._onPointerUp.call(this, target, coordinates, pointerId, buttonIndex, notifyClick);
                    };
                    InputText2.prototype._beforeRenderText = function(textWrapper) {
                      return textWrapper;
                    };
                    Object.defineProperty(InputText2.prototype, "isTextHighlightOn", {
                      /** @internal */
                      get: function() {
                        return this._isTextHighlightOn;
                      },
                      /** @internal */
                      set: function(value) {
                        if (this._isTextHighlightOn === value) {
                          return;
                        }
                        if (value) {
                          this.onTextHighlightObservable.notifyObservers(this);
                        }
                        this._isTextHighlightOn = value;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    InputText2.prototype.dispose = function() {
                      _super.prototype.dispose.call(this);
                      this.onBlurObservable.clear();
                      this.onFocusObservable.clear();
                      this.onTextChangedObservable.clear();
                      this.onTextCopyObservable.clear();
                      this.onTextCutObservable.clear();
                      this.onTextPasteObservable.clear();
                      this.onTextHighlightObservable.clear();
                      this.onKeyboardEventProcessedObservable.clear();
                    };
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], InputText2.prototype, "promptMessage", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], InputText2.prototype, "disableMobilePrompt", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], InputText2.prototype, "maxWidth", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], InputText2.prototype, "highligherOpacity", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], InputText2.prototype, "onFocusSelectAll", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], InputText2.prototype, "textHighlightColor", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], InputText2.prototype, "margin", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], InputText2.prototype, "autoStretchWidth", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], InputText2.prototype, "thickness", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], InputText2.prototype, "focusedBackground", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], InputText2.prototype, "focusedColor", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], InputText2.prototype, "background", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], InputText2.prototype, "placeholderColor", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], InputText2.prototype, "placeholderText", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], InputText2.prototype, "deadKey", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], InputText2.prototype, "text", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], InputText2.prototype, "width", null);
                    return InputText2;
                  }(_control__WEBPACK_IMPORTED_MODULE_2__.Control)
                );
                (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.InputText", InputText);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/inputTextArea.js": (
              /*!**********************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/inputTextArea.js ***!
                \**********************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "InputTextArea": () => (
                    /* binding */
                    InputTextArea
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Misc/decorators */
                  "core/Misc/perfCounter"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__);
                var _control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./control */
                  "../../../lts/gui/dist/2D/controls/control.js"
                );
                var _valueAndUnit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ../valueAndUnit */
                  "../../../lts/gui/dist/2D/valueAndUnit.js"
                );
                var _inputText__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
                  /*! ./inputText */
                  "../../../lts/gui/dist/2D/controls/inputText.js"
                );
                var InputTextArea = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(InputTextArea2, _super);
                    function InputTextArea2(name, text) {
                      if (text === void 0) {
                        text = "";
                      }
                      var _this = _super.call(this, name) || this;
                      _this.name = name;
                      _this._textHorizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                      _this._textVerticalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_TOP;
                      _this._lineSpacing = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_3__.ValueAndUnit(0);
                      _this._outlineWidth = 0;
                      _this._outlineColor = "white";
                      _this._maxHeight = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_3__.ValueAndUnit(1, _valueAndUnit__WEBPACK_IMPORTED_MODULE_3__.ValueAndUnit.UNITMODE_PERCENTAGE, false);
                      _this.onLinesReadyObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this.text = text;
                      _this.isPointerBlocker = true;
                      _this.onLinesReadyObservable.add(function() {
                        return _this._updateCursorPosition();
                      });
                      _this._highlightCursorInfo = {
                        initialStartIndex: -1,
                        initialRelativeStartIndex: -1,
                        initialLineIndex: -1
                      };
                      _this._cursorInfo = {
                        globalStartIndex: 0,
                        globalEndIndex: 0,
                        relativeEndIndex: 0,
                        relativeStartIndex: 0,
                        currentLineIndex: 0
                      };
                      return _this;
                    }
                    Object.defineProperty(InputTextArea2.prototype, "outlineWidth", {
                      /**
                       * Gets or sets outlineWidth of the text to display
                       */
                      get: function() {
                        return this._outlineWidth;
                      },
                      /**
                       * Gets or sets outlineWidth of the text to display
                       */
                      set: function(value) {
                        if (this._outlineWidth === value) {
                          return;
                        }
                        this._outlineWidth = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(InputTextArea2.prototype, "outlineColor", {
                      /**
                       * Gets or sets outlineColor of the text to display
                       */
                      get: function() {
                        return this._outlineColor;
                      },
                      /**
                       * Gets or sets outlineColor of the text to display
                       */
                      set: function(value) {
                        if (this._outlineColor === value) {
                          return;
                        }
                        this._outlineColor = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(InputTextArea2.prototype, "autoStretchHeight", {
                      /** Gets or sets a boolean indicating if the control can auto stretch its height to adapt to the text */
                      get: function() {
                        return this._autoStretchHeight;
                      },
                      set: function(value) {
                        if (this._autoStretchHeight === value) {
                          return;
                        }
                        this._autoStretchHeight = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(InputTextArea2.prototype, "height", {
                      set: function(value) {
                        this._fixedRatioMasterIsWidth = false;
                        if (this._height.toString(this._host) === value) {
                          return;
                        }
                        if (this._height.fromString(value)) {
                          this._markAsDirty();
                        }
                        this._autoStretchHeight = false;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(InputTextArea2.prototype, "maxHeight", {
                      get: function() {
                        return this._maxHeight.toString(this._host);
                      },
                      set: function(value) {
                        if (this._maxHeight.toString(this._host) === value) {
                          return;
                        }
                        if (this._maxHeight.fromString(value)) {
                          this._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(InputTextArea2.prototype, "maxHeightInPixels", {
                      /** Gets the maximum width allowed by the control in pixels */
                      get: function() {
                        return this._maxHeight.getValueInPixel(this._host, this._cachedParentMeasure.height);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    InputTextArea2.prototype._getTypeName = function() {
                      return "InputTextArea";
                    };
                    InputTextArea2.prototype.processKeyboard = function(evt) {
                      this.alternativeProcessKey(evt.code, evt.key, evt);
                      this.onKeyboardEventProcessedObservable.notifyObservers(evt);
                    };
                    InputTextArea2.prototype.alternativeProcessKey = function(code, key, evt) {
                      if (evt && (evt.ctrlKey || evt.metaKey) && (code === "KeyC" || code === "KeyV" || code === "KeyX")) {
                        return;
                      }
                      switch (code) {
                        case "KeyA":
                          if (evt && (evt.ctrlKey || evt.metaKey)) {
                            this._selectAllText();
                            evt.preventDefault();
                            return;
                          }
                          break;
                        case "Period":
                          if (evt && evt.shiftKey) {
                            evt.preventDefault();
                          }
                          break;
                        case "Backspace":
                          if (!this._isTextHighlightOn && this._cursorInfo.globalStartIndex > 0) {
                            this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;
                            this._cursorInfo.globalStartIndex--;
                          }
                          this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);
                          this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;
                          if (evt) {
                            evt.preventDefault();
                          }
                          this._blinkIsEven = false;
                          this._isTextHighlightOn = false;
                          this._textHasChanged();
                          break;
                        case "Delete":
                          if (!this._isTextHighlightOn && this._cursorInfo.globalEndIndex < this.text.length) {
                            this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex + 1;
                          }
                          this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);
                          this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;
                          if (evt) {
                            evt.preventDefault();
                          }
                          this._blinkIsEven = false;
                          this._isTextHighlightOn = false;
                          this._textHasChanged();
                          break;
                        case "Enter":
                          this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex, "\n");
                          this._cursorInfo.globalStartIndex++;
                          this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;
                          this._blinkIsEven = false;
                          this._isTextHighlightOn = false;
                          this._textHasChanged();
                          return;
                        case "End":
                          this._cursorInfo.globalStartIndex = this.text.length;
                          this._blinkIsEven = false;
                          this._isTextHighlightOn = false;
                          this._markAsDirty();
                          return;
                        case "Home":
                          this._cursorInfo.globalStartIndex = 0;
                          this._blinkIsEven = false;
                          this._isTextHighlightOn = false;
                          this._markAsDirty();
                          return;
                        case "ArrowLeft":
                          this._markAsDirty();
                          if (evt && evt.shiftKey) {
                            if (evt.ctrlKey || evt.metaKey) {
                              this._cursorInfo.globalStartIndex -= this._cursorInfo.relativeStartIndex;
                              this._cursorInfo.globalEndIndex = this._highlightCursorInfo.initialStartIndex;
                            }
                            if (!this._isTextHighlightOn) {
                              this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;
                              this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;
                              this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;
                              this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;
                              this._cursorInfo.globalStartIndex--;
                              this._isTextHighlightOn = true;
                            } else {
                              if (this._cursorInfo.globalEndIndex > this._highlightCursorInfo.initialStartIndex) {
                                this._cursorInfo.globalEndIndex--;
                              } else {
                                this._cursorInfo.globalStartIndex--;
                              }
                            }
                            this._blinkIsEven = true;
                            evt.preventDefault();
                            return;
                          }
                          if (this._isTextHighlightOn) {
                            this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;
                          } else if (evt && (evt.ctrlKey || evt.metaKey)) {
                            this._cursorInfo.globalStartIndex -= this._cursorInfo.relativeStartIndex;
                            evt.preventDefault();
                          } else if (this._cursorInfo.globalStartIndex > 0) {
                            this._cursorInfo.globalStartIndex--;
                          }
                          this._blinkIsEven = false;
                          this._isTextHighlightOn = false;
                          return;
                        case "ArrowRight":
                          this._markAsDirty();
                          if (evt && evt.shiftKey) {
                            if (evt.ctrlKey || evt.metaKey) {
                              var rightDelta = this._lines[this._cursorInfo.currentLineIndex].text.length - this._cursorInfo.relativeEndIndex - 1;
                              this._cursorInfo.globalEndIndex += rightDelta;
                              this._cursorInfo.globalStartIndex = this._highlightCursorInfo.initialStartIndex;
                            }
                            if (!this._isTextHighlightOn) {
                              this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;
                              this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;
                              this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;
                              this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;
                              this._cursorInfo.globalEndIndex++;
                              this._isTextHighlightOn = true;
                            } else {
                              if (this._cursorInfo.globalStartIndex < this._highlightCursorInfo.initialStartIndex) {
                                this._cursorInfo.globalStartIndex++;
                              } else {
                                this._cursorInfo.globalEndIndex++;
                              }
                            }
                            this._blinkIsEven = true;
                            evt.preventDefault();
                            return;
                          }
                          if (this._isTextHighlightOn) {
                            this._cursorInfo.globalStartIndex = this._cursorInfo.globalEndIndex;
                          } else if (evt && (evt.ctrlKey || evt.metaKey)) {
                            var rightDelta = this._lines[this._cursorInfo.currentLineIndex].text.length - this._cursorInfo.relativeEndIndex;
                            this._cursorInfo.globalStartIndex += rightDelta;
                          } else if (this._cursorInfo.globalStartIndex < this.text.length) {
                            this._cursorInfo.globalStartIndex++;
                          }
                          this._blinkIsEven = false;
                          this._isTextHighlightOn = false;
                          return;
                        case "ArrowUp":
                          this._blinkIsEven = false;
                          if (evt) {
                            if (evt.shiftKey) {
                              if (!this._isTextHighlightOn) {
                                this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;
                                this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;
                                this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;
                              }
                              this._isTextHighlightOn = true;
                              this._blinkIsEven = true;
                            } else {
                              this._isTextHighlightOn = false;
                            }
                            evt.preventDefault();
                          }
                          if (this._cursorInfo.currentLineIndex === 0) {
                            this._cursorInfo.globalStartIndex = 0;
                          } else {
                            var currentLine = this._lines[this._cursorInfo.currentLineIndex];
                            var upperLine = this._lines[this._cursorInfo.currentLineIndex - 1];
                            var tmpIndex = 0;
                            var relativeIndex = 0;
                            if (!this._isTextHighlightOn || this._cursorInfo.currentLineIndex < this._highlightCursorInfo.initialLineIndex) {
                              tmpIndex = this._cursorInfo.globalStartIndex;
                              relativeIndex = this._cursorInfo.relativeStartIndex;
                            } else {
                              tmpIndex = this._cursorInfo.globalEndIndex;
                              relativeIndex = this._cursorInfo.relativeEndIndex;
                            }
                            var currentText = currentLine.text.substr(0, relativeIndex);
                            var currentWidth = this._contextForBreakLines.measureText(currentText).width;
                            var upperWidth = 0;
                            var previousWidth = 0;
                            tmpIndex -= relativeIndex;
                            tmpIndex -= upperLine.text.length + upperLine.lineEnding.length;
                            var upperLineRelativeIndex = 0;
                            while (upperWidth < currentWidth && upperLineRelativeIndex < upperLine.text.length) {
                              tmpIndex++;
                              upperLineRelativeIndex++;
                              previousWidth = Math.abs(currentWidth - upperWidth);
                              upperWidth = this._contextForBreakLines.measureText(upperLine.text.substr(0, upperLineRelativeIndex)).width;
                            }
                            if (Math.abs(currentWidth - upperWidth) > previousWidth && upperLineRelativeIndex > 0) {
                              tmpIndex--;
                            }
                            if (!this._isTextHighlightOn) {
                              this._cursorInfo.globalStartIndex = tmpIndex;
                            } else if (this._cursorInfo.currentLineIndex <= this._highlightCursorInfo.initialLineIndex) {
                              this._cursorInfo.globalStartIndex = tmpIndex;
                              this._cursorInfo.globalEndIndex = this._highlightCursorInfo.initialStartIndex;
                              this._cursorInfo.relativeEndIndex = this._highlightCursorInfo.initialRelativeStartIndex;
                            } else {
                              this._cursorInfo.globalEndIndex = tmpIndex;
                            }
                          }
                          this._markAsDirty();
                          return;
                        case "ArrowDown":
                          this._blinkIsEven = false;
                          if (evt) {
                            if (evt.shiftKey) {
                              if (!this._isTextHighlightOn) {
                                this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;
                                this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;
                                this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;
                              }
                              this._isTextHighlightOn = true;
                              this._blinkIsEven = true;
                            } else {
                              this._isTextHighlightOn = false;
                            }
                            evt.preventDefault();
                          }
                          if (this._cursorInfo.currentLineIndex === this._lines.length - 1) {
                            this._cursorInfo.globalStartIndex = this.text.length;
                          } else {
                            var currentLine = this._lines[this._cursorInfo.currentLineIndex];
                            var underLine = this._lines[this._cursorInfo.currentLineIndex + 1];
                            var tmpIndex = 0;
                            var relativeIndex = 0;
                            if (!this._isTextHighlightOn || this._cursorInfo.currentLineIndex < this._highlightCursorInfo.initialLineIndex) {
                              tmpIndex = this._cursorInfo.globalStartIndex;
                              relativeIndex = this._cursorInfo.relativeStartIndex;
                            } else {
                              tmpIndex = this._cursorInfo.globalEndIndex;
                              relativeIndex = this._cursorInfo.relativeEndIndex;
                            }
                            var currentText = currentLine.text.substr(0, relativeIndex);
                            var currentWidth = this._contextForBreakLines.measureText(currentText).width;
                            var underWidth = 0;
                            var previousWidth = 0;
                            tmpIndex += currentLine.text.length - relativeIndex + currentLine.lineEnding.length;
                            var underLineRelativeIndex = 0;
                            while (underWidth < currentWidth && underLineRelativeIndex < underLine.text.length) {
                              tmpIndex++;
                              underLineRelativeIndex++;
                              previousWidth = Math.abs(currentWidth - underWidth);
                              underWidth = this._contextForBreakLines.measureText(underLine.text.substr(0, underLineRelativeIndex)).width;
                            }
                            if (Math.abs(currentWidth - underWidth) > previousWidth && underLineRelativeIndex > 0) {
                              tmpIndex--;
                            }
                            if (!this._isTextHighlightOn) {
                              this._cursorInfo.globalStartIndex = tmpIndex;
                            } else if (this._cursorInfo.currentLineIndex < this._highlightCursorInfo.initialLineIndex) {
                              this._cursorInfo.globalStartIndex = tmpIndex;
                              if (this._cursorInfo.globalStartIndex > this._cursorInfo.globalEndIndex) {
                                this._cursorInfo.globalEndIndex += this._cursorInfo.globalStartIndex;
                                this._cursorInfo.globalStartIndex = this._cursorInfo.globalEndIndex - this._cursorInfo.globalStartIndex;
                                this._cursorInfo.globalEndIndex -= this._cursorInfo.globalStartIndex;
                              }
                            } else {
                              this._cursorInfo.globalEndIndex = tmpIndex;
                              this._cursorInfo.globalStartIndex = this._highlightCursorInfo.initialStartIndex;
                            }
                          }
                          this._markAsDirty();
                          return;
                      }
                      if ((key === null || key === void 0 ? void 0 : key.length) === 1) {
                        evt === null || evt === void 0 ? void 0 : evt.preventDefault();
                        this._currentKey = key;
                        this.onBeforeKeyAddObservable.notifyObservers(this);
                        key = this._currentKey;
                        if (this._addKey) {
                          this._isTextHighlightOn = false;
                          this._blinkIsEven = false;
                          this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex, key);
                          this._cursorInfo.globalStartIndex += key.length;
                          this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;
                          this._textHasChanged();
                        }
                      }
                    };
                    InputTextArea2.prototype._parseLineWordWrap = function(line, width, context) {
                      if (line === void 0) {
                        line = "";
                      }
                      var lines = [];
                      var words = line.split(" ");
                      var lineWidth = 0;
                      var _loop_1 = function(n2) {
                        var testLine = n2 > 0 ? line + " " + words[n2] : words[0];
                        var metrics = context.measureText(testLine);
                        var testWidth = metrics.width;
                        if (testWidth > width) {
                          if (n2 > 0) {
                            lineWidth = context.measureText(line).width;
                            lines.push({ text: line, width: lineWidth, lineEnding: " " });
                          }
                          line = words[n2];
                          var flushedLine_1 = "";
                          line.split("").map(function(char) {
                            if (context.measureText(flushedLine_1 + char).width > width) {
                              lines.push({ text: flushedLine_1, width: context.measureText(flushedLine_1).width, lineEnding: "\n" });
                              flushedLine_1 = "";
                            }
                            flushedLine_1 += char;
                          });
                          line = flushedLine_1;
                          lineWidth = context.measureText(line).width;
                        } else {
                          lineWidth = testWidth;
                          line = testLine;
                        }
                      };
                      for (var n = 0; n < words.length; n++) {
                        _loop_1(n);
                      }
                      lines.push({ text: line, width: lineWidth, lineEnding: " " });
                      return lines;
                    };
                    InputTextArea2.prototype._breakLines = function(refWidth, context) {
                      var lines = [];
                      var _lines = this.text.split("\n");
                      if (this.clipContent) {
                        for (var _i = 0, _lines_1 = _lines; _i < _lines_1.length; _i++) {
                          var _line = _lines_1[_i];
                          lines.push.apply(lines, this._parseLineWordWrap(_line, refWidth, context));
                        }
                      } else {
                        for (var _a = 0, _lines_2 = _lines; _a < _lines_2.length; _a++) {
                          var _line = _lines_2[_a];
                          lines.push(this._parseLine(_line, context));
                        }
                      }
                      lines[lines.length - 1].lineEnding = "\n";
                      return lines;
                    };
                    InputTextArea2.prototype._parseLine = function(line, context) {
                      if (line === void 0) {
                        line = "";
                      }
                      return { text: line, width: context.measureText(line).width, lineEnding: " " };
                    };
                    InputTextArea2.prototype._preMeasure = function(parentMeasure, context) {
                      if (!this._fontOffset || this._wasDirty) {
                        this._fontOffset = _control__WEBPACK_IMPORTED_MODULE_2__.Control._GetFontOffset(context.font);
                      }
                      var text = this._beforeRenderText(this._textWrapper).text;
                      if (!this._isFocused && !this.text && this._placeholderText) {
                        text = this._placeholderText;
                        if (this._placeholderColor) {
                          context.fillStyle = this._placeholderColor;
                        }
                      }
                      this._textWidth = context.measureText(text).width;
                      var marginWidth = this._margin.getValueInPixel(this._host, parentMeasure.width) * 2;
                      if (this._autoStretchWidth) {
                        var tmpLines = text.split("\n");
                        var longerString = tmpLines.reduce(function(acc, val) {
                          var valueLength = context.measureText(val).width;
                          var accLength = context.measureText(acc).width;
                          return valueLength > accLength ? val : acc;
                        }, "");
                        var longerStringWidth = context.measureText(longerString).width;
                        this.width = Math.min(this._maxWidth.getValueInPixel(this._host, parentMeasure.width), longerStringWidth + marginWidth) + "px";
                        this.autoStretchWidth = true;
                      }
                      this._availableWidth = this._width.getValueInPixel(this._host, parentMeasure.width) - marginWidth;
                      this._lines = this._breakLines(this._availableWidth, context);
                      this._contextForBreakLines = context;
                      if (this._autoStretchHeight) {
                        var textHeight = this._lines.length * this._fontOffset.height;
                        var totalHeight = textHeight + this._margin.getValueInPixel(this._host, parentMeasure.height) * 2;
                        this.height = Math.min(this._maxHeight.getValueInPixel(this._host, parentMeasure.height), totalHeight) + "px";
                        this._autoStretchHeight = true;
                      }
                      this._availableHeight = this._height.getValueInPixel(this._host, parentMeasure.height) - marginWidth;
                      if (this._isFocused) {
                        this._cursorInfo.currentLineIndex = 0;
                        var lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;
                        var tmpLength = 0;
                        while (tmpLength + lineLength <= this._cursorInfo.globalStartIndex) {
                          tmpLength += lineLength;
                          if (this._cursorInfo.currentLineIndex < this._lines.length - 1) {
                            this._cursorInfo.currentLineIndex++;
                            lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;
                          }
                        }
                      }
                    };
                    InputTextArea2.prototype._computeScroll = function() {
                      this._clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);
                      this._clipTextTop = this._currentMeasure.top + this._margin.getValueInPixel(this._host, this._cachedParentMeasure.height);
                      if (this._isFocused && this._lines[this._cursorInfo.currentLineIndex].width > this._availableWidth) {
                        var textLeft = this._clipTextLeft - this._lines[this._cursorInfo.currentLineIndex].width + this._availableWidth;
                        if (!this._scrollLeft) {
                          this._scrollLeft = textLeft;
                        }
                      } else {
                        this._scrollLeft = this._clipTextLeft;
                      }
                      if (this._isFocused && !this._autoStretchHeight) {
                        var selectedHeight = (this._cursorInfo.currentLineIndex + 1) * this._fontOffset.height;
                        var textTop = this._clipTextTop - selectedHeight;
                        if (!this._scrollTop) {
                          this._scrollTop = textTop;
                        }
                      } else {
                        this._scrollTop = this._clipTextTop;
                      }
                    };
                    InputTextArea2.prototype._additionalProcessing = function() {
                      this.highlightedText = "";
                      this.onLinesReadyObservable.notifyObservers(this);
                    };
                    InputTextArea2.prototype._drawText = function(text, textWidth, y, context) {
                      var width = this._currentMeasure.width;
                      var x = this._scrollLeft;
                      switch (this._textHorizontalAlignment) {
                        case _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT:
                          x += 0;
                          break;
                        case _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_RIGHT:
                          x += width - textWidth;
                          break;
                        case _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_CENTER:
                          x += (width - textWidth) / 2;
                          break;
                      }
                      if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                        context.shadowColor = this.shadowColor;
                        context.shadowBlur = this.shadowBlur;
                        context.shadowOffsetX = this.shadowOffsetX;
                        context.shadowOffsetY = this.shadowOffsetY;
                      }
                      if (this.outlineWidth) {
                        context.strokeText(text, this._currentMeasure.left + x, y);
                      }
                      context.fillText(text, x, y);
                    };
                    InputTextArea2.prototype._onCopyText = function(ev) {
                      this._isTextHighlightOn = false;
                      try {
                        ev.clipboardData && ev.clipboardData.setData("text/plain", this._highlightedText);
                      } catch (_a) {
                      }
                      this._host.clipboardData = this._highlightedText;
                    };
                    InputTextArea2.prototype._onCutText = function(ev) {
                      if (!this._highlightedText) {
                        return;
                      }
                      try {
                        ev.clipboardData && ev.clipboardData.setData("text/plain", this._highlightedText);
                      } catch (_a) {
                      }
                      this._host.clipboardData = this._highlightedText;
                      this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);
                      this._textHasChanged();
                    };
                    InputTextArea2.prototype._onPasteText = function(ev) {
                      var data = "";
                      if (ev.clipboardData && ev.clipboardData.types.indexOf("text/plain") !== -1) {
                        data = ev.clipboardData.getData("text/plain");
                      } else {
                        data = this._host.clipboardData;
                      }
                      this._isTextHighlightOn = false;
                      this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex, data);
                      var deltaIndex = data.length - (this._cursorInfo.globalEndIndex - this._cursorInfo.globalStartIndex);
                      this._cursorInfo.globalStartIndex += deltaIndex;
                      this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;
                      this._textHasChanged();
                    };
                    InputTextArea2.prototype._draw = function(context) {
                      var _a, _b;
                      this._computeScroll();
                      this._scrollLeft = (_a = this._scrollLeft) !== null && _a !== void 0 ? _a : 0;
                      this._scrollTop = (_b = this._scrollTop) !== null && _b !== void 0 ? _b : 0;
                      context.save();
                      this._applyStates(context);
                      if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                        context.shadowColor = this.shadowColor;
                        context.shadowBlur = this.shadowBlur;
                        context.shadowOffsetX = this.shadowOffsetX;
                        context.shadowOffsetY = this.shadowOffsetY;
                      }
                      if (this._isFocused) {
                        if (this._focusedBackground) {
                          context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;
                          context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
                        }
                      } else if (this._background) {
                        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;
                        context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
                      }
                      if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                        context.shadowBlur = 0;
                        context.shadowOffsetX = 0;
                        context.shadowOffsetY = 0;
                      }
                      if (this.color) {
                        context.fillStyle = this.color;
                      }
                      var height = this._currentMeasure.height;
                      var width = this._currentMeasure.width;
                      var rootY = 0;
                      switch (this._textVerticalAlignment) {
                        case _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_TOP:
                          rootY = this._fontOffset.ascent;
                          break;
                        case _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_BOTTOM:
                          rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;
                          break;
                        case _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_CENTER:
                          rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;
                          break;
                      }
                      context.save();
                      context.beginPath();
                      context.fillStyle = this.fontStyle;
                      context.rect(this._clipTextLeft, this._clipTextTop, this._availableWidth + 2, this._availableHeight + 2);
                      context.clip();
                      rootY += this._scrollTop;
                      for (var i = 0; i < this._lines.length; i++) {
                        var line = this._lines[i];
                        if (i !== 0 && this._lineSpacing.internalValue !== 0) {
                          if (this._lineSpacing.isPixel) {
                            rootY += this._lineSpacing.getValue(this._host);
                          } else {
                            rootY = rootY + this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);
                          }
                        }
                        this._drawText(line.text, line.width, rootY, context);
                        rootY += this._fontOffset.height;
                      }
                      context.restore();
                      if (this._isFocused) {
                        if (!this._blinkIsEven || this._isTextHighlightOn) {
                          var cursorLeft = this._scrollLeft + context.measureText(this._lines[this._cursorInfo.currentLineIndex].text.substr(0, this._cursorInfo.relativeStartIndex)).width;
                          if (cursorLeft < this._clipTextLeft) {
                            this._scrollLeft += this._clipTextLeft - cursorLeft;
                            cursorLeft = this._clipTextLeft;
                            this._markAsDirty();
                          } else if (cursorLeft > this._clipTextLeft + this._availableWidth) {
                            this._scrollLeft += this._clipTextLeft + this._availableWidth - cursorLeft;
                            cursorLeft = this._clipTextLeft + this._availableWidth;
                            this._markAsDirty();
                          }
                          var cursorTop = this._scrollTop + this._cursorInfo.currentLineIndex * this._fontOffset.height;
                          if (cursorTop < this._clipTextTop) {
                            this._scrollTop += this._clipTextTop - cursorTop;
                            cursorTop = this._clipTextTop;
                            this._markAsDirty();
                          } else if (cursorTop + this._fontOffset.height > this._clipTextTop + this._availableHeight) {
                            this._scrollTop += this._clipTextTop + this._availableHeight - cursorTop - this._fontOffset.height;
                            cursorTop = this._clipTextTop + this._availableHeight - this._fontOffset.height;
                            this._markAsDirty();
                          }
                          if (!this._isTextHighlightOn) {
                            context.fillRect(cursorLeft, cursorTop, 2, this._fontOffset.height);
                          }
                        }
                        this._resetBlinking();
                        if (this._isTextHighlightOn) {
                          clearTimeout(this._blinkTimeout);
                          this._highlightedText = this.text.substring(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);
                          context.globalAlpha = this._highligherOpacity;
                          context.fillStyle = this._textHighlightColor;
                          var startLineIndex = Math.min(this._cursorInfo.currentLineIndex, this._highlightCursorInfo.initialLineIndex);
                          var endLineIndex = Math.max(this._cursorInfo.currentLineIndex, this._highlightCursorInfo.initialLineIndex);
                          var highlightRootY = this._scrollTop + startLineIndex * this._fontOffset.height;
                          for (var i = startLineIndex; i <= endLineIndex; i++) {
                            var line = this._lines[i];
                            var highlightRootX = this._scrollLeft;
                            switch (this._textHorizontalAlignment) {
                              case _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT:
                                highlightRootX += 0;
                                break;
                              case _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_RIGHT:
                                highlightRootX += width - line.width;
                                break;
                              case _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_CENTER:
                                highlightRootX += (width - line.width) / 2;
                                break;
                            }
                            var begin = i === startLineIndex ? this._cursorInfo.relativeStartIndex : 0;
                            var end = i === endLineIndex ? this._cursorInfo.relativeEndIndex : line.text.length;
                            var leftOffsetWidth = context.measureText(line.text.substr(0, begin)).width;
                            var selectedText = line.text.substring(begin, end);
                            var hightlightWidth = context.measureText(selectedText).width;
                            context.fillRect(highlightRootX + leftOffsetWidth, highlightRootY, hightlightWidth, this._fontOffset.height);
                            highlightRootY += this._fontOffset.height;
                          }
                          if (this._cursorInfo.globalEndIndex === this._cursorInfo.globalStartIndex) {
                            this._resetBlinking();
                          }
                        }
                      }
                      context.restore();
                      if (this._thickness) {
                        if (this._isFocused) {
                          if (this.focusedColor) {
                            context.strokeStyle = this.focusedColor;
                          }
                        } else {
                          if (this.color) {
                            context.strokeStyle = this.color;
                          }
                        }
                        context.lineWidth = this._thickness;
                        context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);
                      }
                    };
                    InputTextArea2.prototype._resetBlinking = function() {
                      var _this = this;
                      clearTimeout(this._blinkTimeout);
                      this._blinkTimeout = setTimeout(function() {
                        _this._blinkIsEven = !_this._blinkIsEven;
                        _this._markAsDirty();
                      }, 500);
                    };
                    InputTextArea2.prototype._applyStates = function(context) {
                      _super.prototype._applyStates.call(this, context);
                      if (this.outlineWidth) {
                        context.lineWidth = this.outlineWidth;
                        context.strokeStyle = this.outlineColor;
                      }
                    };
                    InputTextArea2.prototype._onPointerDown = function(target, coordinates, pointerId, buttonIndex, pi) {
                      if (!_super.prototype._onPointerDown.call(this, target, coordinates, pointerId, buttonIndex, pi)) {
                        return false;
                      }
                      this._clickedCoordinateX = coordinates.x;
                      this._clickedCoordinateY = coordinates.y;
                      this._isTextHighlightOn = false;
                      this._highlightedText = "";
                      this._isPointerDown = true;
                      this._host._capturingControl[pointerId] = this;
                      if (this._host.focusedControl === this) {
                        clearTimeout(this._blinkTimeout);
                        this._markAsDirty();
                        return true;
                      }
                      if (!this._isEnabled) {
                        return false;
                      }
                      this._host.focusedControl = this;
                      return true;
                    };
                    InputTextArea2.prototype._onPointerMove = function(target, coordinates, pointerId, pi) {
                      if (pi.event.movementX === 0 && pi.event.movementY === 0) {
                        return;
                      }
                      if (this._host.focusedControl === this && this._isPointerDown) {
                        this._clickedCoordinateX = coordinates.x;
                        this._clickedCoordinateY = coordinates.y;
                        if (!this._isTextHighlightOn) {
                          this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;
                          this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;
                          this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;
                          this._isTextHighlightOn = true;
                        }
                        this._markAsDirty();
                      }
                      _super.prototype._onPointerMove.call(this, target, coordinates, pointerId, pi);
                    };
                    InputTextArea2.prototype._updateCursorPosition = function() {
                      var _a;
                      if (!this._isFocused) {
                        return;
                      }
                      if (this._clickedCoordinateX && this._clickedCoordinateY) {
                        if (!this._isTextHighlightOn) {
                          this._cursorInfo = {
                            globalStartIndex: 0,
                            globalEndIndex: 0,
                            relativeStartIndex: 0,
                            relativeEndIndex: 0,
                            currentLineIndex: 0
                          };
                        }
                        var globalIndex = 0;
                        var relativeIndex = 0;
                        var lastClickedCoordinateY = this._clickedCoordinateY - this._scrollTop;
                        var relativeCoordinateY = Math.floor(lastClickedCoordinateY / this._fontOffset.height);
                        this._cursorInfo.currentLineIndex = Math.min(Math.max(relativeCoordinateY, 0), this._lines.length - 1);
                        var currentSize = 0;
                        var relativeXPosition = this._clickedCoordinateX - ((_a = this._scrollLeft) !== null && _a !== void 0 ? _a : 0);
                        var previousDist = 0;
                        for (var index = 0; index < this._cursorInfo.currentLineIndex; index++) {
                          var line = this._lines[index];
                          globalIndex += line.text.length + line.lineEnding.length;
                        }
                        while (currentSize < relativeXPosition && this._lines[this._cursorInfo.currentLineIndex].text.length > relativeIndex) {
                          relativeIndex++;
                          previousDist = Math.abs(relativeXPosition - currentSize);
                          currentSize = this._contextForBreakLines.measureText(this._lines[this._cursorInfo.currentLineIndex].text.substr(0, relativeIndex)).width;
                        }
                        if (Math.abs(relativeXPosition - currentSize) > previousDist && relativeIndex > 0) {
                          relativeIndex--;
                        }
                        globalIndex += relativeIndex;
                        if (!this._isTextHighlightOn) {
                          this._cursorInfo.globalStartIndex = globalIndex;
                          this._cursorInfo.relativeStartIndex = relativeIndex;
                          this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;
                          this._cursorInfo.relativeEndIndex = this._cursorInfo.relativeStartIndex;
                        } else {
                          if (globalIndex < this._highlightCursorInfo.initialStartIndex) {
                            this._cursorInfo.globalStartIndex = globalIndex;
                            this._cursorInfo.relativeStartIndex = relativeIndex;
                            this._cursorInfo.globalEndIndex = this._highlightCursorInfo.initialStartIndex;
                            this._cursorInfo.relativeEndIndex = this._highlightCursorInfo.initialRelativeStartIndex;
                          } else {
                            this._cursorInfo.globalStartIndex = this._highlightCursorInfo.initialStartIndex;
                            this._cursorInfo.relativeStartIndex = this._highlightCursorInfo.initialRelativeStartIndex;
                            this._cursorInfo.globalEndIndex = globalIndex;
                            this._cursorInfo.relativeEndIndex = relativeIndex;
                          }
                        }
                        this._blinkIsEven = this._isTextHighlightOn;
                        this._clickedCoordinateX = null;
                        this._clickedCoordinateY = null;
                      } else {
                        this._cursorInfo.relativeStartIndex = 0;
                        this._cursorInfo.currentLineIndex = 0;
                        var lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;
                        var tmpLength = 0;
                        while (tmpLength + lineLength <= this._cursorInfo.globalStartIndex) {
                          tmpLength += lineLength;
                          if (this._cursorInfo.currentLineIndex < this._lines.length - 1) {
                            this._cursorInfo.currentLineIndex++;
                            lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;
                          }
                        }
                        this._cursorInfo.relativeStartIndex = this._cursorInfo.globalStartIndex - tmpLength;
                        if (this._highlightCursorInfo.initialStartIndex !== -1 && this._cursorInfo.globalStartIndex >= this._highlightCursorInfo.initialStartIndex) {
                          while (tmpLength + lineLength <= this._cursorInfo.globalEndIndex) {
                            tmpLength += lineLength;
                            if (this._cursorInfo.currentLineIndex < this._lines.length - 1) {
                              this._cursorInfo.currentLineIndex++;
                              lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;
                            }
                          }
                          this._cursorInfo.relativeEndIndex = this._cursorInfo.globalEndIndex - tmpLength;
                        } else if (!this._isTextHighlightOn) {
                          this._cursorInfo.relativeEndIndex = this._cursorInfo.relativeStartIndex;
                          this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;
                        }
                      }
                    };
                    InputTextArea2.prototype._updateValueFromCursorIndex = function(offset) {
                    };
                    InputTextArea2.prototype._processDblClick = function(_evt) {
                      var moveLeft, moveRight;
                      do {
                        moveLeft = this._cursorInfo.globalStartIndex > 0 && this._textWrapper.isWord(this._cursorInfo.globalStartIndex - 1) ? --this._cursorInfo.globalStartIndex : 0;
                        moveRight = this._cursorInfo.globalEndIndex < this._textWrapper.length && this._textWrapper.isWord(this._cursorInfo.globalEndIndex) ? ++this._cursorInfo.globalEndIndex : 0;
                      } while (moveLeft || moveRight);
                      this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;
                      this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;
                      this.onTextHighlightObservable.notifyObservers(this);
                      this._isTextHighlightOn = true;
                      this._blinkIsEven = true;
                      this._markAsDirty();
                    };
                    InputTextArea2.prototype._selectAllText = function() {
                      this._isTextHighlightOn = true;
                      this._blinkIsEven = true;
                      this._highlightCursorInfo = {
                        initialStartIndex: 0,
                        initialRelativeStartIndex: 0,
                        initialLineIndex: 0
                      };
                      this._cursorInfo = {
                        globalStartIndex: 0,
                        globalEndIndex: this._textWrapper.length,
                        relativeEndIndex: this._lines[this._lines.length - 1].text.length,
                        relativeStartIndex: 0,
                        currentLineIndex: this._lines.length - 1
                      };
                      this._markAsDirty();
                    };
                    InputTextArea2.prototype.dipose = function() {
                      _super.prototype.dispose.call(this);
                      this.onLinesReadyObservable.clear();
                    };
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], InputTextArea2.prototype, "autoStretchHeight", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], InputTextArea2.prototype, "maxHeight", null);
                    return InputTextArea2;
                  }(_inputText__WEBPACK_IMPORTED_MODULE_4__.InputText)
                );
                (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.InputTextArea", InputTextArea);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/line.js": (
              /*!*************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/line.js ***!
                \*************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "Line": () => (
                    /* binding */
                    Line
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Misc/decorators */
                  "core/Misc/perfCounter"
                );
                var core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__);
                var _control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./control */
                  "../../../lts/gui/dist/2D/controls/control.js"
                );
                var _valueAndUnit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ../valueAndUnit */
                  "../../../lts/gui/dist/2D/valueAndUnit.js"
                );
                var Line = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Line2, _super);
                    function Line2(name) {
                      var _this = _super.call(this, name) || this;
                      _this.name = name;
                      _this._lineWidth = 1;
                      _this._x1 = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_3__.ValueAndUnit(0);
                      _this._y1 = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_3__.ValueAndUnit(0);
                      _this._x2 = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_3__.ValueAndUnit(0);
                      _this._y2 = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_3__.ValueAndUnit(0);
                      _this._dash = new Array();
                      _this._automaticSize = true;
                      _this.isHitTestVisible = false;
                      _this._horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                      _this._verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_TOP;
                      return _this;
                    }
                    Object.defineProperty(Line2.prototype, "dash", {
                      /** Gets or sets the dash pattern */
                      get: function() {
                        return this._dash;
                      },
                      set: function(value) {
                        if (this._dash === value) {
                          return;
                        }
                        this._dash = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Line2.prototype, "connectedControl", {
                      /** Gets or sets the control connected with the line end */
                      get: function() {
                        return this._connectedControl;
                      },
                      set: function(value) {
                        var _this = this;
                        if (this._connectedControl === value) {
                          return;
                        }
                        if (this._connectedControlDirtyObserver && this._connectedControl) {
                          this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);
                          this._connectedControlDirtyObserver = null;
                        }
                        if (value) {
                          this._connectedControlDirtyObserver = value.onDirtyObservable.add(function() {
                            return _this._markAsDirty();
                          });
                        }
                        this._connectedControl = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Line2.prototype, "x1", {
                      /** Gets or sets start coordinates on X axis */
                      get: function() {
                        return this._x1.toString(this._host);
                      },
                      set: function(value) {
                        if (this._x1.toString(this._host) === value) {
                          return;
                        }
                        if (this._x1.fromString(value)) {
                          this._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Line2.prototype, "y1", {
                      /** Gets or sets start coordinates on Y axis */
                      get: function() {
                        return this._y1.toString(this._host);
                      },
                      set: function(value) {
                        if (this._y1.toString(this._host) === value) {
                          return;
                        }
                        if (this._y1.fromString(value)) {
                          this._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Line2.prototype, "x2", {
                      /** Gets or sets end coordinates on X axis */
                      get: function() {
                        return this._x2.toString(this._host);
                      },
                      set: function(value) {
                        if (this._x2.toString(this._host) === value) {
                          return;
                        }
                        if (this._x2.fromString(value)) {
                          this._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Line2.prototype, "y2", {
                      /** Gets or sets end coordinates on Y axis */
                      get: function() {
                        return this._y2.toString(this._host);
                      },
                      set: function(value) {
                        if (this._y2.toString(this._host) === value) {
                          return;
                        }
                        if (this._y2.fromString(value)) {
                          this._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Line2.prototype, "lineWidth", {
                      /** Gets or sets line width */
                      get: function() {
                        return this._lineWidth;
                      },
                      set: function(value) {
                        if (this._lineWidth === value) {
                          return;
                        }
                        this._lineWidth = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Line2.prototype, "horizontalAlignment", {
                      /** Gets or sets horizontal alignment */
                      set: function(value) {
                        return;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Line2.prototype, "verticalAlignment", {
                      /** Gets or sets vertical alignment */
                      set: function(value) {
                        return;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Line2.prototype, "_effectiveX2", {
                      /** @internal */
                      get: function() {
                        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Line2.prototype, "_effectiveY2", {
                      /** @internal */
                      get: function() {
                        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Line2.prototype._getTypeName = function() {
                      return "Line";
                    };
                    Line2.prototype._draw = function(context) {
                      context.save();
                      if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                        context.shadowColor = this.shadowColor;
                        context.shadowBlur = this.shadowBlur;
                        context.shadowOffsetX = this.shadowOffsetX;
                        context.shadowOffsetY = this.shadowOffsetY;
                      }
                      this._applyStates(context);
                      context.strokeStyle = this._getColor(context);
                      context.lineWidth = this._lineWidth;
                      context.setLineDash(this._dash);
                      context.beginPath();
                      context.moveTo(this._cachedParentMeasure.left + this._x1.getValue(this._host), this._cachedParentMeasure.top + this._y1.getValue(this._host));
                      context.lineTo(this._cachedParentMeasure.left + this._effectiveX2, this._cachedParentMeasure.top + this._effectiveY2);
                      context.stroke();
                      context.restore();
                    };
                    Line2.prototype._measure = function() {
                      this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;
                      this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;
                    };
                    Line2.prototype._computeAlignment = function(parentMeasure) {
                      this._currentMeasure.left = parentMeasure.left + Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;
                      this._currentMeasure.top = parentMeasure.top + Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;
                    };
                    Line2.prototype.moveToVector3 = function(position, scene, end) {
                      if (end === void 0) {
                        end = false;
                      }
                      if (!this._host || this.parent !== this._host._rootContainer) {
                        core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Tools.Error("Cannot move a control to a vector3 if the control is not at root level");
                        return;
                      }
                      var globalViewport = this._host._getGlobalViewport();
                      var projectedPosition = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.Project(position, core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Matrix.IdentityReadOnly, scene.getTransformMatrix(), globalViewport);
                      this._moveToProjectedPosition(projectedPosition, end);
                      if (projectedPosition.z < 0 || projectedPosition.z > 1) {
                        this.notRenderable = true;
                        return;
                      }
                      this.notRenderable = false;
                    };
                    Line2.prototype._moveToProjectedPosition = function(projectedPosition, end) {
                      if (end === void 0) {
                        end = false;
                      }
                      var x = projectedPosition.x + this._linkOffsetX.getValue(this._host) + "px";
                      var y = projectedPosition.y + this._linkOffsetY.getValue(this._host) + "px";
                      if (end) {
                        this.x2 = x;
                        this.y2 = y;
                        this._x2.ignoreAdaptiveScaling = true;
                        this._y2.ignoreAdaptiveScaling = true;
                      } else {
                        this.x1 = x;
                        this.y1 = y;
                        this._x1.ignoreAdaptiveScaling = true;
                        this._y1.ignoreAdaptiveScaling = true;
                      }
                    };
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Line2.prototype, "dash", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Line2.prototype, "x1", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Line2.prototype, "y1", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Line2.prototype, "x2", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Line2.prototype, "y2", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], Line2.prototype, "lineWidth", null);
                    return Line2;
                  }(_control__WEBPACK_IMPORTED_MODULE_2__.Control)
                );
                (0, core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.Line", Line);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/multiLine.js": (
              /*!******************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/multiLine.js ***!
                \******************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "MultiLine": () => (
                    /* binding */
                    MultiLine
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Meshes_abstractMesh__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Misc/decorators */
                  "core/Misc/perfCounter"
                );
                var core_Meshes_abstractMesh__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Meshes_abstractMesh__WEBPACK_IMPORTED_MODULE_1__);
                var _control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./control */
                  "../../../lts/gui/dist/2D/controls/control.js"
                );
                var _multiLinePoint__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ../multiLinePoint */
                  "../../../lts/gui/dist/2D/multiLinePoint.js"
                );
                var MultiLine = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MultiLine2, _super);
                    function MultiLine2(name) {
                      var _this = _super.call(this, name) || this;
                      _this.name = name;
                      _this._lineWidth = 1;
                      _this.onPointUpdate = function() {
                        _this._markAsDirty();
                      };
                      _this._automaticSize = true;
                      _this.isHitTestVisible = false;
                      _this._horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                      _this._verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_TOP;
                      _this._dash = [];
                      _this._points = [];
                      return _this;
                    }
                    Object.defineProperty(MultiLine2.prototype, "dash", {
                      /** Gets or sets dash pattern */
                      get: function() {
                        return this._dash;
                      },
                      set: function(value) {
                        if (this._dash === value) {
                          return;
                        }
                        this._dash = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MultiLine2.prototype.getAt = function(index) {
                      if (!this._points[index]) {
                        this._points[index] = new _multiLinePoint__WEBPACK_IMPORTED_MODULE_3__.MultiLinePoint(this);
                      }
                      return this._points[index];
                    };
                    MultiLine2.prototype.add = function() {
                      var _this = this;
                      var items = [];
                      for (var _i = 0; _i < arguments.length; _i++) {
                        items[_i] = arguments[_i];
                      }
                      return items.map(function(item) {
                        return _this.push(item);
                      });
                    };
                    MultiLine2.prototype.push = function(item) {
                      var point = this.getAt(this._points.length);
                      if (item == null) {
                        return point;
                      }
                      if (item instanceof core_Meshes_abstractMesh__WEBPACK_IMPORTED_MODULE_1__.AbstractMesh) {
                        point.mesh = item;
                      } else if (item instanceof _control__WEBPACK_IMPORTED_MODULE_2__.Control) {
                        point.control = item;
                      } else if (item.x != null && item.y != null) {
                        point.x = item.x;
                        point.y = item.y;
                      }
                      return point;
                    };
                    MultiLine2.prototype.remove = function(value) {
                      var index;
                      if (value instanceof _multiLinePoint__WEBPACK_IMPORTED_MODULE_3__.MultiLinePoint) {
                        index = this._points.indexOf(value);
                        if (index === -1) {
                          return;
                        }
                      } else {
                        index = value;
                      }
                      var point = this._points[index];
                      if (!point) {
                        return;
                      }
                      point.dispose();
                      this._points.splice(index, 1);
                    };
                    MultiLine2.prototype.reset = function() {
                      while (this._points.length > 0) {
                        this.remove(this._points.length - 1);
                      }
                    };
                    MultiLine2.prototype.resetLinks = function() {
                      this._points.forEach(function(point) {
                        if (point != null) {
                          point.resetLinks();
                        }
                      });
                    };
                    Object.defineProperty(MultiLine2.prototype, "lineWidth", {
                      /** Gets or sets line width */
                      get: function() {
                        return this._lineWidth;
                      },
                      set: function(value) {
                        if (this._lineWidth === value) {
                          return;
                        }
                        this._lineWidth = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MultiLine2.prototype, "horizontalAlignment", {
                      set: function(value) {
                        return;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MultiLine2.prototype, "verticalAlignment", {
                      set: function(value) {
                        return;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MultiLine2.prototype._getTypeName = function() {
                      return "MultiLine";
                    };
                    MultiLine2.prototype._draw = function(context) {
                      context.save();
                      if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                        context.shadowColor = this.shadowColor;
                        context.shadowBlur = this.shadowBlur;
                        context.shadowOffsetX = this.shadowOffsetX;
                        context.shadowOffsetY = this.shadowOffsetY;
                      }
                      this._applyStates(context);
                      context.strokeStyle = this.color;
                      context.lineWidth = this._lineWidth;
                      context.setLineDash(this._dash);
                      context.beginPath();
                      var first = true;
                      var previousPoint;
                      this._points.forEach(function(point) {
                        if (!point) {
                          return;
                        }
                        if (first) {
                          context.moveTo(point._point.x, point._point.y);
                          first = false;
                        } else {
                          if (point._point.z < 1 && previousPoint.z < 1) {
                            context.lineTo(point._point.x, point._point.y);
                          } else {
                            context.moveTo(point._point.x, point._point.y);
                          }
                        }
                        previousPoint = point._point;
                      });
                      context.stroke();
                      context.restore();
                    };
                    MultiLine2.prototype._additionalProcessing = function() {
                      var _this = this;
                      this._minX = null;
                      this._minY = null;
                      this._maxX = null;
                      this._maxY = null;
                      this._points.forEach(function(point) {
                        if (!point) {
                          return;
                        }
                        point.translate();
                        if (_this._minX == null || point._point.x < _this._minX) {
                          _this._minX = point._point.x;
                        }
                        if (_this._minY == null || point._point.y < _this._minY) {
                          _this._minY = point._point.y;
                        }
                        if (_this._maxX == null || point._point.x > _this._maxX) {
                          _this._maxX = point._point.x;
                        }
                        if (_this._maxY == null || point._point.y > _this._maxY) {
                          _this._maxY = point._point.y;
                        }
                      });
                      if (this._minX == null) {
                        this._minX = 0;
                      }
                      if (this._minY == null) {
                        this._minY = 0;
                      }
                      if (this._maxX == null) {
                        this._maxX = 0;
                      }
                      if (this._maxY == null) {
                        this._maxY = 0;
                      }
                    };
                    MultiLine2.prototype._measure = function() {
                      if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {
                        return;
                      }
                      this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;
                      this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;
                    };
                    MultiLine2.prototype._computeAlignment = function() {
                      if (this._minX == null || this._minY == null) {
                        return;
                      }
                      this._currentMeasure.left = this._minX - this._lineWidth / 2;
                      this._currentMeasure.top = this._minY - this._lineWidth / 2;
                    };
                    MultiLine2.prototype.dispose = function() {
                      this.reset();
                      _super.prototype.dispose.call(this);
                    };
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Meshes_abstractMesh__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MultiLine2.prototype, "dash", null);
                    return MultiLine2;
                  }(_control__WEBPACK_IMPORTED_MODULE_2__.Control)
                );
                (0, core_Meshes_abstractMesh__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.MultiLine", MultiLine);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/radioButton.js": (
              /*!********************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/radioButton.js ***!
                \********************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "RadioButton": () => (
                    /* binding */
                    RadioButton
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Misc/decorators */
                  "core/Misc/perfCounter"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__);
                var _control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./control */
                  "../../../lts/gui/dist/2D/controls/control.js"
                );
                var _stackPanel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./stackPanel */
                  "../../../lts/gui/dist/2D/controls/stackPanel.js"
                );
                var _textBlock__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
                  /*! ./textBlock */
                  "../../../lts/gui/dist/2D/controls/textBlock.js"
                );
                var RadioButton = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(RadioButton2, _super);
                    function RadioButton2(name) {
                      var _this = _super.call(this, name) || this;
                      _this.name = name;
                      _this._isChecked = false;
                      _this._background = "black";
                      _this._checkSizeRatio = 0.8;
                      _this._thickness = 1;
                      _this.group = "";
                      _this.onIsCheckedChangedObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this.isPointerBlocker = true;
                      return _this;
                    }
                    Object.defineProperty(RadioButton2.prototype, "thickness", {
                      /** Gets or sets border thickness */
                      get: function() {
                        return this._thickness;
                      },
                      set: function(value) {
                        if (this._thickness === value) {
                          return;
                        }
                        this._thickness = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(RadioButton2.prototype, "checkSizeRatio", {
                      /** Gets or sets a value indicating the ratio between overall size and check size */
                      get: function() {
                        return this._checkSizeRatio;
                      },
                      set: function(value) {
                        value = Math.max(Math.min(1, value), 0);
                        if (this._checkSizeRatio === value) {
                          return;
                        }
                        this._checkSizeRatio = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(RadioButton2.prototype, "background", {
                      /** Gets or sets background color */
                      get: function() {
                        return this._background;
                      },
                      set: function(value) {
                        if (this._background === value) {
                          return;
                        }
                        this._background = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(RadioButton2.prototype, "isChecked", {
                      /** Gets or sets a boolean indicating if the checkbox is checked or not */
                      get: function() {
                        return this._isChecked;
                      },
                      set: function(value) {
                        var _this = this;
                        if (this._isChecked === value) {
                          return;
                        }
                        this._isChecked = value;
                        this._markAsDirty();
                        this.onIsCheckedChangedObservable.notifyObservers(value);
                        if (this._isChecked && this._host) {
                          this._host.executeOnAllControls(function(control) {
                            if (control === _this) {
                              return;
                            }
                            if (control.group === void 0) {
                              return;
                            }
                            var childRadio = control;
                            if (childRadio.group === _this.group) {
                              childRadio.isChecked = false;
                            }
                          });
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    RadioButton2.prototype._getTypeName = function() {
                      return "RadioButton";
                    };
                    RadioButton2.prototype._draw = function(context) {
                      context.save();
                      this._applyStates(context);
                      var actualWidth = this._currentMeasure.width - this._thickness;
                      var actualHeight = this._currentMeasure.height - this._thickness;
                      if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                        context.shadowColor = this.shadowColor;
                        context.shadowBlur = this.shadowBlur;
                        context.shadowOffsetX = this.shadowOffsetX;
                        context.shadowOffsetY = this.shadowOffsetY;
                      }
                      _control__WEBPACK_IMPORTED_MODULE_2__.Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);
                      context.fillStyle = this._isEnabled ? this._background : this._disabledColor;
                      context.fill();
                      if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                        context.shadowBlur = 0;
                        context.shadowOffsetX = 0;
                        context.shadowOffsetY = 0;
                      }
                      context.strokeStyle = this.color;
                      context.lineWidth = this._thickness;
                      context.stroke();
                      if (this._isChecked) {
                        context.fillStyle = this._isEnabled ? this.color : this._disabledColor;
                        var offsetWidth = actualWidth * this._checkSizeRatio;
                        var offseHeight = actualHeight * this._checkSizeRatio;
                        _control__WEBPACK_IMPORTED_MODULE_2__.Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);
                        context.fill();
                      }
                      context.restore();
                    };
                    RadioButton2.prototype._onPointerDown = function(target, coordinates, pointerId, buttonIndex, pi) {
                      if (!_super.prototype._onPointerDown.call(this, target, coordinates, pointerId, buttonIndex, pi)) {
                        return false;
                      }
                      if (this.isReadOnly) {
                        return true;
                      }
                      if (!this.isChecked) {
                        this.isChecked = true;
                      }
                      return true;
                    };
                    RadioButton2.AddRadioButtonWithHeader = function(title, group, isChecked, onValueChanged) {
                      var panel = new _stackPanel__WEBPACK_IMPORTED_MODULE_3__.StackPanel();
                      panel.isVertical = false;
                      panel.height = "30px";
                      var radio = new RadioButton2();
                      radio.width = "20px";
                      radio.height = "20px";
                      radio.isChecked = isChecked;
                      radio.color = "green";
                      radio.group = group;
                      radio.onIsCheckedChangedObservable.add(function(value) {
                        return onValueChanged(radio, value);
                      });
                      panel.addControl(radio);
                      var header = new _textBlock__WEBPACK_IMPORTED_MODULE_4__.TextBlock();
                      header.text = title;
                      header.width = "180px";
                      header.paddingLeft = "5px";
                      header.textHorizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                      header.color = "white";
                      panel.addControl(header);
                      return panel;
                    };
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], RadioButton2.prototype, "thickness", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], RadioButton2.prototype, "group", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], RadioButton2.prototype, "checkSizeRatio", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], RadioButton2.prototype, "background", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], RadioButton2.prototype, "isChecked", null);
                    return RadioButton2;
                  }(_control__WEBPACK_IMPORTED_MODULE_2__.Control)
                );
                (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.RadioButton", RadioButton);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/rectangle.js": (
              /*!******************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/rectangle.js ***!
                \******************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "Rectangle": () => (
                    /* binding */
                    Rectangle
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var _container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./container */
                  "../../../lts/gui/dist/2D/controls/container.js"
                );
                var core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! core/Misc/decorators */
                  "core/Misc/perfCounter"
                );
                var core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2___default = __webpack_require__2.n(core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__);
                var Rectangle = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Rectangle2, _super);
                    function Rectangle2(name) {
                      var _this = _super.call(this, name) || this;
                      _this.name = name;
                      _this._thickness = 1;
                      _this._cornerRadius = 0;
                      return _this;
                    }
                    Object.defineProperty(Rectangle2.prototype, "thickness", {
                      /** Gets or sets border thickness */
                      get: function() {
                        return this._thickness;
                      },
                      set: function(value) {
                        if (this._thickness === value) {
                          return;
                        }
                        this._thickness = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Rectangle2.prototype, "cornerRadius", {
                      /** Gets or sets the corner radius angle */
                      get: function() {
                        return this._cornerRadius;
                      },
                      set: function(value) {
                        if (value < 0) {
                          value = 0;
                        }
                        if (this._cornerRadius === value) {
                          return;
                        }
                        this._cornerRadius = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Rectangle2.prototype._getTypeName = function() {
                      return "Rectangle";
                    };
                    Rectangle2.prototype._computeAdditionnalOffsetX = function() {
                      if (this._cornerRadius) {
                        return 1;
                      }
                      return 0;
                    };
                    Rectangle2.prototype._computeAdditionnalOffsetY = function() {
                      if (this._cornerRadius) {
                        return 1;
                      }
                      return 0;
                    };
                    Rectangle2.prototype._getRectangleFill = function(context) {
                      return this._getBackgroundColor(context);
                    };
                    Rectangle2.prototype._localDraw = function(context) {
                      context.save();
                      if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                        context.shadowColor = this.shadowColor;
                        context.shadowBlur = this.shadowBlur;
                        context.shadowOffsetX = this.shadowOffsetX;
                        context.shadowOffsetY = this.shadowOffsetY;
                      }
                      if (this._background || this._backgroundGradient) {
                        context.fillStyle = this._getRectangleFill(context);
                        if (this._cornerRadius) {
                          this._drawRoundedRect(context, this._thickness / 2);
                          context.fill();
                        } else {
                          context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
                        }
                      }
                      if (this._thickness) {
                        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                          context.shadowBlur = 0;
                          context.shadowOffsetX = 0;
                          context.shadowOffsetY = 0;
                        }
                        if (this.color || this.gradient) {
                          context.strokeStyle = this.gradient ? this.gradient.getCanvasGradient(context) : this.color;
                        }
                        context.lineWidth = this._thickness;
                        if (this._cornerRadius) {
                          this._drawRoundedRect(context, this._thickness / 2);
                          context.stroke();
                        } else {
                          context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);
                        }
                      }
                      context.restore();
                    };
                    Rectangle2.prototype._additionalProcessing = function(parentMeasure, context) {
                      _super.prototype._additionalProcessing.call(this, parentMeasure, context);
                      this._measureForChildren.width -= 2 * this._thickness;
                      this._measureForChildren.height -= 2 * this._thickness;
                      this._measureForChildren.left += this._thickness;
                      this._measureForChildren.top += this._thickness;
                    };
                    Rectangle2.prototype._drawRoundedRect = function(context, offset) {
                      if (offset === void 0) {
                        offset = 0;
                      }
                      var x = this._currentMeasure.left + offset;
                      var y = this._currentMeasure.top + offset;
                      var width = this._currentMeasure.width - offset * 2;
                      var height = this._currentMeasure.height - offset * 2;
                      var radius = Math.min(height / 2, Math.min(width / 2, this._cornerRadius));
                      radius = Math.abs(radius);
                      context.beginPath();
                      context.moveTo(x + radius, y);
                      context.lineTo(x + width - radius, y);
                      context.arc(x + width - radius, y + radius, radius, 3 * Math.PI / 2, Math.PI * 2);
                      context.lineTo(x + width, y + height - radius);
                      context.arc(x + width - radius, y + height - radius, radius, 0, Math.PI / 2);
                      context.lineTo(x + radius, y + height);
                      context.arc(x + radius, y + height - radius, radius, Math.PI / 2, Math.PI);
                      context.lineTo(x, y + radius);
                      context.arc(x + radius, y + radius, radius, Math.PI, 3 * Math.PI / 2);
                      context.closePath();
                    };
                    Rectangle2.prototype._clipForChildren = function(context) {
                      if (this._cornerRadius) {
                        this._drawRoundedRect(context, this._thickness);
                        context.clip();
                      }
                    };
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.serialize)()
                    ], Rectangle2.prototype, "thickness", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.serialize)()
                    ], Rectangle2.prototype, "cornerRadius", null);
                    return Rectangle2;
                  }(_container__WEBPACK_IMPORTED_MODULE_1__.Container)
                );
                (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.RegisterClass)("BABYLON.GUI.Rectangle", Rectangle);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/scrollViewers/scrollViewer.js": (
              /*!***********************************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/scrollViewers/scrollViewer.js ***!
                \***********************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "ScrollViewer": () => (
                    /* binding */
                    ScrollViewer
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var _rectangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ../rectangle */
                  "../../../lts/gui/dist/2D/controls/rectangle.js"
                );
                var _grid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ../grid */
                  "../../../lts/gui/dist/2D/controls/grid.js"
                );
                var _control__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ../control */
                  "../../../lts/gui/dist/2D/controls/control.js"
                );
                var _scrollViewerWindow__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
                  /*! ./scrollViewerWindow */
                  "../../../lts/gui/dist/2D/controls/scrollViewers/scrollViewerWindow.js"
                );
                var _sliders_scrollBar__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
                  /*! ../sliders/scrollBar */
                  "../../../lts/gui/dist/2D/controls/sliders/scrollBar.js"
                );
                var _sliders_imageScrollBar__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
                  /*! ../sliders/imageScrollBar */
                  "../../../lts/gui/dist/2D/controls/sliders/imageScrollBar.js"
                );
                var core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
                  /*! core/Misc/decorators */
                  "core/Misc/perfCounter"
                );
                var core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_7___default = __webpack_require__2.n(core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_7__);
                var ScrollViewer = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ScrollViewer2, _super);
                    function ScrollViewer2(name, isImageBased) {
                      var _this = _super.call(this, name) || this;
                      _this._barSize = 20;
                      _this._pointerIsOver = false;
                      _this._wheelPrecision = 0.05;
                      _this._thumbLength = 0.5;
                      _this._thumbHeight = 1;
                      _this._barImageHeight = 1;
                      _this._horizontalBarImageHeight = 1;
                      _this._verticalBarImageHeight = 1;
                      _this._oldWindowContentsWidth = 0;
                      _this._oldWindowContentsHeight = 0;
                      _this._forceHorizontalBar = false;
                      _this._forceVerticalBar = false;
                      _this._useImageBar = isImageBased ? isImageBased : false;
                      _this.onDirtyObservable.add(function() {
                        _this._horizontalBarSpace.color = _this.color;
                        _this._verticalBarSpace.color = _this.color;
                        _this._dragSpace.color = _this.color;
                      });
                      _this.onPointerEnterObservable.add(function() {
                        _this._pointerIsOver = true;
                      });
                      _this.onPointerOutObservable.add(function() {
                        _this._pointerIsOver = false;
                      });
                      _this._grid = new _grid__WEBPACK_IMPORTED_MODULE_2__.Grid();
                      if (_this._useImageBar) {
                        _this._horizontalBar = new _sliders_imageScrollBar__WEBPACK_IMPORTED_MODULE_6__.ImageScrollBar();
                        _this._verticalBar = new _sliders_imageScrollBar__WEBPACK_IMPORTED_MODULE_6__.ImageScrollBar();
                      } else {
                        _this._horizontalBar = new _sliders_scrollBar__WEBPACK_IMPORTED_MODULE_5__.ScrollBar();
                        _this._verticalBar = new _sliders_scrollBar__WEBPACK_IMPORTED_MODULE_5__.ScrollBar();
                      }
                      _this._window = new _scrollViewerWindow__WEBPACK_IMPORTED_MODULE_4__._ScrollViewerWindow("scrollViewer_window");
                      _this._window.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                      _this._window.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.VERTICAL_ALIGNMENT_TOP;
                      _this._grid.addColumnDefinition(1);
                      _this._grid.addColumnDefinition(0, true);
                      _this._grid.addRowDefinition(1);
                      _this._grid.addRowDefinition(0, true);
                      _super.prototype.addControl.call(_this, _this._grid);
                      _this._grid.addControl(_this._window, 0, 0);
                      _this._verticalBarSpace = new _rectangle__WEBPACK_IMPORTED_MODULE_1__.Rectangle();
                      _this._verticalBarSpace.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                      _this._verticalBarSpace.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.VERTICAL_ALIGNMENT_TOP;
                      _this._verticalBarSpace.thickness = 1;
                      _this._grid.addControl(_this._verticalBarSpace, 0, 1);
                      _this._addBar(_this._verticalBar, _this._verticalBarSpace, true, Math.PI);
                      _this._horizontalBarSpace = new _rectangle__WEBPACK_IMPORTED_MODULE_1__.Rectangle();
                      _this._horizontalBarSpace.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                      _this._horizontalBarSpace.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.VERTICAL_ALIGNMENT_TOP;
                      _this._horizontalBarSpace.thickness = 1;
                      _this._grid.addControl(_this._horizontalBarSpace, 1, 0);
                      _this._addBar(_this._horizontalBar, _this._horizontalBarSpace, false, 0);
                      _this._dragSpace = new _rectangle__WEBPACK_IMPORTED_MODULE_1__.Rectangle();
                      _this._dragSpace.thickness = 1;
                      _this._grid.addControl(_this._dragSpace, 1, 1);
                      if (!_this._useImageBar) {
                        _this.barColor = "grey";
                        _this.barBackground = "transparent";
                      }
                      return _this;
                    }
                    Object.defineProperty(ScrollViewer2.prototype, "horizontalBar", {
                      /**
                       * Gets the horizontal scrollbar
                       */
                      get: function() {
                        return this._horizontalBar;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ScrollViewer2.prototype, "verticalBar", {
                      /**
                       * Gets the vertical scrollbar
                       */
                      get: function() {
                        return this._verticalBar;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    ScrollViewer2.prototype.addControl = function(control) {
                      if (!control) {
                        return this;
                      }
                      this._window.addControl(control);
                      return this;
                    };
                    ScrollViewer2.prototype.removeControl = function(control) {
                      this._window.removeControl(control);
                      return this;
                    };
                    Object.defineProperty(ScrollViewer2.prototype, "children", {
                      /** Gets the list of children */
                      get: function() {
                        return this._window.children;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    ScrollViewer2.prototype._flagDescendantsAsMatrixDirty = function() {
                      for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
                        var child = _a[_i];
                        child._markMatrixAsDirty();
                      }
                    };
                    Object.defineProperty(ScrollViewer2.prototype, "freezeControls", {
                      /**
                       * Freezes or unfreezes the controls in the window.
                       * When controls are frozen, the scroll viewer can render a lot more quickly but updates to positions/sizes of controls
                       * are not taken into account. If you want to change positions/sizes, unfreeze, perform the changes then freeze again
                       */
                      get: function() {
                        return this._window.freezeControls;
                      },
                      set: function(value) {
                        this._window.freezeControls = value;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ScrollViewer2.prototype, "bucketWidth", {
                      /** Gets the bucket width */
                      get: function() {
                        return this._window.bucketWidth;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ScrollViewer2.prototype, "bucketHeight", {
                      /** Gets the bucket height */
                      get: function() {
                        return this._window.bucketHeight;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    ScrollViewer2.prototype.setBucketSizes = function(width, height) {
                      this._window.setBucketSizes(width, height);
                    };
                    Object.defineProperty(ScrollViewer2.prototype, "forceHorizontalBar", {
                      /**
                       * Forces the horizontal scroll bar to be displayed
                       */
                      get: function() {
                        return this._forceHorizontalBar;
                      },
                      set: function(value) {
                        this._grid.setRowDefinition(1, value ? this._barSize : 0, true);
                        this._horizontalBar.isVisible = value;
                        this._forceHorizontalBar = value;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ScrollViewer2.prototype, "forceVerticalBar", {
                      /**
                       * Forces the vertical scroll bar to be displayed
                       */
                      get: function() {
                        return this._forceVerticalBar;
                      },
                      set: function(value) {
                        this._grid.setColumnDefinition(1, value ? this._barSize : 0, true);
                        this._verticalBar.isVisible = value;
                        this._forceVerticalBar = value;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    ScrollViewer2.prototype.resetWindow = function() {
                      this._window.width = "100%";
                      this._window.height = "100%";
                    };
                    ScrollViewer2.prototype._getTypeName = function() {
                      return "ScrollViewer";
                    };
                    ScrollViewer2.prototype._buildClientSizes = function() {
                      var ratio = this.host.idealRatio;
                      this._window.parentClientWidth = this._currentMeasure.width - (this._verticalBar.isVisible || this.forceVerticalBar ? this._barSize * ratio : 0) - 2 * this.thickness;
                      this._window.parentClientHeight = this._currentMeasure.height - (this._horizontalBar.isVisible || this.forceHorizontalBar ? this._barSize * ratio : 0) - 2 * this.thickness;
                      this._clientWidth = this._window.parentClientWidth;
                      this._clientHeight = this._window.parentClientHeight;
                    };
                    ScrollViewer2.prototype._additionalProcessing = function(parentMeasure, context) {
                      _super.prototype._additionalProcessing.call(this, parentMeasure, context);
                      this._buildClientSizes();
                    };
                    ScrollViewer2.prototype._postMeasure = function() {
                      _super.prototype._postMeasure.call(this);
                      this._updateScroller();
                      this._setWindowPosition(false);
                    };
                    Object.defineProperty(ScrollViewer2.prototype, "wheelPrecision", {
                      /**
                       * Gets or sets the mouse wheel precision
                       * from 0 to 1 with a default value of 0.05
                       * */
                      get: function() {
                        return this._wheelPrecision;
                      },
                      set: function(value) {
                        if (this._wheelPrecision === value) {
                          return;
                        }
                        if (value < 0) {
                          value = 0;
                        }
                        if (value > 1) {
                          value = 1;
                        }
                        this._wheelPrecision = value;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ScrollViewer2.prototype, "scrollBackground", {
                      /** Gets or sets the scroll bar container background color */
                      get: function() {
                        return this._horizontalBarSpace.background;
                      },
                      set: function(color) {
                        if (this._horizontalBarSpace.background === color) {
                          return;
                        }
                        this._horizontalBarSpace.background = color;
                        this._verticalBarSpace.background = color;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ScrollViewer2.prototype, "barColor", {
                      /** Gets or sets the bar color */
                      get: function() {
                        return this._barColor;
                      },
                      set: function(color) {
                        if (this._barColor === color) {
                          return;
                        }
                        this._barColor = color;
                        this._horizontalBar.color = color;
                        this._verticalBar.color = color;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ScrollViewer2.prototype, "thumbImage", {
                      /** Gets or sets the bar image */
                      get: function() {
                        return this._barImage;
                      },
                      set: function(value) {
                        if (this._barImage === value) {
                          return;
                        }
                        this._barImage = value;
                        var hb = this._horizontalBar;
                        var vb = this._verticalBar;
                        hb.thumbImage = value;
                        vb.thumbImage = value;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ScrollViewer2.prototype, "horizontalThumbImage", {
                      /** Gets or sets the horizontal bar image */
                      get: function() {
                        return this._horizontalBarImage;
                      },
                      set: function(value) {
                        if (this._horizontalBarImage === value) {
                          return;
                        }
                        this._horizontalBarImage = value;
                        var hb = this._horizontalBar;
                        hb.thumbImage = value;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ScrollViewer2.prototype, "verticalThumbImage", {
                      /** Gets or sets the vertical bar image */
                      get: function() {
                        return this._verticalBarImage;
                      },
                      set: function(value) {
                        if (this._verticalBarImage === value) {
                          return;
                        }
                        this._verticalBarImage = value;
                        var vb = this._verticalBar;
                        vb.thumbImage = value;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ScrollViewer2.prototype, "barSize", {
                      /** Gets or sets the size of the bar */
                      get: function() {
                        return this._barSize;
                      },
                      set: function(value) {
                        if (this._barSize === value) {
                          return;
                        }
                        this._barSize = value;
                        this._markAsDirty();
                        if (this._horizontalBar.isVisible) {
                          this._grid.setRowDefinition(1, this._barSize, true);
                        }
                        if (this._verticalBar.isVisible) {
                          this._grid.setColumnDefinition(1, this._barSize, true);
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ScrollViewer2.prototype, "thumbLength", {
                      /** Gets or sets the length of the thumb */
                      get: function() {
                        return this._thumbLength;
                      },
                      set: function(value) {
                        if (this._thumbLength === value) {
                          return;
                        }
                        if (value <= 0) {
                          value = 0.1;
                        }
                        if (value > 1) {
                          value = 1;
                        }
                        this._thumbLength = value;
                        var hb = this._horizontalBar;
                        var vb = this._verticalBar;
                        hb.thumbLength = value;
                        vb.thumbLength = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ScrollViewer2.prototype, "thumbHeight", {
                      /** Gets or sets the height of the thumb */
                      get: function() {
                        return this._thumbHeight;
                      },
                      set: function(value) {
                        if (this._thumbHeight === value) {
                          return;
                        }
                        if (value <= 0) {
                          value = 0.1;
                        }
                        if (value > 1) {
                          value = 1;
                        }
                        this._thumbHeight = value;
                        var hb = this._horizontalBar;
                        var vb = this._verticalBar;
                        hb.thumbHeight = value;
                        vb.thumbHeight = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ScrollViewer2.prototype, "barImageHeight", {
                      /** Gets or sets the height of the bar image */
                      get: function() {
                        return this._barImageHeight;
                      },
                      set: function(value) {
                        if (this._barImageHeight === value) {
                          return;
                        }
                        if (value <= 0) {
                          value = 0.1;
                        }
                        if (value > 1) {
                          value = 1;
                        }
                        this._barImageHeight = value;
                        var hb = this._horizontalBar;
                        var vb = this._verticalBar;
                        hb.barImageHeight = value;
                        vb.barImageHeight = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ScrollViewer2.prototype, "horizontalBarImageHeight", {
                      /** Gets or sets the height of the horizontal bar image */
                      get: function() {
                        return this._horizontalBarImageHeight;
                      },
                      set: function(value) {
                        if (this._horizontalBarImageHeight === value) {
                          return;
                        }
                        if (value <= 0) {
                          value = 0.1;
                        }
                        if (value > 1) {
                          value = 1;
                        }
                        this._horizontalBarImageHeight = value;
                        var hb = this._horizontalBar;
                        hb.barImageHeight = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ScrollViewer2.prototype, "verticalBarImageHeight", {
                      /** Gets or sets the height of the vertical bar image */
                      get: function() {
                        return this._verticalBarImageHeight;
                      },
                      set: function(value) {
                        if (this._verticalBarImageHeight === value) {
                          return;
                        }
                        if (value <= 0) {
                          value = 0.1;
                        }
                        if (value > 1) {
                          value = 1;
                        }
                        this._verticalBarImageHeight = value;
                        var vb = this._verticalBar;
                        vb.barImageHeight = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ScrollViewer2.prototype, "barBackground", {
                      /** Gets or sets the bar background */
                      get: function() {
                        return this._barBackground;
                      },
                      set: function(color) {
                        if (this._barBackground === color) {
                          return;
                        }
                        this._barBackground = color;
                        var hb = this._horizontalBar;
                        var vb = this._verticalBar;
                        hb.background = color;
                        vb.background = color;
                        this._dragSpace.background = color;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ScrollViewer2.prototype, "barImage", {
                      /** Gets or sets the bar background image */
                      get: function() {
                        return this._barBackgroundImage;
                      },
                      set: function(value) {
                        this._barBackgroundImage = value;
                        var hb = this._horizontalBar;
                        var vb = this._verticalBar;
                        hb.backgroundImage = value;
                        vb.backgroundImage = value;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ScrollViewer2.prototype, "horizontalBarImage", {
                      /** Gets or sets the horizontal bar background image */
                      get: function() {
                        return this._horizontalBarBackgroundImage;
                      },
                      set: function(value) {
                        this._horizontalBarBackgroundImage = value;
                        var hb = this._horizontalBar;
                        hb.backgroundImage = value;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ScrollViewer2.prototype, "verticalBarImage", {
                      /** Gets or sets the vertical bar background image */
                      get: function() {
                        return this._verticalBarBackgroundImage;
                      },
                      set: function(value) {
                        this._verticalBarBackgroundImage = value;
                        var vb = this._verticalBar;
                        vb.backgroundImage = value;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    ScrollViewer2.prototype._setWindowPosition = function(force) {
                      if (force === void 0) {
                        force = true;
                      }
                      var ratio = this.host.idealRatio;
                      var windowContentsWidth = this._window._currentMeasure.width;
                      var windowContentsHeight = this._window._currentMeasure.height;
                      if (!force && this._oldWindowContentsWidth === windowContentsWidth && this._oldWindowContentsHeight === windowContentsHeight) {
                        return;
                      }
                      this._oldWindowContentsWidth = windowContentsWidth;
                      this._oldWindowContentsHeight = windowContentsHeight;
                      var _endLeft = this._clientWidth - windowContentsWidth;
                      var _endTop = this._clientHeight - windowContentsHeight;
                      var newLeft = this._horizontalBar.value / ratio * _endLeft + "px";
                      var newTop = this._verticalBar.value / ratio * _endTop + "px";
                      if (newLeft !== this._window.left) {
                        this._window.left = newLeft;
                        if (!this.freezeControls) {
                          this._rebuildLayout = true;
                        }
                      }
                      if (newTop !== this._window.top) {
                        this._window.top = newTop;
                        if (!this.freezeControls) {
                          this._rebuildLayout = true;
                        }
                      }
                    };
                    ScrollViewer2.prototype._updateScroller = function() {
                      var windowContentsWidth = this._window._currentMeasure.width;
                      var windowContentsHeight = this._window._currentMeasure.height;
                      if (this._horizontalBar.isVisible && windowContentsWidth <= this._clientWidth && !this.forceHorizontalBar) {
                        this._grid.setRowDefinition(1, 0, true);
                        this._horizontalBar.isVisible = false;
                        this._horizontalBar.value = 0;
                        this._rebuildLayout = true;
                      } else if (!this._horizontalBar.isVisible && (windowContentsWidth > this._clientWidth || this.forceHorizontalBar)) {
                        this._grid.setRowDefinition(1, this._barSize, true);
                        this._horizontalBar.isVisible = true;
                        this._rebuildLayout = true;
                      }
                      if (this._verticalBar.isVisible && windowContentsHeight <= this._clientHeight && !this.forceVerticalBar) {
                        this._grid.setColumnDefinition(1, 0, true);
                        this._verticalBar.isVisible = false;
                        this._verticalBar.value = 0;
                        this._rebuildLayout = true;
                      } else if (!this._verticalBar.isVisible && (windowContentsHeight > this._clientHeight || this.forceVerticalBar)) {
                        this._grid.setColumnDefinition(1, this._barSize, true);
                        this._verticalBar.isVisible = true;
                        this._rebuildLayout = true;
                      }
                      this._buildClientSizes();
                      var ratio = this.host.idealRatio;
                      this._horizontalBar.thumbWidth = this._thumbLength * 0.9 * (this._clientWidth / ratio) + "px";
                      this._verticalBar.thumbWidth = this._thumbLength * 0.9 * (this._clientHeight / ratio) + "px";
                    };
                    ScrollViewer2.prototype._link = function(host) {
                      _super.prototype._link.call(this, host);
                      this._attachWheel();
                    };
                    ScrollViewer2.prototype._addBar = function(barControl, barContainer, isVertical, rotation) {
                      var _this = this;
                      barControl.paddingLeft = 0;
                      barControl.width = "100%";
                      barControl.height = "100%";
                      barControl.barOffset = 0;
                      barControl.value = 0;
                      barControl.maximum = 1;
                      barControl.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.HORIZONTAL_ALIGNMENT_CENTER;
                      barControl.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.VERTICAL_ALIGNMENT_CENTER;
                      barControl.isVertical = isVertical;
                      barControl.rotation = rotation;
                      barControl.isVisible = false;
                      barContainer.addControl(barControl);
                      barControl.onValueChangedObservable.add(function() {
                        _this._setWindowPosition();
                      });
                    };
                    ScrollViewer2.prototype._attachWheel = function() {
                      var _this = this;
                      if (!this._host || this._onWheelObserver) {
                        return;
                      }
                      this._onWheelObserver = this.onWheelObservable.add(function(pi) {
                        if (!_this._pointerIsOver || _this.isReadOnly) {
                          return;
                        }
                        if (_this._verticalBar.isVisible == true) {
                          if (pi.y < 0 && _this._verticalBar.value > 0) {
                            _this._verticalBar.value -= _this._wheelPrecision;
                          } else if (pi.y > 0 && _this._verticalBar.value < _this._verticalBar.maximum) {
                            _this._verticalBar.value += _this._wheelPrecision;
                          }
                        }
                        if (_this._horizontalBar.isVisible == true) {
                          if (pi.x < 0 && _this._horizontalBar.value < _this._horizontalBar.maximum) {
                            _this._horizontalBar.value += _this._wheelPrecision;
                          } else if (pi.x > 0 && _this._horizontalBar.value > 0) {
                            _this._horizontalBar.value -= _this._wheelPrecision;
                          }
                        }
                      });
                    };
                    ScrollViewer2.prototype._renderHighlightSpecific = function(context) {
                      if (!this.isHighlighted) {
                        return;
                      }
                      _super.prototype._renderHighlightSpecific.call(this, context);
                      this._grid._renderHighlightSpecific(context);
                      context.restore();
                    };
                    ScrollViewer2.prototype.dispose = function() {
                      this.onWheelObservable.remove(this._onWheelObserver);
                      this._onWheelObserver = null;
                      _super.prototype.dispose.call(this);
                    };
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_7__.serialize)()
                    ], ScrollViewer2.prototype, "wheelPrecision", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_7__.serialize)()
                    ], ScrollViewer2.prototype, "scrollBackground", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_7__.serialize)()
                    ], ScrollViewer2.prototype, "barColor", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_7__.serialize)()
                    ], ScrollViewer2.prototype, "barSize", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_7__.serialize)()
                    ], ScrollViewer2.prototype, "barBackground", null);
                    return ScrollViewer2;
                  }(_rectangle__WEBPACK_IMPORTED_MODULE_1__.Rectangle)
                );
                (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_7__.RegisterClass)("BABYLON.GUI.ScrollViewer", ScrollViewer);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/scrollViewers/scrollViewerWindow.js": (
              /*!*****************************************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/scrollViewers/scrollViewerWindow.js ***!
                \*****************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "_ScrollViewerWindow": () => (
                    /* binding */
                    _ScrollViewerWindow
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var _measure__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ../../measure */
                  "../../../lts/gui/dist/2D/measure.js"
                );
                var _container__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ../container */
                  "../../../lts/gui/dist/2D/controls/container.js"
                );
                var _valueAndUnit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ../../valueAndUnit */
                  "../../../lts/gui/dist/2D/valueAndUnit.js"
                );
                var _control__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
                  /*! ../control */
                  "../../../lts/gui/dist/2D/controls/control.js"
                );
                var _ScrollViewerWindow = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(_ScrollViewerWindow2, _super);
                    function _ScrollViewerWindow2(name) {
                      var _this = _super.call(this, name) || this;
                      _this._freezeControls = false;
                      _this._bucketWidth = 0;
                      _this._bucketHeight = 0;
                      _this._buckets = {};
                      return _this;
                    }
                    Object.defineProperty(_ScrollViewerWindow2.prototype, "freezeControls", {
                      get: function() {
                        return this._freezeControls;
                      },
                      set: function(value) {
                        if (this._freezeControls === value) {
                          return;
                        }
                        if (!value) {
                          this._restoreMeasures();
                        }
                        this._freezeControls = false;
                        var textureSize = this.host.getSize();
                        var renderWidth = textureSize.width;
                        var renderHeight = textureSize.height;
                        var context = this.host.getContext();
                        var measure = new _measure__WEBPACK_IMPORTED_MODULE_1__.Measure(0, 0, renderWidth, renderHeight);
                        this.host._numLayoutCalls = 0;
                        this.host._rootContainer._layout(measure, context);
                        if (value) {
                          this._updateMeasures();
                          if (this._useBuckets()) {
                            this._makeBuckets();
                          }
                        }
                        this._freezeControls = value;
                        this.host.markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(_ScrollViewerWindow2.prototype, "bucketWidth", {
                      get: function() {
                        return this._bucketWidth;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(_ScrollViewerWindow2.prototype, "bucketHeight", {
                      get: function() {
                        return this._bucketHeight;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    _ScrollViewerWindow2.prototype.setBucketSizes = function(width, height) {
                      this._bucketWidth = width;
                      this._bucketHeight = height;
                      if (this._useBuckets()) {
                        if (this._freezeControls) {
                          this._makeBuckets();
                        }
                      } else {
                        this._buckets = {};
                      }
                    };
                    _ScrollViewerWindow2.prototype._useBuckets = function() {
                      return this._bucketWidth > 0 && this._bucketHeight > 0;
                    };
                    _ScrollViewerWindow2.prototype._makeBuckets = function() {
                      this._buckets = {};
                      this._bucketLen = Math.ceil(this.widthInPixels / this._bucketWidth);
                      this._dispatchInBuckets(this._children);
                      this._oldLeft = null;
                      this._oldTop = null;
                    };
                    _ScrollViewerWindow2.prototype._dispatchInBuckets = function(children) {
                      for (var i = 0; i < children.length; ++i) {
                        var child = children[i];
                        var bStartX = Math.max(0, Math.floor((child._customData._origLeft - this._customData.origLeft) / this._bucketWidth)), bEndX = Math.floor((child._customData._origLeft - this._customData.origLeft + child._currentMeasure.width - 1) / this._bucketWidth), bEndY = Math.floor((child._customData._origTop - this._customData.origTop + child._currentMeasure.height - 1) / this._bucketHeight);
                        var bStartY = Math.max(0, Math.floor((child._customData._origTop - this._customData.origTop) / this._bucketHeight));
                        while (bStartY <= bEndY) {
                          for (var x = bStartX; x <= bEndX; ++x) {
                            var bucket = bStartY * this._bucketLen + x;
                            var lstc = this._buckets[bucket];
                            if (!lstc) {
                              lstc = [];
                              this._buckets[bucket] = lstc;
                            }
                            lstc.push(child);
                          }
                          bStartY++;
                        }
                        if (child instanceof _container__WEBPACK_IMPORTED_MODULE_2__.Container && child._children.length > 0) {
                          this._dispatchInBuckets(child._children);
                        }
                      }
                    };
                    _ScrollViewerWindow2.prototype._updateMeasures = function() {
                      var left = this.leftInPixels | 0, top = this.topInPixels | 0;
                      this._measureForChildren.left -= left;
                      this._measureForChildren.top -= top;
                      this._currentMeasure.left -= left;
                      this._currentMeasure.top -= top;
                      this._customData.origLeftForChildren = this._measureForChildren.left;
                      this._customData.origTopForChildren = this._measureForChildren.top;
                      this._customData.origLeft = this._currentMeasure.left;
                      this._customData.origTop = this._currentMeasure.top;
                      this._updateChildrenMeasures(this._children, left, top);
                    };
                    _ScrollViewerWindow2.prototype._updateChildrenMeasures = function(children, left, top) {
                      for (var i = 0; i < children.length; ++i) {
                        var child = children[i];
                        child._currentMeasure.left -= left;
                        child._currentMeasure.top -= top;
                        child._customData._origLeft = child._currentMeasure.left;
                        child._customData._origTop = child._currentMeasure.top;
                        if (child instanceof _container__WEBPACK_IMPORTED_MODULE_2__.Container && child._children.length > 0) {
                          this._updateChildrenMeasures(child._children, left, top);
                        }
                      }
                    };
                    _ScrollViewerWindow2.prototype._restoreMeasures = function() {
                      var left = this.leftInPixels | 0, top = this.topInPixels | 0;
                      this._measureForChildren.left = this._customData.origLeftForChildren + left;
                      this._measureForChildren.top = this._customData.origTopForChildren + top;
                      this._currentMeasure.left = this._customData.origLeft + left;
                      this._currentMeasure.top = this._customData.origTop + top;
                    };
                    _ScrollViewerWindow2.prototype._getTypeName = function() {
                      return "ScrollViewerWindow";
                    };
                    _ScrollViewerWindow2.prototype._additionalProcessing = function(parentMeasure, context) {
                      _super.prototype._additionalProcessing.call(this, parentMeasure, context);
                      this._parentMeasure = parentMeasure;
                      this._measureForChildren.left = this._currentMeasure.left;
                      this._measureForChildren.top = this._currentMeasure.top;
                      this._measureForChildren.width = parentMeasure.width;
                      this._measureForChildren.height = parentMeasure.height;
                    };
                    _ScrollViewerWindow2.prototype._layout = function(parentMeasure, context) {
                      if (this._freezeControls) {
                        this.invalidateRect();
                        return false;
                      }
                      return _super.prototype._layout.call(this, parentMeasure, context);
                    };
                    _ScrollViewerWindow2.prototype._scrollChildren = function(children, left, top) {
                      for (var i = 0; i < children.length; ++i) {
                        var child = children[i];
                        child._currentMeasure.left = child._customData._origLeft + left;
                        child._currentMeasure.top = child._customData._origTop + top;
                        child._isClipped = false;
                        if (child instanceof _container__WEBPACK_IMPORTED_MODULE_2__.Container && child._children.length > 0) {
                          this._scrollChildren(child._children, left, top);
                        }
                      }
                    };
                    _ScrollViewerWindow2.prototype._scrollChildrenWithBuckets = function(left, top, scrollLeft, scrollTop) {
                      var bStartX = Math.max(0, Math.floor(-left / this._bucketWidth)), bEndX = Math.floor((-left + this._parentMeasure.width - 1) / this._bucketWidth), bEndY = Math.floor((-top + this._parentMeasure.height - 1) / this._bucketHeight);
                      var bStartY = Math.max(0, Math.floor(-top / this._bucketHeight));
                      while (bStartY <= bEndY) {
                        for (var x = bStartX; x <= bEndX; ++x) {
                          var bucket = bStartY * this._bucketLen + x, lstc = this._buckets[bucket];
                          if (lstc) {
                            for (var i = 0; i < lstc.length; ++i) {
                              var child = lstc[i];
                              child._currentMeasure.left = child._customData._origLeft + scrollLeft;
                              child._currentMeasure.top = child._customData._origTop + scrollTop;
                              child._isClipped = false;
                            }
                          }
                        }
                        bStartY++;
                      }
                    };
                    _ScrollViewerWindow2.prototype._draw = function(context, invalidatedRectangle) {
                      if (!this._freezeControls) {
                        _super.prototype._draw.call(this, context, invalidatedRectangle);
                        return;
                      }
                      this._localDraw(context);
                      if (this.clipChildren) {
                        this._clipForChildren(context);
                      }
                      var left = this.leftInPixels | 0, top = this.topInPixels | 0;
                      if (this._useBuckets()) {
                        if (this._oldLeft !== null && this._oldTop !== null) {
                          this._scrollChildrenWithBuckets(this._oldLeft, this._oldTop, left, top);
                          this._scrollChildrenWithBuckets(left, top, left, top);
                        } else {
                          this._scrollChildren(this._children, left, top);
                        }
                      } else {
                        this._scrollChildren(this._children, left, top);
                      }
                      this._oldLeft = left;
                      this._oldTop = top;
                      for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
                        var child = _a[_i];
                        if (!child._intersectsRect(this._parentMeasure)) {
                          continue;
                        }
                        child._render(context, this._parentMeasure);
                      }
                    };
                    _ScrollViewerWindow2.prototype._postMeasure = function() {
                      if (this._freezeControls) {
                        _super.prototype._postMeasure.call(this);
                        return;
                      }
                      var maxWidth = this.parentClientWidth;
                      var maxHeight = this.parentClientHeight;
                      for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
                        var child = _a[_i];
                        if (!child.isVisible || child.notRenderable) {
                          continue;
                        }
                        if (child.horizontalAlignment === _control__WEBPACK_IMPORTED_MODULE_4__.Control.HORIZONTAL_ALIGNMENT_CENTER) {
                          child._offsetLeft(this._currentMeasure.left - child._currentMeasure.left);
                        }
                        if (child.verticalAlignment === _control__WEBPACK_IMPORTED_MODULE_4__.Control.VERTICAL_ALIGNMENT_CENTER) {
                          child._offsetTop(this._currentMeasure.top - child._currentMeasure.top);
                        }
                        maxWidth = Math.max(maxWidth, child._currentMeasure.left - this._currentMeasure.left + child._currentMeasure.width + child.paddingRightInPixels);
                        maxHeight = Math.max(maxHeight, child._currentMeasure.top - this._currentMeasure.top + child._currentMeasure.height + child.paddingBottomInPixels);
                      }
                      if (this._currentMeasure.width !== maxWidth) {
                        this._width.updateInPlace(maxWidth, _valueAndUnit__WEBPACK_IMPORTED_MODULE_3__.ValueAndUnit.UNITMODE_PIXEL);
                        this._currentMeasure.width = maxWidth;
                        this._rebuildLayout = true;
                        this._isDirty = true;
                      }
                      if (this._currentMeasure.height !== maxHeight) {
                        this._height.updateInPlace(maxHeight, _valueAndUnit__WEBPACK_IMPORTED_MODULE_3__.ValueAndUnit.UNITMODE_PIXEL);
                        this._currentMeasure.height = maxHeight;
                        this._rebuildLayout = true;
                        this._isDirty = true;
                      }
                      _super.prototype._postMeasure.call(this);
                    };
                    return _ScrollViewerWindow2;
                  }(_container__WEBPACK_IMPORTED_MODULE_2__.Container)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/selector.js": (
              /*!*****************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/selector.js ***!
                \*****************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "CheckboxGroup": () => (
                    /* binding */
                    CheckboxGroup
                  ),
                  /* harmony export */
                  "RadioGroup": () => (
                    /* binding */
                    RadioGroup
                  ),
                  /* harmony export */
                  "SelectionPanel": () => (
                    /* binding */
                    SelectionPanel
                  ),
                  /* harmony export */
                  "SelectorGroup": () => (
                    /* binding */
                    SelectorGroup
                  ),
                  /* harmony export */
                  "SliderGroup": () => (
                    /* binding */
                    SliderGroup
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var _rectangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./rectangle */
                  "../../../lts/gui/dist/2D/controls/rectangle.js"
                );
                var _stackPanel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./stackPanel */
                  "../../../lts/gui/dist/2D/controls/stackPanel.js"
                );
                var _control__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./control */
                  "../../../lts/gui/dist/2D/controls/control.js"
                );
                var _textBlock__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
                  /*! ./textBlock */
                  "../../../lts/gui/dist/2D/controls/textBlock.js"
                );
                var _checkbox__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
                  /*! ./checkbox */
                  "../../../lts/gui/dist/2D/controls/checkbox.js"
                );
                var _radioButton__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
                  /*! ./radioButton */
                  "../../../lts/gui/dist/2D/controls/radioButton.js"
                );
                var _sliders_slider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
                  /*! ./sliders/slider */
                  "../../../lts/gui/dist/2D/controls/sliders/slider.js"
                );
                var _container__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__2(
                  /*! ./container */
                  "../../../lts/gui/dist/2D/controls/container.js"
                );
                var SelectorGroup = (
                  /** @class */
                  function() {
                    function SelectorGroup2(name) {
                      this.name = name;
                      this._groupPanel = new _stackPanel__WEBPACK_IMPORTED_MODULE_2__.StackPanel();
                      this._selectors = new Array();
                      this._groupPanel.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.VERTICAL_ALIGNMENT_TOP;
                      this._groupPanel.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                      this._groupHeader = this._addGroupHeader(name);
                    }
                    Object.defineProperty(SelectorGroup2.prototype, "groupPanel", {
                      /** Gets the groupPanel of the SelectorGroup  */
                      get: function() {
                        return this._groupPanel;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(SelectorGroup2.prototype, "selectors", {
                      /** Gets the selectors array */
                      get: function() {
                        return this._selectors;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(SelectorGroup2.prototype, "header", {
                      /** Gets and sets the group header */
                      get: function() {
                        return this._groupHeader.text;
                      },
                      set: function(label) {
                        if (this._groupHeader.text === "label") {
                          return;
                        }
                        this._groupHeader.text = label;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    SelectorGroup2.prototype._addGroupHeader = function(text) {
                      var groupHeading = new _textBlock__WEBPACK_IMPORTED_MODULE_4__.TextBlock("groupHead", text);
                      groupHeading.width = 0.9;
                      groupHeading.height = "30px";
                      groupHeading.textWrapping = true;
                      groupHeading.color = "black";
                      groupHeading.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                      groupHeading.textHorizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                      groupHeading.left = "2px";
                      this._groupPanel.addControl(groupHeading);
                      return groupHeading;
                    };
                    SelectorGroup2.prototype._getSelector = function(selectorNb) {
                      if (selectorNb < 0 || selectorNb >= this._selectors.length) {
                        return;
                      }
                      return this._selectors[selectorNb];
                    };
                    SelectorGroup2.prototype.removeSelector = function(selectorNb) {
                      if (selectorNb < 0 || selectorNb >= this._selectors.length) {
                        return;
                      }
                      this._groupPanel.removeControl(this._selectors[selectorNb]);
                      this._selectors.splice(selectorNb, 1);
                    };
                    return SelectorGroup2;
                  }()
                );
                var CheckboxGroup = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(CheckboxGroup2, _super);
                    function CheckboxGroup2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    CheckboxGroup2.prototype.addCheckbox = function(text, func, checked) {
                      if (func === void 0) {
                        func = function(s) {
                        };
                      }
                      if (checked === void 0) {
                        checked = false;
                      }
                      checked = checked || false;
                      var button = new _checkbox__WEBPACK_IMPORTED_MODULE_5__.Checkbox();
                      button.width = "20px";
                      button.height = "20px";
                      button.color = "#364249";
                      button.background = "#CCCCCC";
                      button.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                      button.onIsCheckedChangedObservable.add(function(state) {
                        func(state);
                      });
                      var _selector = _control__WEBPACK_IMPORTED_MODULE_3__.Control.AddHeader(button, text, "200px", { isHorizontal: true, controlFirst: true });
                      _selector.height = "30px";
                      _selector.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                      _selector.left = "4px";
                      this.groupPanel.addControl(_selector);
                      this.selectors.push(_selector);
                      button.isChecked = checked;
                      if (this.groupPanel.parent && this.groupPanel.parent.parent) {
                        button.color = this.groupPanel.parent.parent.buttonColor;
                        button.background = this.groupPanel.parent.parent.buttonBackground;
                      }
                    };
                    CheckboxGroup2.prototype._setSelectorLabel = function(selectorNb, label) {
                      this.selectors[selectorNb].children[1].text = label;
                    };
                    CheckboxGroup2.prototype._setSelectorLabelColor = function(selectorNb, color) {
                      this.selectors[selectorNb].children[1].color = color;
                    };
                    CheckboxGroup2.prototype._setSelectorButtonColor = function(selectorNb, color) {
                      this.selectors[selectorNb].children[0].color = color;
                    };
                    CheckboxGroup2.prototype._setSelectorButtonBackground = function(selectorNb, color) {
                      this.selectors[selectorNb].children[0].background = color;
                    };
                    return CheckboxGroup2;
                  }(SelectorGroup)
                );
                var RadioGroup = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(RadioGroup2, _super);
                    function RadioGroup2() {
                      var _this = _super !== null && _super.apply(this, arguments) || this;
                      _this._selectNb = 0;
                      return _this;
                    }
                    RadioGroup2.prototype.addRadio = function(label, func, checked) {
                      if (func === void 0) {
                        func = function(n) {
                        };
                      }
                      if (checked === void 0) {
                        checked = false;
                      }
                      var nb = this._selectNb++;
                      var button = new _radioButton__WEBPACK_IMPORTED_MODULE_6__.RadioButton();
                      button.name = label;
                      button.width = "20px";
                      button.height = "20px";
                      button.color = "#364249";
                      button.background = "#CCCCCC";
                      button.group = this.name;
                      button.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                      button.onIsCheckedChangedObservable.add(function(state) {
                        if (state) {
                          func(nb);
                        }
                      });
                      var _selector = _control__WEBPACK_IMPORTED_MODULE_3__.Control.AddHeader(button, label, "200px", { isHorizontal: true, controlFirst: true });
                      _selector.height = "30px";
                      _selector.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                      _selector.left = "4px";
                      this.groupPanel.addControl(_selector);
                      this.selectors.push(_selector);
                      button.isChecked = checked;
                      if (this.groupPanel.parent && this.groupPanel.parent.parent) {
                        button.color = this.groupPanel.parent.parent.buttonColor;
                        button.background = this.groupPanel.parent.parent.buttonBackground;
                      }
                    };
                    RadioGroup2.prototype._setSelectorLabel = function(selectorNb, label) {
                      this.selectors[selectorNb].children[1].text = label;
                    };
                    RadioGroup2.prototype._setSelectorLabelColor = function(selectorNb, color) {
                      this.selectors[selectorNb].children[1].color = color;
                    };
                    RadioGroup2.prototype._setSelectorButtonColor = function(selectorNb, color) {
                      this.selectors[selectorNb].children[0].color = color;
                    };
                    RadioGroup2.prototype._setSelectorButtonBackground = function(selectorNb, color) {
                      this.selectors[selectorNb].children[0].background = color;
                    };
                    return RadioGroup2;
                  }(SelectorGroup)
                );
                var SliderGroup = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(SliderGroup2, _super);
                    function SliderGroup2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    SliderGroup2.prototype.addSlider = function(label, func, unit, min, max, value, onValueChange) {
                      if (func === void 0) {
                        func = function(v) {
                        };
                      }
                      if (unit === void 0) {
                        unit = "Units";
                      }
                      if (min === void 0) {
                        min = 0;
                      }
                      if (max === void 0) {
                        max = 0;
                      }
                      if (value === void 0) {
                        value = 0;
                      }
                      if (onValueChange === void 0) {
                        onValueChange = function(v) {
                          return v | 0;
                        };
                      }
                      var button = new _sliders_slider__WEBPACK_IMPORTED_MODULE_7__.Slider();
                      button.name = unit;
                      button.value = value;
                      button.minimum = min;
                      button.maximum = max;
                      button.width = 0.9;
                      button.height = "20px";
                      button.color = "#364249";
                      button.background = "#CCCCCC";
                      button.borderColor = "black";
                      button.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                      button.left = "4px";
                      button.paddingBottom = "4px";
                      button.onValueChangedObservable.add(function(value2) {
                        button.parent.children[0].text = button.parent.children[0].name + ": " + onValueChange(value2) + " " + button.name;
                        func(value2);
                      });
                      var _selector = _control__WEBPACK_IMPORTED_MODULE_3__.Control.AddHeader(button, label + ": " + onValueChange(value) + " " + unit, "30px", { isHorizontal: false, controlFirst: false });
                      _selector.height = "60px";
                      _selector.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                      _selector.left = "4px";
                      _selector.children[0].name = label;
                      this.groupPanel.addControl(_selector);
                      this.selectors.push(_selector);
                      if (this.groupPanel.parent && this.groupPanel.parent.parent) {
                        button.color = this.groupPanel.parent.parent.buttonColor;
                        button.background = this.groupPanel.parent.parent.buttonBackground;
                      }
                    };
                    SliderGroup2.prototype._setSelectorLabel = function(selectorNb, label) {
                      this.selectors[selectorNb].children[0].name = label;
                      this.selectors[selectorNb].children[0].text = label + ": " + this.selectors[selectorNb].children[1].value + " " + this.selectors[selectorNb].children[1].name;
                    };
                    SliderGroup2.prototype._setSelectorLabelColor = function(selectorNb, color) {
                      this.selectors[selectorNb].children[0].color = color;
                    };
                    SliderGroup2.prototype._setSelectorButtonColor = function(selectorNb, color) {
                      this.selectors[selectorNb].children[1].color = color;
                    };
                    SliderGroup2.prototype._setSelectorButtonBackground = function(selectorNb, color) {
                      this.selectors[selectorNb].children[1].background = color;
                    };
                    return SliderGroup2;
                  }(SelectorGroup)
                );
                var SelectionPanel = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(SelectionPanel2, _super);
                    function SelectionPanel2(name, groups) {
                      if (groups === void 0) {
                        groups = [];
                      }
                      var _this = _super.call(this, name) || this;
                      _this.name = name;
                      _this.groups = groups;
                      _this._buttonColor = "#364249";
                      _this._buttonBackground = "#CCCCCC";
                      _this._headerColor = "black";
                      _this._barColor = "white";
                      _this._barHeight = "2px";
                      _this._spacerHeight = "20px";
                      _this._bars = new Array();
                      _this._groups = groups;
                      _this.thickness = 2;
                      _this._panel = new _stackPanel__WEBPACK_IMPORTED_MODULE_2__.StackPanel();
                      _this._panel.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.VERTICAL_ALIGNMENT_TOP;
                      _this._panel.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                      _this._panel.top = 5;
                      _this._panel.left = 5;
                      _this._panel.width = 0.95;
                      if (groups.length > 0) {
                        for (var i = 0; i < groups.length - 1; i++) {
                          _this._panel.addControl(groups[i].groupPanel);
                          _this._addSpacer();
                        }
                        _this._panel.addControl(groups[groups.length - 1].groupPanel);
                      }
                      _this.addControl(_this._panel);
                      return _this;
                    }
                    SelectionPanel2.prototype._getTypeName = function() {
                      return "SelectionPanel";
                    };
                    Object.defineProperty(SelectionPanel2.prototype, "panel", {
                      /** Gets the (stack) panel of the SelectionPanel  */
                      get: function() {
                        return this._panel;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(SelectionPanel2.prototype, "headerColor", {
                      /** Gets or sets the headerColor */
                      get: function() {
                        return this._headerColor;
                      },
                      set: function(color) {
                        if (this._headerColor === color) {
                          return;
                        }
                        this._headerColor = color;
                        this._setHeaderColor();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    SelectionPanel2.prototype._setHeaderColor = function() {
                      for (var i = 0; i < this._groups.length; i++) {
                        this._groups[i].groupPanel.children[0].color = this._headerColor;
                      }
                    };
                    Object.defineProperty(SelectionPanel2.prototype, "buttonColor", {
                      /** Gets or sets the button color */
                      get: function() {
                        return this._buttonColor;
                      },
                      set: function(color) {
                        if (this._buttonColor === color) {
                          return;
                        }
                        this._buttonColor = color;
                        this._setbuttonColor();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    SelectionPanel2.prototype._setbuttonColor = function() {
                      for (var i = 0; i < this._groups.length; i++) {
                        for (var j = 0; j < this._groups[i].selectors.length; j++) {
                          this._groups[i]._setSelectorButtonColor(j, this._buttonColor);
                        }
                      }
                    };
                    Object.defineProperty(SelectionPanel2.prototype, "labelColor", {
                      /** Gets or sets the label color */
                      get: function() {
                        return this._labelColor;
                      },
                      set: function(color) {
                        if (this._labelColor === color) {
                          return;
                        }
                        this._labelColor = color;
                        this._setLabelColor();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    SelectionPanel2.prototype._setLabelColor = function() {
                      for (var i = 0; i < this._groups.length; i++) {
                        for (var j = 0; j < this._groups[i].selectors.length; j++) {
                          this._groups[i]._setSelectorLabelColor(j, this._labelColor);
                        }
                      }
                    };
                    Object.defineProperty(SelectionPanel2.prototype, "buttonBackground", {
                      /** Gets or sets the button background */
                      get: function() {
                        return this._buttonBackground;
                      },
                      set: function(color) {
                        if (this._buttonBackground === color) {
                          return;
                        }
                        this._buttonBackground = color;
                        this._setButtonBackground();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    SelectionPanel2.prototype._setButtonBackground = function() {
                      for (var i = 0; i < this._groups.length; i++) {
                        for (var j = 0; j < this._groups[i].selectors.length; j++) {
                          this._groups[i]._setSelectorButtonBackground(j, this._buttonBackground);
                        }
                      }
                    };
                    Object.defineProperty(SelectionPanel2.prototype, "barColor", {
                      /** Gets or sets the color of separator bar */
                      get: function() {
                        return this._barColor;
                      },
                      set: function(color) {
                        if (this._barColor === color) {
                          return;
                        }
                        this._barColor = color;
                        this._setBarColor();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    SelectionPanel2.prototype._setBarColor = function() {
                      for (var i = 0; i < this._bars.length; i++) {
                        this._bars[i].children[0].background = this._barColor;
                      }
                    };
                    Object.defineProperty(SelectionPanel2.prototype, "barHeight", {
                      /** Gets or sets the height of separator bar */
                      get: function() {
                        return this._barHeight;
                      },
                      set: function(value) {
                        if (this._barHeight === value) {
                          return;
                        }
                        this._barHeight = value;
                        this._setBarHeight();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    SelectionPanel2.prototype._setBarHeight = function() {
                      for (var i = 0; i < this._bars.length; i++) {
                        this._bars[i].children[0].height = this._barHeight;
                      }
                    };
                    Object.defineProperty(SelectionPanel2.prototype, "spacerHeight", {
                      /** Gets or sets the height of spacers*/
                      get: function() {
                        return this._spacerHeight;
                      },
                      set: function(value) {
                        if (this._spacerHeight === value) {
                          return;
                        }
                        this._spacerHeight = value;
                        this._setSpacerHeight();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    SelectionPanel2.prototype._setSpacerHeight = function() {
                      for (var i = 0; i < this._bars.length; i++) {
                        this._bars[i].height = this._spacerHeight;
                      }
                    };
                    SelectionPanel2.prototype._addSpacer = function() {
                      var separator = new _container__WEBPACK_IMPORTED_MODULE_8__.Container();
                      separator.width = 1;
                      separator.height = this._spacerHeight;
                      separator.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                      var bar = new _rectangle__WEBPACK_IMPORTED_MODULE_1__.Rectangle();
                      bar.width = 1;
                      bar.height = this._barHeight;
                      bar.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                      bar.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.VERTICAL_ALIGNMENT_CENTER;
                      bar.background = this._barColor;
                      bar.color = "transparent";
                      separator.addControl(bar);
                      this._panel.addControl(separator);
                      this._bars.push(separator);
                    };
                    SelectionPanel2.prototype.addGroup = function(group) {
                      if (this._groups.length > 0) {
                        this._addSpacer();
                      }
                      this._panel.addControl(group.groupPanel);
                      this._groups.push(group);
                      group.groupPanel.children[0].color = this._headerColor;
                      for (var j = 0; j < group.selectors.length; j++) {
                        group._setSelectorButtonColor(j, this._buttonColor);
                        group._setSelectorButtonBackground(j, this._buttonBackground);
                      }
                    };
                    SelectionPanel2.prototype.removeGroup = function(groupNb) {
                      if (groupNb < 0 || groupNb >= this._groups.length) {
                        return;
                      }
                      var group = this._groups[groupNb];
                      this._panel.removeControl(group.groupPanel);
                      this._groups.splice(groupNb, 1);
                      if (groupNb < this._bars.length) {
                        this._panel.removeControl(this._bars[groupNb]);
                        this._bars.splice(groupNb, 1);
                      }
                    };
                    SelectionPanel2.prototype.setHeaderName = function(label, groupNb) {
                      if (groupNb < 0 || groupNb >= this._groups.length) {
                        return;
                      }
                      var group = this._groups[groupNb];
                      group.groupPanel.children[0].text = label;
                    };
                    SelectionPanel2.prototype.relabel = function(label, groupNb, selectorNb) {
                      if (groupNb < 0 || groupNb >= this._groups.length) {
                        return;
                      }
                      var group = this._groups[groupNb];
                      if (selectorNb < 0 || selectorNb >= group.selectors.length) {
                        return;
                      }
                      group._setSelectorLabel(selectorNb, label);
                    };
                    SelectionPanel2.prototype.removeFromGroupSelector = function(groupNb, selectorNb) {
                      if (groupNb < 0 || groupNb >= this._groups.length) {
                        return;
                      }
                      var group = this._groups[groupNb];
                      if (selectorNb < 0 || selectorNb >= group.selectors.length) {
                        return;
                      }
                      group.removeSelector(selectorNb);
                    };
                    SelectionPanel2.prototype.addToGroupCheckbox = function(groupNb, label, func, checked) {
                      if (func === void 0) {
                        func = function() {
                        };
                      }
                      if (checked === void 0) {
                        checked = false;
                      }
                      if (groupNb < 0 || groupNb >= this._groups.length) {
                        return;
                      }
                      var group = this._groups[groupNb];
                      group.addCheckbox(label, func, checked);
                    };
                    SelectionPanel2.prototype.addToGroupRadio = function(groupNb, label, func, checked) {
                      if (func === void 0) {
                        func = function() {
                        };
                      }
                      if (checked === void 0) {
                        checked = false;
                      }
                      if (groupNb < 0 || groupNb >= this._groups.length) {
                        return;
                      }
                      var group = this._groups[groupNb];
                      group.addRadio(label, func, checked);
                    };
                    SelectionPanel2.prototype.addToGroupSlider = function(groupNb, label, func, unit, min, max, value, onVal) {
                      if (func === void 0) {
                        func = function() {
                        };
                      }
                      if (unit === void 0) {
                        unit = "Units";
                      }
                      if (min === void 0) {
                        min = 0;
                      }
                      if (max === void 0) {
                        max = 0;
                      }
                      if (value === void 0) {
                        value = 0;
                      }
                      if (onVal === void 0) {
                        onVal = function(v) {
                          return v | 0;
                        };
                      }
                      if (groupNb < 0 || groupNb >= this._groups.length) {
                        return;
                      }
                      var group = this._groups[groupNb];
                      group.addSlider(label, func, unit, min, max, value, onVal);
                    };
                    return SelectionPanel2;
                  }(_rectangle__WEBPACK_IMPORTED_MODULE_1__.Rectangle)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/sliders/baseSlider.js": (
              /*!***************************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/sliders/baseSlider.js ***!
                \***************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "BaseSlider": () => (
                    /* binding */
                    BaseSlider
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Misc/decorators */
                  "core/Misc/perfCounter"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__);
                var _control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ../control */
                  "../../../lts/gui/dist/2D/controls/control.js"
                );
                var _valueAndUnit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ../../valueAndUnit */
                  "../../../lts/gui/dist/2D/valueAndUnit.js"
                );
                var BaseSlider = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(BaseSlider2, _super);
                    function BaseSlider2(name) {
                      var _this = _super.call(this, name) || this;
                      _this.name = name;
                      _this._thumbWidth = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_3__.ValueAndUnit(20, _valueAndUnit__WEBPACK_IMPORTED_MODULE_3__.ValueAndUnit.UNITMODE_PIXEL, false);
                      _this._minimum = 0;
                      _this._maximum = 100;
                      _this._value = 50;
                      _this._isVertical = false;
                      _this._barOffset = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_3__.ValueAndUnit(5, _valueAndUnit__WEBPACK_IMPORTED_MODULE_3__.ValueAndUnit.UNITMODE_PIXEL, false);
                      _this._isThumbClamped = false;
                      _this._displayThumb = true;
                      _this._step = 0;
                      _this._lastPointerDownId = -1;
                      _this._effectiveBarOffset = 0;
                      _this.onValueChangedObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this._pointerIsDown = false;
                      _this.isPointerBlocker = true;
                      return _this;
                    }
                    Object.defineProperty(BaseSlider2.prototype, "displayThumb", {
                      /** Gets or sets a boolean indicating if the thumb must be rendered */
                      get: function() {
                        return this._displayThumb;
                      },
                      set: function(value) {
                        if (this._displayThumb === value) {
                          return;
                        }
                        this._displayThumb = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(BaseSlider2.prototype, "step", {
                      /** Gets or sets a step to apply to values (0 by default) */
                      get: function() {
                        return this._step;
                      },
                      set: function(value) {
                        if (this._step === value) {
                          return;
                        }
                        this._step = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(BaseSlider2.prototype, "barOffset", {
                      /** Gets or sets main bar offset (ie. the margin applied to the value bar) */
                      get: function() {
                        return this._barOffset.toString(this._host);
                      },
                      set: function(value) {
                        if (this._barOffset.toString(this._host) === value) {
                          return;
                        }
                        if (this._barOffset.fromString(value)) {
                          this._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(BaseSlider2.prototype, "barOffsetInPixels", {
                      /** Gets main bar offset in pixels*/
                      get: function() {
                        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(BaseSlider2.prototype, "thumbWidth", {
                      /** Gets or sets thumb width */
                      get: function() {
                        return this._thumbWidth.toString(this._host);
                      },
                      set: function(value) {
                        if (this._thumbWidth.toString(this._host) === value) {
                          return;
                        }
                        if (this._thumbWidth.fromString(value)) {
                          this._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(BaseSlider2.prototype, "thumbWidthInPixels", {
                      /** Gets thumb width in pixels */
                      get: function() {
                        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(BaseSlider2.prototype, "minimum", {
                      /** Gets or sets minimum value */
                      get: function() {
                        return this._minimum;
                      },
                      set: function(value) {
                        if (this._minimum === value) {
                          return;
                        }
                        this._minimum = value;
                        this._markAsDirty();
                        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(BaseSlider2.prototype, "maximum", {
                      /** Gets or sets maximum value */
                      get: function() {
                        return this._maximum;
                      },
                      set: function(value) {
                        if (this._maximum === value) {
                          return;
                        }
                        this._maximum = value;
                        this._markAsDirty();
                        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(BaseSlider2.prototype, "value", {
                      /** Gets or sets current value */
                      get: function() {
                        return this._value;
                      },
                      set: function(value) {
                        value = Math.max(Math.min(value, this._maximum), this._minimum);
                        if (this._value === value) {
                          return;
                        }
                        this._value = value;
                        this._markAsDirty();
                        this.onValueChangedObservable.notifyObservers(this._value);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(BaseSlider2.prototype, "isVertical", {
                      /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */
                      get: function() {
                        return this._isVertical;
                      },
                      set: function(value) {
                        if (this._isVertical === value) {
                          return;
                        }
                        this._isVertical = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(BaseSlider2.prototype, "isThumbClamped", {
                      /** Gets or sets a value indicating if the thumb can go over main bar extends */
                      get: function() {
                        return this._isThumbClamped;
                      },
                      set: function(value) {
                        if (this._isThumbClamped === value) {
                          return;
                        }
                        this._isThumbClamped = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    BaseSlider2.prototype._getTypeName = function() {
                      return "BaseSlider";
                    };
                    BaseSlider2.prototype._getThumbPosition = function() {
                      if (this.isVertical) {
                        return (this.maximum - this.value) / (this.maximum - this.minimum) * this._backgroundBoxLength;
                      }
                      return (this.value - this.minimum) / (this.maximum - this.minimum) * this._backgroundBoxLength;
                    };
                    BaseSlider2.prototype._getThumbThickness = function(type) {
                      var thumbThickness = 0;
                      switch (type) {
                        case "circle":
                          if (this._thumbWidth.isPixel) {
                            thumbThickness = Math.max(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);
                          } else {
                            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);
                          }
                          break;
                        case "rectangle":
                          if (this._thumbWidth.isPixel) {
                            thumbThickness = Math.min(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);
                          } else {
                            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);
                          }
                      }
                      return thumbThickness;
                    };
                    BaseSlider2.prototype._prepareRenderingData = function(type) {
                      this._effectiveBarOffset = 0;
                      this._renderLeft = this._currentMeasure.left;
                      this._renderTop = this._currentMeasure.top;
                      this._renderWidth = this._currentMeasure.width;
                      this._renderHeight = this._currentMeasure.height;
                      this._backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);
                      this._backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);
                      this._effectiveThumbThickness = this._getThumbThickness(type);
                      if (this.displayThumb) {
                        this._backgroundBoxLength -= this._effectiveThumbThickness;
                      }
                      if (this.isVertical && this._currentMeasure.height < this._currentMeasure.width) {
                        console.error("Height should be greater than width");
                        return;
                      }
                      if (this._barOffset.isPixel) {
                        this._effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), this._backgroundBoxThickness);
                      } else {
                        this._effectiveBarOffset = this._backgroundBoxThickness * this._barOffset.getValue(this._host);
                      }
                      this._backgroundBoxThickness -= this._effectiveBarOffset * 2;
                      if (this.isVertical) {
                        this._renderLeft += this._effectiveBarOffset;
                        if (!this.isThumbClamped && this.displayThumb) {
                          this._renderTop += this._effectiveThumbThickness / 2;
                        }
                        this._renderHeight = this._backgroundBoxLength;
                        this._renderWidth = this._backgroundBoxThickness;
                      } else {
                        this._renderTop += this._effectiveBarOffset;
                        if (!this.isThumbClamped && this.displayThumb) {
                          this._renderLeft += this._effectiveThumbThickness / 2;
                        }
                        this._renderHeight = this._backgroundBoxThickness;
                        this._renderWidth = this._backgroundBoxLength;
                      }
                    };
                    BaseSlider2.prototype._updateValueFromPointer = function(x, y) {
                      if (this.rotation != 0) {
                        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);
                        x = this._transformedPosition.x;
                        y = this._transformedPosition.y;
                      }
                      var value;
                      if (this._isVertical) {
                        value = this._minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this._maximum - this._minimum);
                      } else {
                        value = this._minimum + (x - this._currentMeasure.left) / this._currentMeasure.width * (this._maximum - this._minimum);
                      }
                      this.value = this._step ? Math.round(value / this._step) * this._step : value;
                    };
                    BaseSlider2.prototype._onPointerDown = function(target, coordinates, pointerId, buttonIndex, pi) {
                      if (!_super.prototype._onPointerDown.call(this, target, coordinates, pointerId, buttonIndex, pi)) {
                        return false;
                      }
                      if (this.isReadOnly) {
                        return true;
                      }
                      this._pointerIsDown = true;
                      this._updateValueFromPointer(coordinates.x, coordinates.y);
                      this._host._capturingControl[pointerId] = this;
                      this._lastPointerDownId = pointerId;
                      return true;
                    };
                    BaseSlider2.prototype._onPointerMove = function(target, coordinates, pointerId, pi) {
                      if (pointerId != this._lastPointerDownId) {
                        return;
                      }
                      if (this._pointerIsDown && !this.isReadOnly) {
                        this._updateValueFromPointer(coordinates.x, coordinates.y);
                      }
                      _super.prototype._onPointerMove.call(this, target, coordinates, pointerId, pi);
                    };
                    BaseSlider2.prototype._onPointerUp = function(target, coordinates, pointerId, buttonIndex, notifyClick) {
                      this._pointerIsDown = false;
                      delete this._host._capturingControl[pointerId];
                      _super.prototype._onPointerUp.call(this, target, coordinates, pointerId, buttonIndex, notifyClick);
                    };
                    BaseSlider2.prototype._onCanvasBlur = function() {
                      this._forcePointerUp();
                      _super.prototype._onCanvasBlur.call(this);
                    };
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], BaseSlider2.prototype, "displayThumb", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], BaseSlider2.prototype, "step", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], BaseSlider2.prototype, "barOffset", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], BaseSlider2.prototype, "thumbWidth", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], BaseSlider2.prototype, "minimum", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], BaseSlider2.prototype, "maximum", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], BaseSlider2.prototype, "value", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], BaseSlider2.prototype, "isVertical", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], BaseSlider2.prototype, "isThumbClamped", null);
                    return BaseSlider2;
                  }(_control__WEBPACK_IMPORTED_MODULE_2__.Control)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/sliders/imageBasedSlider.js": (
              /*!*********************************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/sliders/imageBasedSlider.js ***!
                \*********************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "ImageBasedSlider": () => (
                    /* binding */
                    ImageBasedSlider
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var _baseSlider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./baseSlider */
                  "../../../lts/gui/dist/2D/controls/sliders/baseSlider.js"
                );
                var _measure__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ../../measure */
                  "../../../lts/gui/dist/2D/measure.js"
                );
                var _image__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ../image */
                  "../../../lts/gui/dist/2D/controls/image.js"
                );
                var core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
                  /*! core/Misc/decorators */
                  "core/Misc/perfCounter"
                );
                var core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_4___default = __webpack_require__2.n(core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_4__);
                var ImageBasedSlider = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ImageBasedSlider2, _super);
                    function ImageBasedSlider2(name) {
                      var _this = _super.call(this, name) || this;
                      _this.name = name;
                      _this._tempMeasure = new _measure__WEBPACK_IMPORTED_MODULE_2__.Measure(0, 0, 0, 0);
                      return _this;
                    }
                    Object.defineProperty(ImageBasedSlider2.prototype, "displayThumb", {
                      get: function() {
                        return this._displayThumb && this.thumbImage != null;
                      },
                      set: function(value) {
                        if (this._displayThumb === value) {
                          return;
                        }
                        this._displayThumb = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ImageBasedSlider2.prototype, "backgroundImage", {
                      /**
                       * Gets or sets the image used to render the background
                       */
                      get: function() {
                        return this._backgroundImage;
                      },
                      set: function(value) {
                        var _this = this;
                        if (this._backgroundImage === value) {
                          return;
                        }
                        this._backgroundImage = value;
                        if (value && !value.isLoaded) {
                          value.onImageLoadedObservable.addOnce(function() {
                            return _this._markAsDirty();
                          });
                        }
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ImageBasedSlider2.prototype, "valueBarImage", {
                      /**
                       * Gets or sets the image used to render the value bar
                       */
                      get: function() {
                        return this._valueBarImage;
                      },
                      set: function(value) {
                        var _this = this;
                        if (this._valueBarImage === value) {
                          return;
                        }
                        this._valueBarImage = value;
                        if (value && !value.isLoaded) {
                          value.onImageLoadedObservable.addOnce(function() {
                            return _this._markAsDirty();
                          });
                        }
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ImageBasedSlider2.prototype, "thumbImage", {
                      /**
                       * Gets or sets the image used to render the thumb
                       */
                      get: function() {
                        return this._thumbImage;
                      },
                      set: function(value) {
                        var _this = this;
                        if (this._thumbImage === value) {
                          return;
                        }
                        this._thumbImage = value;
                        if (value && !value.isLoaded) {
                          value.onImageLoadedObservable.addOnce(function() {
                            return _this._markAsDirty();
                          });
                        }
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    ImageBasedSlider2.prototype._getTypeName = function() {
                      return "ImageBasedSlider";
                    };
                    ImageBasedSlider2.prototype._draw = function(context) {
                      context.save();
                      this._applyStates(context);
                      this._prepareRenderingData("rectangle");
                      var thumbPosition = this._getThumbPosition();
                      var left = this._renderLeft;
                      var top = this._renderTop;
                      var width = this._renderWidth;
                      var height = this._renderHeight;
                      if (this._backgroundImage) {
                        this._tempMeasure.copyFromFloats(left, top, width, height);
                        if (this.isThumbClamped && this.displayThumb) {
                          if (this.isVertical) {
                            this._tempMeasure.height += this._effectiveThumbThickness;
                          } else {
                            this._tempMeasure.width += this._effectiveThumbThickness;
                          }
                        }
                        this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);
                        this._backgroundImage._draw(context);
                      }
                      if (this._valueBarImage) {
                        if (this.isVertical) {
                          if (this.isThumbClamped && this.displayThumb) {
                            this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);
                          } else {
                            this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition);
                          }
                        } else {
                          if (this.isThumbClamped && this.displayThumb) {
                            this._tempMeasure.copyFromFloats(left, top, thumbPosition + this._effectiveThumbThickness / 2, height);
                          } else {
                            this._tempMeasure.copyFromFloats(left, top, thumbPosition, height);
                          }
                        }
                        this._valueBarImage._currentMeasure.copyFrom(this._tempMeasure);
                        this._valueBarImage._draw(context);
                      }
                      if (this.displayThumb) {
                        if (this.isVertical) {
                          this._tempMeasure.copyFromFloats(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);
                        } else {
                          this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);
                        }
                        this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);
                        this._thumbImage._draw(context);
                      }
                      context.restore();
                    };
                    ImageBasedSlider2.prototype.serialize = function(serializationObject) {
                      _super.prototype.serialize.call(this, serializationObject);
                      var backgroundImage = {};
                      var thumbImage = {};
                      var valueBarImage = {};
                      this.backgroundImage.serialize(backgroundImage);
                      this.thumbImage.serialize(thumbImage);
                      this.valueBarImage.serialize(valueBarImage);
                      serializationObject.backgroundImage = backgroundImage;
                      serializationObject.thumbImage = thumbImage;
                      serializationObject.valueBarImage = valueBarImage;
                    };
                    ImageBasedSlider2.prototype._parseFromContent = function(serializedObject, host) {
                      _super.prototype._parseFromContent.call(this, serializedObject, host);
                      this.backgroundImage = _image__WEBPACK_IMPORTED_MODULE_3__.Image.Parse(serializedObject.backgroundImage, host);
                      this.thumbImage = _image__WEBPACK_IMPORTED_MODULE_3__.Image.Parse(serializedObject.thumbImage, host);
                      this.valueBarImage = _image__WEBPACK_IMPORTED_MODULE_3__.Image.Parse(serializedObject.valueBarImage, host);
                    };
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_4__.serialize)()
                    ], ImageBasedSlider2.prototype, "displayThumb", null);
                    return ImageBasedSlider2;
                  }(_baseSlider__WEBPACK_IMPORTED_MODULE_1__.BaseSlider)
                );
                (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_4__.RegisterClass)("BABYLON.GUI.ImageBasedSlider", ImageBasedSlider);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/sliders/imageScrollBar.js": (
              /*!*******************************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/sliders/imageScrollBar.js ***!
                \*******************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "ImageScrollBar": () => (
                    /* binding */
                    ImageScrollBar
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var _baseSlider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./baseSlider */
                  "../../../lts/gui/dist/2D/controls/sliders/baseSlider.js"
                );
                var _measure__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ../../measure */
                  "../../../lts/gui/dist/2D/measure.js"
                );
                var core_Misc_decorators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! core/Misc/decorators */
                  "core/Misc/perfCounter"
                );
                var core_Misc_decorators__WEBPACK_IMPORTED_MODULE_3___default = __webpack_require__2.n(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_3__);
                var ImageScrollBar = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ImageScrollBar2, _super);
                    function ImageScrollBar2(name) {
                      var _this = _super.call(this, name) || this;
                      _this.name = name;
                      _this._thumbLength = 0.5;
                      _this._thumbHeight = 1;
                      _this._barImageHeight = 1;
                      _this._tempMeasure = new _measure__WEBPACK_IMPORTED_MODULE_2__.Measure(0, 0, 0, 0);
                      _this._invertScrollDirection = false;
                      _this.num90RotationInVerticalMode = 1;
                      return _this;
                    }
                    Object.defineProperty(ImageScrollBar2.prototype, "invertScrollDirection", {
                      /** Inverts the scrolling direction (default: false) */
                      get: function() {
                        return this._invertScrollDirection;
                      },
                      set: function(invert) {
                        this._invertScrollDirection = invert;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ImageScrollBar2.prototype, "backgroundImage", {
                      /**
                       * Gets or sets the image used to render the background for horizontal bar
                       */
                      get: function() {
                        return this._backgroundBaseImage;
                      },
                      set: function(value) {
                        var _this = this;
                        if (this._backgroundBaseImage === value) {
                          return;
                        }
                        this._backgroundBaseImage = value;
                        if (this.isVertical && this.num90RotationInVerticalMode !== 0) {
                          if (!value.isLoaded) {
                            value.onImageLoadedObservable.addOnce(function() {
                              var rotatedValue = value._rotate90(_this.num90RotationInVerticalMode, true);
                              _this._backgroundImage = rotatedValue;
                              if (!rotatedValue.isLoaded) {
                                rotatedValue.onImageLoadedObservable.addOnce(function() {
                                  _this._markAsDirty();
                                });
                              }
                              _this._markAsDirty();
                            });
                          } else {
                            this._backgroundImage = value._rotate90(this.num90RotationInVerticalMode, true);
                            this._markAsDirty();
                          }
                        } else {
                          this._backgroundImage = value;
                          if (value && !value.isLoaded) {
                            value.onImageLoadedObservable.addOnce(function() {
                              _this._markAsDirty();
                            });
                          }
                          this._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ImageScrollBar2.prototype, "thumbImage", {
                      /**
                       * Gets or sets the image used to render the thumb
                       */
                      get: function() {
                        return this._thumbBaseImage;
                      },
                      set: function(value) {
                        var _this = this;
                        if (this._thumbBaseImage === value) {
                          return;
                        }
                        this._thumbBaseImage = value;
                        if (this.isVertical && this.num90RotationInVerticalMode !== 0) {
                          if (!value.isLoaded) {
                            value.onImageLoadedObservable.addOnce(function() {
                              var rotatedValue = value._rotate90(-_this.num90RotationInVerticalMode, true);
                              _this._thumbImage = rotatedValue;
                              if (!rotatedValue.isLoaded) {
                                rotatedValue.onImageLoadedObservable.addOnce(function() {
                                  _this._markAsDirty();
                                });
                              }
                              _this._markAsDirty();
                            });
                          } else {
                            this._thumbImage = value._rotate90(-this.num90RotationInVerticalMode, true);
                            this._markAsDirty();
                          }
                        } else {
                          this._thumbImage = value;
                          if (value && !value.isLoaded) {
                            value.onImageLoadedObservable.addOnce(function() {
                              _this._markAsDirty();
                            });
                          }
                          this._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ImageScrollBar2.prototype, "thumbLength", {
                      /**
                       * Gets or sets the length of the thumb
                       */
                      get: function() {
                        return this._thumbLength;
                      },
                      set: function(value) {
                        if (this._thumbLength === value) {
                          return;
                        }
                        this._thumbLength = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ImageScrollBar2.prototype, "thumbHeight", {
                      /**
                       * Gets or sets the height of the thumb
                       */
                      get: function() {
                        return this._thumbHeight;
                      },
                      set: function(value) {
                        if (this._thumbLength === value) {
                          return;
                        }
                        this._thumbHeight = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ImageScrollBar2.prototype, "barImageHeight", {
                      /**
                       * Gets or sets the height of the bar image
                       */
                      get: function() {
                        return this._barImageHeight;
                      },
                      set: function(value) {
                        if (this._barImageHeight === value) {
                          return;
                        }
                        this._barImageHeight = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    ImageScrollBar2.prototype._getTypeName = function() {
                      return "ImageScrollBar";
                    };
                    ImageScrollBar2.prototype._getThumbThickness = function() {
                      var thumbThickness = 0;
                      if (this._thumbWidth.isPixel) {
                        thumbThickness = this._thumbWidth.getValue(this._host);
                      } else {
                        thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);
                      }
                      return thumbThickness;
                    };
                    ImageScrollBar2.prototype._draw = function(context) {
                      context.save();
                      this._applyStates(context);
                      this._prepareRenderingData("rectangle");
                      var thumbPosition = this._getThumbPosition();
                      var left = this._renderLeft;
                      var top = this._renderTop;
                      var width = this._renderWidth;
                      var height = this._renderHeight;
                      if (this._backgroundImage) {
                        this._tempMeasure.copyFromFloats(left, top, width, height);
                        if (this.isVertical) {
                          this._tempMeasure.copyFromFloats(left + width * (1 - this._barImageHeight) * 0.5, this._currentMeasure.top, width * this._barImageHeight, height);
                          this._tempMeasure.height += this._effectiveThumbThickness;
                          this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);
                        } else {
                          this._tempMeasure.copyFromFloats(this._currentMeasure.left, top + height * (1 - this._barImageHeight) * 0.5, width, height * this._barImageHeight);
                          this._tempMeasure.width += this._effectiveThumbThickness;
                          this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);
                        }
                        this._backgroundImage._draw(context);
                      }
                      if (this.isVertical) {
                        this._tempMeasure.copyFromFloats(left - this._effectiveBarOffset + this._currentMeasure.width * (1 - this._thumbHeight) * 0.5, this._currentMeasure.top + thumbPosition, this._currentMeasure.width * this._thumbHeight, this._effectiveThumbThickness);
                      } else {
                        this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top + this._currentMeasure.height * (1 - this._thumbHeight) * 0.5, this._effectiveThumbThickness, this._currentMeasure.height * this._thumbHeight);
                      }
                      if (this._thumbImage) {
                        this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);
                        this._thumbImage._draw(context);
                      }
                      context.restore();
                    };
                    ImageScrollBar2.prototype._updateValueFromPointer = function(x, y) {
                      if (this.rotation != 0) {
                        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);
                        x = this._transformedPosition.x;
                        y = this._transformedPosition.y;
                      }
                      var sign = this._invertScrollDirection ? -1 : 1;
                      if (this._first) {
                        this._first = false;
                        this._originX = x;
                        this._originY = y;
                        if (x < this._tempMeasure.left || x > this._tempMeasure.left + this._tempMeasure.width || y < this._tempMeasure.top || y > this._tempMeasure.top + this._tempMeasure.height) {
                          if (this.isVertical) {
                            this.value = this.minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this.maximum - this.minimum);
                          } else {
                            this.value = this.minimum + (x - this._currentMeasure.left) / this._currentMeasure.width * (this.maximum - this.minimum);
                          }
                        }
                      }
                      var delta = 0;
                      if (this.isVertical) {
                        delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));
                      } else {
                        delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);
                      }
                      this.value += sign * delta * (this.maximum - this.minimum);
                      this._originX = x;
                      this._originY = y;
                    };
                    ImageScrollBar2.prototype._onPointerDown = function(target, coordinates, pointerId, buttonIndex, pi) {
                      this._first = true;
                      return _super.prototype._onPointerDown.call(this, target, coordinates, pointerId, buttonIndex, pi);
                    };
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_3__.serialize)()
                    ], ImageScrollBar2.prototype, "num90RotationInVerticalMode", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_3__.serialize)()
                    ], ImageScrollBar2.prototype, "invertScrollDirection", null);
                    return ImageScrollBar2;
                  }(_baseSlider__WEBPACK_IMPORTED_MODULE_1__.BaseSlider)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/sliders/scrollBar.js": (
              /*!**************************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/sliders/scrollBar.js ***!
                \**************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "ScrollBar": () => (
                    /* binding */
                    ScrollBar
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var _baseSlider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./baseSlider */
                  "../../../lts/gui/dist/2D/controls/sliders/baseSlider.js"
                );
                var _measure__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ../../measure */
                  "../../../lts/gui/dist/2D/measure.js"
                );
                var core_Misc_decorators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! core/Misc/typeStore */
                  "core/Misc/perfCounter"
                );
                var core_Misc_decorators__WEBPACK_IMPORTED_MODULE_3___default = __webpack_require__2.n(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_3__);
                var ScrollBar = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ScrollBar2, _super);
                    function ScrollBar2(name) {
                      var _this = _super.call(this, name) || this;
                      _this.name = name;
                      _this._background = "black";
                      _this._borderColor = "white";
                      _this._tempMeasure = new _measure__WEBPACK_IMPORTED_MODULE_2__.Measure(0, 0, 0, 0);
                      _this._invertScrollDirection = false;
                      _this._backgroundGradient = null;
                      return _this;
                    }
                    Object.defineProperty(ScrollBar2.prototype, "borderColor", {
                      /** Gets or sets border color */
                      get: function() {
                        return this._borderColor;
                      },
                      set: function(value) {
                        if (this._borderColor === value) {
                          return;
                        }
                        this._borderColor = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ScrollBar2.prototype, "background", {
                      /** Gets or sets background color */
                      get: function() {
                        return this._background;
                      },
                      set: function(value) {
                        if (this._background === value) {
                          return;
                        }
                        this._background = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ScrollBar2.prototype, "backgroundGradient", {
                      /** Gets or sets background gradient. Takes precedence over gradient. */
                      get: function() {
                        return this._backgroundGradient;
                      },
                      set: function(value) {
                        if (this._backgroundGradient === value) {
                          return;
                        }
                        this._backgroundGradient = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ScrollBar2.prototype, "invertScrollDirection", {
                      /** Inverts the scrolling direction (default: false) */
                      get: function() {
                        return this._invertScrollDirection;
                      },
                      set: function(invert) {
                        this._invertScrollDirection = invert;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    ScrollBar2.prototype._getTypeName = function() {
                      return "Scrollbar";
                    };
                    ScrollBar2.prototype._getThumbThickness = function() {
                      var thumbThickness = 0;
                      if (this._thumbWidth.isPixel) {
                        thumbThickness = this._thumbWidth.getValue(this._host);
                      } else {
                        thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);
                      }
                      return thumbThickness;
                    };
                    ScrollBar2.prototype._getBackgroundColor = function(context) {
                      return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;
                    };
                    ScrollBar2.prototype._draw = function(context) {
                      context.save();
                      this._applyStates(context);
                      this._prepareRenderingData("rectangle");
                      var left = this._renderLeft;
                      var thumbPosition = this._getThumbPosition();
                      context.fillStyle = this._getBackgroundColor(context);
                      context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
                      context.fillStyle = this._getColor(context);
                      if (this.isVertical) {
                        this._tempMeasure.left = left - this._effectiveBarOffset;
                        this._tempMeasure.top = this._currentMeasure.top + thumbPosition;
                        this._tempMeasure.width = this._currentMeasure.width;
                        this._tempMeasure.height = this._effectiveThumbThickness;
                      } else {
                        this._tempMeasure.left = this._currentMeasure.left + thumbPosition;
                        this._tempMeasure.top = this._currentMeasure.top;
                        this._tempMeasure.width = this._effectiveThumbThickness;
                        this._tempMeasure.height = this._currentMeasure.height;
                      }
                      context.fillRect(this._tempMeasure.left, this._tempMeasure.top, this._tempMeasure.width, this._tempMeasure.height);
                      context.restore();
                    };
                    ScrollBar2.prototype._updateValueFromPointer = function(x, y) {
                      if (this.rotation != 0) {
                        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);
                        x = this._transformedPosition.x;
                        y = this._transformedPosition.y;
                      }
                      var sign = this._invertScrollDirection ? -1 : 1;
                      if (this._first) {
                        this._first = false;
                        this._originX = x;
                        this._originY = y;
                        if (x < this._tempMeasure.left || x > this._tempMeasure.left + this._tempMeasure.width || y < this._tempMeasure.top || y > this._tempMeasure.top + this._tempMeasure.height) {
                          if (this.isVertical) {
                            this.value = this.minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this.maximum - this.minimum);
                          } else {
                            this.value = this.minimum + (x - this._currentMeasure.left) / this._currentMeasure.width * (this.maximum - this.minimum);
                          }
                        }
                      }
                      var delta = 0;
                      if (this.isVertical) {
                        delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));
                      } else {
                        delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);
                      }
                      this.value += sign * delta * (this.maximum - this.minimum);
                      this._originX = x;
                      this._originY = y;
                    };
                    ScrollBar2.prototype._onPointerDown = function(target, coordinates, pointerId, buttonIndex, pi) {
                      this._first = true;
                      return _super.prototype._onPointerDown.call(this, target, coordinates, pointerId, buttonIndex, pi);
                    };
                    ScrollBar2.prototype.serialize = function(serializationObject) {
                      _super.prototype.serialize.call(this, serializationObject);
                      if (this.backgroundGradient) {
                        serializationObject.backgroundGradient = {};
                        this.backgroundGradient.serialize(serializationObject.backgroundGradient);
                      }
                    };
                    ScrollBar2.prototype._parseFromContent = function(serializationObject, host) {
                      _super.prototype._parseFromContent.call(this, serializationObject, host);
                      if (serializationObject.backgroundGradient) {
                        var className = core_Misc_decorators__WEBPACK_IMPORTED_MODULE_3__.Tools.Instantiate("BABYLON.GUI." + serializationObject.backgroundGradient.className);
                        this.backgroundGradient = new className();
                        this.backgroundGradient.parse(serializationObject.backgroundGradient);
                      }
                    };
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_3__.serialize)()
                    ], ScrollBar2.prototype, "borderColor", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_3__.serialize)()
                    ], ScrollBar2.prototype, "background", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_3__.serialize)()
                    ], ScrollBar2.prototype, "invertScrollDirection", null);
                    return ScrollBar2;
                  }(_baseSlider__WEBPACK_IMPORTED_MODULE_1__.BaseSlider)
                );
                (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_3__.RegisterClass)("BABYLON.GUI.Scrollbar", ScrollBar);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/sliders/slider.js": (
              /*!***********************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/sliders/slider.js ***!
                \***********************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "Slider": () => (
                    /* binding */
                    Slider
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var _baseSlider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./baseSlider */
                  "../../../lts/gui/dist/2D/controls/sliders/baseSlider.js"
                );
                var core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! core/Misc/tools */
                  "core/Misc/perfCounter"
                );
                var core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2___default = __webpack_require__2.n(core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__);
                var Slider = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Slider2, _super);
                    function Slider2(name) {
                      var _this = _super.call(this, name) || this;
                      _this.name = name;
                      _this._background = "black";
                      _this._borderColor = "white";
                      _this._thumbColor = "";
                      _this._isThumbCircle = false;
                      _this._displayValueBar = true;
                      _this._backgroundGradient = null;
                      return _this;
                    }
                    Object.defineProperty(Slider2.prototype, "displayValueBar", {
                      /** Gets or sets a boolean indicating if the value bar must be rendered */
                      get: function() {
                        return this._displayValueBar;
                      },
                      set: function(value) {
                        if (this._displayValueBar === value) {
                          return;
                        }
                        this._displayValueBar = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Slider2.prototype, "borderColor", {
                      /** Gets or sets border color */
                      get: function() {
                        return this._borderColor;
                      },
                      set: function(value) {
                        if (this._borderColor === value) {
                          return;
                        }
                        this._borderColor = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Slider2.prototype, "background", {
                      /** Gets or sets background color */
                      get: function() {
                        return this._background;
                      },
                      set: function(value) {
                        if (this._background === value) {
                          return;
                        }
                        this._background = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Slider2.prototype, "backgroundGradient", {
                      /** Gets or sets background gradient */
                      get: function() {
                        return this._backgroundGradient;
                      },
                      set: function(value) {
                        if (this._backgroundGradient === value) {
                          return;
                        }
                        this._backgroundGradient = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Slider2.prototype, "thumbColor", {
                      /** Gets or sets thumb's color */
                      get: function() {
                        return this._thumbColor;
                      },
                      set: function(value) {
                        if (this._thumbColor === value) {
                          return;
                        }
                        this._thumbColor = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Slider2.prototype, "isThumbCircle", {
                      /** Gets or sets a boolean indicating if the thumb should be round or square */
                      get: function() {
                        return this._isThumbCircle;
                      },
                      set: function(value) {
                        if (this._isThumbCircle === value) {
                          return;
                        }
                        this._isThumbCircle = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Slider2.prototype._getTypeName = function() {
                      return "Slider";
                    };
                    Slider2.prototype._getBackgroundColor = function(context) {
                      return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;
                    };
                    Slider2.prototype._draw = function(context) {
                      context.save();
                      this._applyStates(context);
                      this._prepareRenderingData(this.isThumbCircle ? "circle" : "rectangle");
                      var left = this._renderLeft;
                      var top = this._renderTop;
                      var width = this._renderWidth;
                      var height = this._renderHeight;
                      var radius = 0;
                      if (this.isThumbClamped && this.isThumbCircle) {
                        if (this.isVertical) {
                          top += this._effectiveThumbThickness / 2;
                        } else {
                          left += this._effectiveThumbThickness / 2;
                        }
                        radius = this._backgroundBoxThickness / 2;
                      } else {
                        radius = (this._effectiveThumbThickness - this._effectiveBarOffset) / 2;
                      }
                      if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                        context.shadowColor = this.shadowColor;
                        context.shadowBlur = this.shadowBlur;
                        context.shadowOffsetX = this.shadowOffsetX;
                        context.shadowOffsetY = this.shadowOffsetY;
                      }
                      var thumbPosition = this._getThumbPosition();
                      context.fillStyle = this._getBackgroundColor(context);
                      if (this.isVertical) {
                        if (this.isThumbClamped) {
                          if (this.isThumbCircle) {
                            context.beginPath();
                            context.arc(left + this._backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);
                            context.fill();
                            context.fillRect(left, top, width, height);
                          } else {
                            context.fillRect(left, top, width, height + this._effectiveThumbThickness);
                          }
                        } else {
                          context.fillRect(left, top, width, height);
                        }
                      } else {
                        if (this.isThumbClamped) {
                          if (this.isThumbCircle) {
                            context.beginPath();
                            context.arc(left + this._backgroundBoxLength, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);
                            context.fill();
                            context.fillRect(left, top, width, height);
                          } else {
                            context.fillRect(left, top, width + this._effectiveThumbThickness, height);
                          }
                        } else {
                          context.fillRect(left, top, width, height);
                        }
                      }
                      if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                        context.shadowBlur = 0;
                        context.shadowOffsetX = 0;
                        context.shadowOffsetY = 0;
                      }
                      context.fillStyle = this._getColor(context);
                      if (this._displayValueBar) {
                        if (this.isVertical) {
                          if (this.isThumbClamped) {
                            if (this.isThumbCircle) {
                              context.beginPath();
                              context.arc(left + this._backgroundBoxThickness / 2, top + this._backgroundBoxLength, radius, 0, 2 * Math.PI);
                              context.fill();
                              context.fillRect(left, top + thumbPosition, width, height - thumbPosition);
                            } else {
                              context.fillRect(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);
                            }
                          } else {
                            context.fillRect(left, top + thumbPosition, width, height - thumbPosition);
                          }
                        } else {
                          if (this.isThumbClamped) {
                            if (this.isThumbCircle) {
                              context.beginPath();
                              context.arc(left, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);
                              context.fill();
                              context.fillRect(left, top, thumbPosition, height);
                            } else {
                              context.fillRect(left, top, thumbPosition, height);
                            }
                          } else {
                            context.fillRect(left, top, thumbPosition, height);
                          }
                        }
                      }
                      context.fillStyle = this._thumbColor || this._getColor(context);
                      if (this.displayThumb) {
                        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                          context.shadowColor = this.shadowColor;
                          context.shadowBlur = this.shadowBlur;
                          context.shadowOffsetX = this.shadowOffsetX;
                          context.shadowOffsetY = this.shadowOffsetY;
                        }
                        if (this._isThumbCircle) {
                          context.beginPath();
                          if (this.isVertical) {
                            context.arc(left + this._backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);
                          } else {
                            context.arc(left + thumbPosition, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);
                          }
                          context.fill();
                          if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                            context.shadowBlur = 0;
                            context.shadowOffsetX = 0;
                            context.shadowOffsetY = 0;
                          }
                          context.strokeStyle = this._borderColor;
                          context.stroke();
                        } else {
                          if (this.isVertical) {
                            context.fillRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);
                          } else {
                            context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);
                          }
                          if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                            context.shadowBlur = 0;
                            context.shadowOffsetX = 0;
                            context.shadowOffsetY = 0;
                          }
                          context.strokeStyle = this._borderColor;
                          if (this.isVertical) {
                            context.strokeRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);
                          } else {
                            context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);
                          }
                        }
                      }
                      context.restore();
                    };
                    Slider2.prototype.serialize = function(serializationObject) {
                      _super.prototype.serialize.call(this, serializationObject);
                      if (this.backgroundGradient) {
                        serializationObject.backgroundGradient = {};
                        this.backgroundGradient.serialize(serializationObject.backgroundGradient);
                      }
                    };
                    Slider2.prototype._parseFromContent = function(serializedObject, host) {
                      _super.prototype._parseFromContent.call(this, serializedObject, host);
                      if (serializedObject.backgroundGradient) {
                        var className = core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.Tools.Instantiate("BABYLON.GUI." + serializedObject.backgroundGradient.className);
                        this.backgroundGradient = new className();
                        this.backgroundGradient.parse(serializedObject.backgroundGradient);
                      }
                    };
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.serialize)()
                    ], Slider2.prototype, "displayValueBar", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.serialize)()
                    ], Slider2.prototype, "borderColor", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.serialize)()
                    ], Slider2.prototype, "background", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.serialize)()
                    ], Slider2.prototype, "thumbColor", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.serialize)()
                    ], Slider2.prototype, "isThumbCircle", null);
                    return Slider2;
                  }(_baseSlider__WEBPACK_IMPORTED_MODULE_1__.BaseSlider)
                );
                (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.RegisterClass)("BABYLON.GUI.Slider", Slider);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/stackPanel.js": (
              /*!*******************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/stackPanel.js ***!
                \*******************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "StackPanel": () => (
                    /* binding */
                    StackPanel
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Misc/decorators */
                  "core/Misc/perfCounter"
                );
                var core_Misc_tools__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__);
                var _container__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./container */
                  "../../../lts/gui/dist/2D/controls/container.js"
                );
                var _control__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./control */
                  "../../../lts/gui/dist/2D/controls/control.js"
                );
                var _textBlock__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
                  /*! ./textBlock */
                  "../../../lts/gui/dist/2D/controls/textBlock.js"
                );
                var StackPanel = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(StackPanel2, _super);
                    function StackPanel2(name) {
                      var _this = _super.call(this, name) || this;
                      _this.name = name;
                      _this._isVertical = true;
                      _this._manualWidth = false;
                      _this._manualHeight = false;
                      _this._doNotTrackManualChanges = false;
                      _this._spacing = 0;
                      _this.ignoreLayoutWarnings = false;
                      return _this;
                    }
                    Object.defineProperty(StackPanel2.prototype, "isVertical", {
                      /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/
                      get: function() {
                        return this._isVertical;
                      },
                      set: function(value) {
                        if (this._isVertical === value) {
                          return;
                        }
                        this._isVertical = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(StackPanel2.prototype, "spacing", {
                      /**
                       * Gets or sets the spacing (in pixels) between each child.
                       */
                      get: function() {
                        return this._spacing;
                      },
                      set: function(value) {
                        if (this._spacing === value) {
                          return;
                        }
                        this._spacing = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(StackPanel2.prototype, "width", {
                      get: function() {
                        return this._width.toString(this._host);
                      },
                      /**
                       * Gets or sets panel width.
                       * This value should not be set when in horizontal mode as it will be computed automatically
                       */
                      set: function(value) {
                        if (!this._doNotTrackManualChanges) {
                          this._manualWidth = true;
                        }
                        if (this._width.toString(this._host) === value) {
                          return;
                        }
                        if (this._width.fromString(value)) {
                          this._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(StackPanel2.prototype, "height", {
                      get: function() {
                        return this._height.toString(this._host);
                      },
                      /**
                       * Gets or sets panel height.
                       * This value should not be set when in vertical mode as it will be computed automatically
                       */
                      set: function(value) {
                        if (!this._doNotTrackManualChanges) {
                          this._manualHeight = true;
                        }
                        if (this._height.toString(this._host) === value) {
                          return;
                        }
                        if (this._height.fromString(value)) {
                          this._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    StackPanel2.prototype._getTypeName = function() {
                      return "StackPanel";
                    };
                    StackPanel2.prototype._preMeasure = function(parentMeasure, context) {
                      for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
                        var child = _a[_i];
                        if (this._isVertical) {
                          child.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.VERTICAL_ALIGNMENT_TOP;
                        } else {
                          child.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                        }
                      }
                      _super.prototype._preMeasure.call(this, parentMeasure, context);
                    };
                    StackPanel2.prototype._additionalProcessing = function(parentMeasure, context) {
                      _super.prototype._additionalProcessing.call(this, parentMeasure, context);
                      this._measureForChildren.copyFrom(parentMeasure);
                      this._measureForChildren.left = this._currentMeasure.left;
                      this._measureForChildren.top = this._currentMeasure.top;
                      if (!this.isVertical || this._manualWidth) {
                        this._measureForChildren.width = this._currentMeasure.width;
                      }
                      if (this.isVertical || this._manualHeight) {
                        this._measureForChildren.height = this._currentMeasure.height;
                      }
                    };
                    StackPanel2.prototype._postMeasure = function() {
                      var stackWidth = 0;
                      var stackHeight = 0;
                      var childrenCount = this._children.length;
                      for (var index = 0; index < childrenCount; index++) {
                        var child = this._children[index];
                        if (!child.isVisible || child.notRenderable) {
                          continue;
                        }
                        if (this._isVertical) {
                          if (child.top !== stackHeight + "px") {
                            child.top = stackHeight + "px";
                            this._rebuildLayout = true;
                            child._top.ignoreAdaptiveScaling = true;
                          }
                          if (child._height.isPercentage && !child._automaticSize) {
                            if (!this.ignoreLayoutWarnings) {
                              core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Tools.Warn("Control (Name:".concat(child.name, ", UniqueId:").concat(child.uniqueId, ") is using height in percentage mode inside a vertical StackPanel"));
                            }
                          } else {
                            stackHeight += child._currentMeasure.height + child._paddingTopInPixels + child._paddingBottomInPixels + (index < childrenCount - 1 ? this._spacing : 0);
                          }
                        } else {
                          if (child.left !== stackWidth + "px") {
                            child.left = stackWidth + "px";
                            this._rebuildLayout = true;
                            child._left.ignoreAdaptiveScaling = true;
                          }
                          if (child._width.isPercentage && !child._automaticSize && child.getClassName() === "TextBlock" && child.textWrapping !== _textBlock__WEBPACK_IMPORTED_MODULE_4__.TextWrapping.Clip && !child.forceResizeWidth) {
                            if (!this.ignoreLayoutWarnings) {
                              core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Tools.Warn("Control (Name:".concat(child.name, ", UniqueId:").concat(child.uniqueId, ") is using width in percentage mode inside a horizontal StackPanel"));
                            }
                          } else {
                            stackWidth += child._currentMeasure.width + child._paddingLeftInPixels + child._paddingRightInPixels + (index < childrenCount - 1 ? this._spacing : 0);
                          }
                        }
                      }
                      stackWidth += this._paddingLeftInPixels + this._paddingRightInPixels;
                      stackHeight += this._paddingTopInPixels + this._paddingBottomInPixels;
                      this._doNotTrackManualChanges = true;
                      var panelWidthChanged = false;
                      var panelHeightChanged = false;
                      if ((!this._manualHeight || this.adaptHeightToChildren) && this._isVertical) {
                        var previousHeight = this.height;
                        this.height = stackHeight + "px";
                        panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;
                      }
                      if ((!this._manualWidth || this.adaptWidthToChildren) && !this._isVertical) {
                        var previousWidth = this.width;
                        this.width = stackWidth + "px";
                        panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;
                      }
                      if (panelHeightChanged) {
                        this._height.ignoreAdaptiveScaling = true;
                      }
                      if (panelWidthChanged) {
                        this._width.ignoreAdaptiveScaling = true;
                      }
                      this._doNotTrackManualChanges = false;
                      if (panelWidthChanged || panelHeightChanged) {
                        this._rebuildLayout = true;
                      }
                      _super.prototype._postMeasure.call(this);
                    };
                    StackPanel2.prototype.serialize = function(serializationObject) {
                      _super.prototype.serialize.call(this, serializationObject);
                      serializationObject.manualWidth = this._manualWidth;
                      serializationObject.manualHeight = this._manualHeight;
                    };
                    StackPanel2.prototype._parseFromContent = function(serializedObject, host) {
                      this._manualWidth = serializedObject.manualWidth;
                      this._manualHeight = serializedObject.manualHeight;
                      _super.prototype._parseFromContent.call(this, serializedObject, host);
                    };
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], StackPanel2.prototype, "ignoreLayoutWarnings", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], StackPanel2.prototype, "isVertical", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], StackPanel2.prototype, "spacing", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], StackPanel2.prototype, "width", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], StackPanel2.prototype, "height", null);
                    return StackPanel2;
                  }(_container__WEBPACK_IMPORTED_MODULE_2__.Container)
                );
                (0, core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.StackPanel", StackPanel);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/statics.js": (
              /*!****************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/statics.js ***!
                \****************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "name": () => (
                    /* binding */
                    name
                  )
                  /* harmony export */
                });
                var _control__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! ./control */
                  "../../../lts/gui/dist/2D/controls/control.js"
                );
                var _stackPanel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./stackPanel */
                  "../../../lts/gui/dist/2D/controls/stackPanel.js"
                );
                var _textBlock__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./textBlock */
                  "../../../lts/gui/dist/2D/controls/textBlock.js"
                );
                var name = "Statics";
                _control__WEBPACK_IMPORTED_MODULE_0__.Control.AddHeader = function(control, text, size, options) {
                  var panel = new _stackPanel__WEBPACK_IMPORTED_MODULE_1__.StackPanel("panel");
                  var isHorizontal = options ? options.isHorizontal : true;
                  var controlFirst = options ? options.controlFirst : true;
                  panel.isVertical = !isHorizontal;
                  var header = new _textBlock__WEBPACK_IMPORTED_MODULE_2__.TextBlock("header");
                  header.text = text;
                  header.textHorizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_0__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                  if (isHorizontal) {
                    header.width = size;
                  } else {
                    header.height = size;
                  }
                  if (controlFirst) {
                    panel.addControl(control);
                    panel.addControl(header);
                    header.paddingLeft = "5px";
                  } else {
                    panel.addControl(header);
                    panel.addControl(control);
                    header.paddingRight = "5px";
                  }
                  header.shadowBlur = control.shadowBlur;
                  header.shadowColor = control.shadowColor;
                  header.shadowOffsetX = control.shadowOffsetX;
                  header.shadowOffsetY = control.shadowOffsetY;
                  return panel;
                };
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/textBlock.js": (
              /*!******************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/textBlock.js ***!
                \******************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "TextBlock": () => (
                    /* binding */
                    TextBlock
                  ),
                  /* harmony export */
                  "TextWrapping": () => (
                    /* binding */
                    TextWrapping
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Engines/engineStore */
                  "core/Misc/perfCounter"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__);
                var _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ../valueAndUnit */
                  "../../../lts/gui/dist/2D/valueAndUnit.js"
                );
                var _control__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./control */
                  "../../../lts/gui/dist/2D/controls/control.js"
                );
                var TextWrapping;
                (function(TextWrapping2) {
                  TextWrapping2[TextWrapping2["Clip"] = 0] = "Clip";
                  TextWrapping2[TextWrapping2["WordWrap"] = 1] = "WordWrap";
                  TextWrapping2[TextWrapping2["Ellipsis"] = 2] = "Ellipsis";
                  TextWrapping2[TextWrapping2["WordWrapEllipsis"] = 3] = "WordWrapEllipsis";
                })(TextWrapping || (TextWrapping = {}));
                var TextBlock = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(TextBlock2, _super);
                    function TextBlock2(name, text) {
                      if (text === void 0) {
                        text = "";
                      }
                      var _this = _super.call(this, name) || this;
                      _this.name = name;
                      _this._text = "";
                      _this._textWrapping = TextWrapping.Clip;
                      _this._textHorizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.HORIZONTAL_ALIGNMENT_CENTER;
                      _this._textVerticalAlignment = _control__WEBPACK_IMPORTED_MODULE_3__.Control.VERTICAL_ALIGNMENT_CENTER;
                      _this._resizeToFit = false;
                      _this._lineSpacing = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit(0);
                      _this._outlineWidth = 0;
                      _this._outlineColor = "white";
                      _this._underline = false;
                      _this._lineThrough = false;
                      _this._wordDivider = " ";
                      _this._forceResizeWidth = false;
                      _this.onTextChangedObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this.onLinesReadyObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this._linesTemp = [];
                      _this.text = text;
                      return _this;
                    }
                    Object.defineProperty(TextBlock2.prototype, "lines", {
                      /**
                       * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)
                       */
                      get: function() {
                        return this._lines;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TextBlock2.prototype, "resizeToFit", {
                      /**
                       * Gets or sets an boolean indicating that the TextBlock will be resized to fit container
                       */
                      get: function() {
                        return this._resizeToFit;
                      },
                      /**
                       * Gets or sets an boolean indicating that the TextBlock will be resized to fit container
                       */
                      set: function(value) {
                        if (this._resizeToFit === value) {
                          return;
                        }
                        this._resizeToFit = value;
                        if (this._resizeToFit) {
                          this._width.ignoreAdaptiveScaling = true;
                          this._height.ignoreAdaptiveScaling = true;
                        }
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TextBlock2.prototype, "textWrapping", {
                      /**
                       * Gets or sets a boolean indicating if text must be wrapped
                       */
                      get: function() {
                        return this._textWrapping;
                      },
                      /**
                       * Gets or sets a boolean indicating if text must be wrapped
                       */
                      set: function(value) {
                        if (this._textWrapping === value) {
                          return;
                        }
                        this._textWrapping = +value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TextBlock2.prototype, "text", {
                      /**
                       * Gets or sets text to display
                       */
                      get: function() {
                        return this._text;
                      },
                      /**
                       * Gets or sets text to display
                       */
                      set: function(value) {
                        if (this._text === value) {
                          return;
                        }
                        this._text = value + "";
                        this._markAsDirty();
                        this.onTextChangedObservable.notifyObservers(this);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TextBlock2.prototype, "textHorizontalAlignment", {
                      /**
                       * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)
                       */
                      get: function() {
                        return this._textHorizontalAlignment;
                      },
                      /**
                       * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)
                       */
                      set: function(value) {
                        if (this._textHorizontalAlignment === value) {
                          return;
                        }
                        this._textHorizontalAlignment = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TextBlock2.prototype, "textVerticalAlignment", {
                      /**
                       * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)
                       */
                      get: function() {
                        return this._textVerticalAlignment;
                      },
                      /**
                       * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)
                       */
                      set: function(value) {
                        if (this._textVerticalAlignment === value) {
                          return;
                        }
                        this._textVerticalAlignment = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TextBlock2.prototype, "lineSpacing", {
                      /**
                       * Gets or sets line spacing value
                       */
                      get: function() {
                        return this._lineSpacing.toString(this._host);
                      },
                      /**
                       * Gets or sets line spacing value
                       */
                      set: function(value) {
                        if (this._lineSpacing.fromString(value)) {
                          this._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TextBlock2.prototype, "outlineWidth", {
                      /**
                       * Gets or sets outlineWidth of the text to display
                       */
                      get: function() {
                        return this._outlineWidth;
                      },
                      /**
                       * Gets or sets outlineWidth of the text to display
                       */
                      set: function(value) {
                        if (this._outlineWidth === value) {
                          return;
                        }
                        this._outlineWidth = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TextBlock2.prototype, "underline", {
                      /**
                       * Gets or sets a boolean indicating that text must have underline
                       */
                      get: function() {
                        return this._underline;
                      },
                      /**
                       * Gets or sets a boolean indicating that text must have underline
                       */
                      set: function(value) {
                        if (this._underline === value) {
                          return;
                        }
                        this._underline = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TextBlock2.prototype, "lineThrough", {
                      /**
                       * Gets or sets an boolean indicating that text must be crossed out
                       */
                      get: function() {
                        return this._lineThrough;
                      },
                      /**
                       * Gets or sets an boolean indicating that text must be crossed out
                       */
                      set: function(value) {
                        if (this._lineThrough === value) {
                          return;
                        }
                        this._lineThrough = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TextBlock2.prototype, "outlineColor", {
                      /**
                       * Gets or sets outlineColor of the text to display
                       */
                      get: function() {
                        return this._outlineColor;
                      },
                      /**
                       * Gets or sets outlineColor of the text to display
                       */
                      set: function(value) {
                        if (this._outlineColor === value) {
                          return;
                        }
                        this._outlineColor = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TextBlock2.prototype, "wordDivider", {
                      /**
                       * Gets or sets word divider
                       */
                      get: function() {
                        return this._wordDivider;
                      },
                      /**
                       * Gets or sets word divider
                       */
                      set: function(value) {
                        if (this._wordDivider === value) {
                          return;
                        }
                        this._wordDivider = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TextBlock2.prototype, "forceResizeWidth", {
                      /**
                       * By default, if a text block has text wrapping other than Clip, its width
                       * is not resized even if resizeToFit = true. This parameter forces the width
                       * to be resized.
                       */
                      get: function() {
                        return this._forceResizeWidth;
                      },
                      set: function(value) {
                        if (this._forceResizeWidth === value) {
                          return;
                        }
                        this._forceResizeWidth = value;
                        this._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    TextBlock2.prototype._getTypeName = function() {
                      return "TextBlock";
                    };
                    TextBlock2.prototype._processMeasures = function(parentMeasure, context) {
                      if (!this._fontOffset || this.isDirty) {
                        this._fontOffset = _control__WEBPACK_IMPORTED_MODULE_3__.Control._GetFontOffset(context.font);
                      }
                      _super.prototype._processMeasures.call(this, parentMeasure, context);
                      this._lines = this._breakLines(this._currentMeasure.width, this._currentMeasure.height, context);
                      this.onLinesReadyObservable.notifyObservers(this);
                      var maxLineWidth = 0;
                      for (var i = 0; i < this._lines.length; i++) {
                        var line = this._lines[i];
                        if (line.width > maxLineWidth) {
                          maxLineWidth = line.width;
                        }
                      }
                      if (this._resizeToFit) {
                        if (this._textWrapping === TextWrapping.Clip || this._forceResizeWidth) {
                          var newWidth = Math.ceil(this._paddingLeftInPixels) + Math.ceil(this._paddingRightInPixels) + Math.ceil(maxLineWidth);
                          if (newWidth !== this._width.getValueInPixel(this._host, this._tempParentMeasure.width)) {
                            this._width.updateInPlace(newWidth, _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit.UNITMODE_PIXEL);
                            this._rebuildLayout = true;
                          }
                        }
                        var newHeight = this._paddingTopInPixels + this._paddingBottomInPixels + this._fontOffset.height * this._lines.length | 0;
                        if (this._lines.length > 0 && this._lineSpacing.internalValue !== 0) {
                          var lineSpacing = 0;
                          if (this._lineSpacing.isPixel) {
                            lineSpacing = this._lineSpacing.getValue(this._host);
                          } else {
                            lineSpacing = this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);
                          }
                          newHeight += (this._lines.length - 1) * lineSpacing;
                        }
                        if (newHeight !== this._height.internalValue) {
                          this._height.updateInPlace(newHeight, _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit.UNITMODE_PIXEL);
                          this._rebuildLayout = true;
                        }
                      }
                    };
                    TextBlock2.prototype._drawText = function(text, textWidth, y, context) {
                      var width = this._currentMeasure.width;
                      var x = 0;
                      switch (this._textHorizontalAlignment) {
                        case _control__WEBPACK_IMPORTED_MODULE_3__.Control.HORIZONTAL_ALIGNMENT_LEFT:
                          x = 0;
                          break;
                        case _control__WEBPACK_IMPORTED_MODULE_3__.Control.HORIZONTAL_ALIGNMENT_RIGHT:
                          x = width - textWidth;
                          break;
                        case _control__WEBPACK_IMPORTED_MODULE_3__.Control.HORIZONTAL_ALIGNMENT_CENTER:
                          x = (width - textWidth) / 2;
                          break;
                      }
                      if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                        context.shadowColor = this.shadowColor;
                        context.shadowBlur = this.shadowBlur;
                        context.shadowOffsetX = this.shadowOffsetX;
                        context.shadowOffsetY = this.shadowOffsetY;
                      }
                      if (this.outlineWidth) {
                        context.strokeText(text, this._currentMeasure.left + x, y);
                      }
                      context.fillText(text, this._currentMeasure.left + x, y);
                      if (this._underline) {
                        context.beginPath();
                        context.lineWidth = Math.round(this.fontSizeInPixels * 0.05);
                        context.moveTo(this._currentMeasure.left + x, y + 3);
                        context.lineTo(this._currentMeasure.left + x + textWidth, y + 3);
                        context.stroke();
                        context.closePath();
                      }
                      if (this._lineThrough) {
                        context.beginPath();
                        context.lineWidth = Math.round(this.fontSizeInPixels * 0.05);
                        context.moveTo(this._currentMeasure.left + x, y - this.fontSizeInPixels / 3);
                        context.lineTo(this._currentMeasure.left + x + textWidth, y - this.fontSizeInPixels / 3);
                        context.stroke();
                        context.closePath();
                      }
                    };
                    TextBlock2.prototype._draw = function(context) {
                      context.save();
                      this._applyStates(context);
                      this._renderLines(context);
                      context.restore();
                    };
                    TextBlock2.prototype._applyStates = function(context) {
                      _super.prototype._applyStates.call(this, context);
                      if (this.outlineWidth) {
                        context.lineWidth = this.outlineWidth;
                        context.strokeStyle = this.outlineColor;
                        context.lineJoin = "miter";
                        context.miterLimit = 2;
                      }
                    };
                    TextBlock2.prototype._breakLines = function(refWidth, refHeight, context) {
                      var _a, _b;
                      this._linesTemp.length = 0;
                      var _lines = this.text.split("\n");
                      if (this._textWrapping === TextWrapping.Ellipsis) {
                        for (var _i = 0, _lines_1 = _lines; _i < _lines_1.length; _i++) {
                          var _line = _lines_1[_i];
                          this._linesTemp.push(this._parseLineEllipsis(_line, refWidth, context));
                        }
                      } else if (this._textWrapping === TextWrapping.WordWrap) {
                        for (var _c = 0, _lines_2 = _lines; _c < _lines_2.length; _c++) {
                          var _line = _lines_2[_c];
                          (_a = this._linesTemp).push.apply(_a, this._parseLineWordWrap(_line, refWidth, context));
                        }
                      } else if (this._textWrapping === TextWrapping.WordWrapEllipsis) {
                        for (var _d = 0, _lines_3 = _lines; _d < _lines_3.length; _d++) {
                          var _line = _lines_3[_d];
                          (_b = this._linesTemp).push.apply(_b, this._parseLineWordWrapEllipsis(_line, refWidth, refHeight, context));
                        }
                      } else {
                        for (var _e = 0, _lines_4 = _lines; _e < _lines_4.length; _e++) {
                          var _line = _lines_4[_e];
                          this._linesTemp.push(this._parseLine(_line, context));
                        }
                      }
                      return this._linesTemp;
                    };
                    TextBlock2.prototype._parseLine = function(line, context) {
                      if (line === void 0) {
                        line = "";
                      }
                      return { text: line, width: this._getTextMetricsWidth(context.measureText(line)) };
                    };
                    TextBlock2.prototype._getCharsToRemove = function(lineWidth, width, lineLength) {
                      var diff = lineWidth > width ? lineWidth - width : 0;
                      var charWidth = lineWidth / lineLength;
                      var removeChars = Math.max(Math.floor(diff / charWidth), 1);
                      return removeChars;
                    };
                    TextBlock2.prototype._parseLineEllipsis = function(line, width, context) {
                      if (line === void 0) {
                        line = "";
                      }
                      var lineWidth = this._getTextMetricsWidth(context.measureText(line));
                      var removeChars = this._getCharsToRemove(lineWidth, width, line.length);
                      var characters = Array.from && Array.from(line);
                      if (!characters) {
                        while (line.length > 2 && lineWidth > width) {
                          line = line.slice(0, -removeChars);
                          lineWidth = this._getTextMetricsWidth(context.measureText(line + "…"));
                          removeChars = this._getCharsToRemove(lineWidth, width, line.length);
                        }
                        line += "…";
                      } else {
                        while (characters.length && lineWidth > width) {
                          characters.splice(characters.length - removeChars, removeChars);
                          line = "".concat(characters.join(""), "…");
                          lineWidth = this._getTextMetricsWidth(context.measureText(line));
                          removeChars = this._getCharsToRemove(lineWidth, width, line.length);
                        }
                      }
                      return { text: line, width: lineWidth };
                    };
                    TextBlock2.prototype._getTextMetricsWidth = function(textMetrics) {
                      if (textMetrics.actualBoundingBoxLeft !== void 0) {
                        return Math.abs(textMetrics.actualBoundingBoxLeft) + Math.abs(textMetrics.actualBoundingBoxRight);
                      }
                      return textMetrics.width;
                    };
                    TextBlock2.prototype._parseLineWordWrap = function(line, width, context) {
                      if (line === void 0) {
                        line = "";
                      }
                      var lines = [];
                      var words = this.wordSplittingFunction ? this.wordSplittingFunction(line) : line.split(this._wordDivider);
                      var lineWidth = this._getTextMetricsWidth(context.measureText(line));
                      for (var n = 0; n < words.length; n++) {
                        var testLine = n > 0 ? line + this._wordDivider + words[n] : words[0];
                        var testWidth = this._getTextMetricsWidth(context.measureText(testLine));
                        if (testWidth > width && n > 0) {
                          lines.push({ text: line, width: lineWidth });
                          line = words[n];
                          lineWidth = this._getTextMetricsWidth(context.measureText(line));
                        } else {
                          lineWidth = testWidth;
                          line = testLine;
                        }
                      }
                      lines.push({ text: line, width: lineWidth });
                      return lines;
                    };
                    TextBlock2.prototype._parseLineWordWrapEllipsis = function(line, width, height, context) {
                      if (line === void 0) {
                        line = "";
                      }
                      var lines = this._parseLineWordWrap(line, width, context);
                      for (var n = 1; n <= lines.length; n++) {
                        var currentHeight = this._computeHeightForLinesOf(n);
                        if (currentHeight > height && n > 1) {
                          var lastLine = lines[n - 2];
                          var currentLine = lines[n - 1];
                          lines[n - 2] = this._parseLineEllipsis(lastLine.text + this._wordDivider + currentLine.text, width, context);
                          var linesToRemove = lines.length - n + 1;
                          for (var i = 0; i < linesToRemove; i++) {
                            lines.pop();
                          }
                          return lines;
                        }
                      }
                      return lines;
                    };
                    TextBlock2.prototype._renderLines = function(context) {
                      if (!this._fontOffset || !this._lines) {
                        return;
                      }
                      var height = this._currentMeasure.height;
                      var rootY = 0;
                      switch (this._textVerticalAlignment) {
                        case _control__WEBPACK_IMPORTED_MODULE_3__.Control.VERTICAL_ALIGNMENT_TOP:
                          rootY = this._fontOffset.ascent;
                          break;
                        case _control__WEBPACK_IMPORTED_MODULE_3__.Control.VERTICAL_ALIGNMENT_BOTTOM:
                          rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;
                          break;
                        case _control__WEBPACK_IMPORTED_MODULE_3__.Control.VERTICAL_ALIGNMENT_CENTER:
                          rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;
                          break;
                      }
                      rootY += this._currentMeasure.top;
                      for (var i = 0; i < this._lines.length; i++) {
                        var line = this._lines[i];
                        if (i !== 0 && this._lineSpacing.internalValue !== 0) {
                          if (this._lineSpacing.isPixel) {
                            rootY += this._lineSpacing.getValue(this._host);
                          } else {
                            rootY = rootY + this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);
                          }
                        }
                        this._drawText(line.text, line.width, rootY, context);
                        rootY += this._fontOffset.height;
                      }
                    };
                    TextBlock2.prototype._computeHeightForLinesOf = function(lineCount) {
                      var newHeight = this._paddingTopInPixels + this._paddingBottomInPixels + this._fontOffset.height * lineCount;
                      if (lineCount > 0 && this._lineSpacing.internalValue !== 0) {
                        var lineSpacing = 0;
                        if (this._lineSpacing.isPixel) {
                          lineSpacing = this._lineSpacing.getValue(this._host);
                        } else {
                          lineSpacing = this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);
                        }
                        newHeight += (lineCount - 1) * lineSpacing;
                      }
                      return newHeight;
                    };
                    TextBlock2.prototype.computeExpectedHeight = function() {
                      var _a;
                      if (this.text && this.widthInPixels) {
                        var context_1 = (_a = core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.EngineStore.LastCreatedEngine) === null || _a === void 0 ? void 0 : _a.createCanvas(0, 0).getContext("2d");
                        if (context_1) {
                          this._applyStates(context_1);
                          if (!this._fontOffset) {
                            this._fontOffset = _control__WEBPACK_IMPORTED_MODULE_3__.Control._GetFontOffset(context_1.font);
                          }
                          var lines = this._lines ? this._lines : this._breakLines(this.widthInPixels - this._paddingLeftInPixels - this._paddingRightInPixels, this.heightInPixels - this._paddingTopInPixels - this._paddingBottomInPixels, context_1);
                          return this._computeHeightForLinesOf(lines.length);
                        }
                      }
                      return 0;
                    };
                    TextBlock2.prototype.dispose = function() {
                      _super.prototype.dispose.call(this);
                      this.onTextChangedObservable.clear();
                    };
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], TextBlock2.prototype, "resizeToFit", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], TextBlock2.prototype, "textWrapping", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], TextBlock2.prototype, "text", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], TextBlock2.prototype, "textHorizontalAlignment", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], TextBlock2.prototype, "textVerticalAlignment", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], TextBlock2.prototype, "lineSpacing", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], TextBlock2.prototype, "outlineWidth", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], TextBlock2.prototype, "underline", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], TextBlock2.prototype, "lineThrough", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], TextBlock2.prototype, "outlineColor", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], TextBlock2.prototype, "wordDivider", null);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], TextBlock2.prototype, "forceResizeWidth", null);
                    return TextBlock2;
                  }(_control__WEBPACK_IMPORTED_MODULE_3__.Control)
                );
                (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.TextBlock", TextBlock);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/textWrapper.js": (
              /*!********************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/textWrapper.js ***!
                \********************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "TextWrapper": () => (
                    /* binding */
                    TextWrapper
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var TextWrapper = (
                  /** @class */
                  function() {
                    function TextWrapper2() {
                    }
                    Object.defineProperty(TextWrapper2.prototype, "text", {
                      get: function() {
                        return this._characters ? this._characters.join("") : this._text;
                      },
                      set: function(txt) {
                        this._text = txt;
                        this._characters = Array.from && Array.from(txt);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TextWrapper2.prototype, "length", {
                      get: function() {
                        return this._characters ? this._characters.length : this._text.length;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    TextWrapper2.prototype.removePart = function(idxStart, idxEnd, insertTxt) {
                      var _a;
                      this._text = this._text.slice(0, idxStart) + (insertTxt ? insertTxt : "") + this._text.slice(idxEnd);
                      if (this._characters) {
                        var newCharacters = insertTxt ? Array.from(insertTxt) : [];
                        (_a = this._characters).splice.apply(_a, (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([idxStart, idxEnd - idxStart], newCharacters, false));
                      }
                    };
                    TextWrapper2.prototype.charAt = function(idx) {
                      return this._characters ? this._characters[idx] : this._text.charAt(idx);
                    };
                    TextWrapper2.prototype.substr = function(from, length) {
                      if (this._characters) {
                        if (isNaN(from)) {
                          from = 0;
                        } else if (from >= 0) {
                          from = Math.min(from, this._characters.length);
                        } else {
                          from = this._characters.length + Math.max(from, -this._characters.length);
                        }
                        if (length === void 0) {
                          length = this._characters.length - from;
                        } else if (isNaN(length)) {
                          length = 0;
                        } else if (length < 0) {
                          length = 0;
                        }
                        var temp = [];
                        while (--length >= 0) {
                          temp[length] = this._characters[from + length];
                        }
                        return temp.join("");
                      }
                      return this._text.substr(from, length);
                    };
                    TextWrapper2.prototype.substring = function(from, to) {
                      if (this._characters) {
                        if (isNaN(from)) {
                          from = 0;
                        } else if (from > this._characters.length) {
                          from = this._characters.length;
                        } else if (from < 0) {
                          from = 0;
                        }
                        if (to === void 0) {
                          to = this._characters.length;
                        } else if (isNaN(to)) {
                          to = 0;
                        } else if (to > this._characters.length) {
                          to = this._characters.length;
                        } else if (to < 0) {
                          to = 0;
                        }
                        var temp = [];
                        var idx = 0;
                        while (from < to) {
                          temp[idx++] = this._characters[from++];
                        }
                        return temp.join("");
                      }
                      return this._text.substring(from, to);
                    };
                    TextWrapper2.prototype.isWord = function(index) {
                      var rWord = /\w/g;
                      return this._characters ? this._characters[index].search(rWord) !== -1 : this._text.search(rWord) !== -1;
                    };
                    return TextWrapper2;
                  }()
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/toggleButton.js": (
              /*!*********************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/toggleButton.js ***!
                \*********************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "ToggleButton": () => (
                    /* binding */
                    ToggleButton
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Misc/typeStore */
                  "core/Misc/perfCounter"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__);
                var _rectangle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./rectangle */
                  "../../../lts/gui/dist/2D/controls/rectangle.js"
                );
                var ToggleButton = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ToggleButton2, _super);
                    function ToggleButton2(name, group) {
                      var _this = _super.call(this, name) || this;
                      _this.name = name;
                      _this.onIsActiveChangedObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this.delegatePickingToChildren = false;
                      _this._isActive = false;
                      _this.group = group !== null && group !== void 0 ? group : "";
                      _this.thickness = 0;
                      _this.isPointerBlocker = true;
                      var alphaStore = null;
                      _this.toActiveAnimation = function() {
                        _this.thickness = 1;
                      };
                      _this.toInactiveAnimation = function() {
                        _this.thickness = 0;
                      };
                      _this.pointerEnterActiveAnimation = function() {
                        alphaStore = _this.alpha;
                        _this.alpha -= 0.1;
                      };
                      _this.pointerOutActiveAnimation = function() {
                        if (alphaStore !== null) {
                          _this.alpha = alphaStore;
                        }
                      };
                      _this.pointerDownActiveAnimation = function() {
                        _this.scaleX -= 0.05;
                        _this.scaleY -= 0.05;
                      };
                      _this.pointerUpActiveAnimation = function() {
                        _this.scaleX += 0.05;
                        _this.scaleY += 0.05;
                      };
                      _this.pointerEnterInactiveAnimation = function() {
                        alphaStore = _this.alpha;
                        _this.alpha -= 0.1;
                      };
                      _this.pointerOutInactiveAnimation = function() {
                        if (alphaStore !== null) {
                          _this.alpha = alphaStore;
                        }
                      };
                      _this.pointerDownInactiveAnimation = function() {
                        _this.scaleX -= 0.05;
                        _this.scaleY -= 0.05;
                      };
                      _this.pointerUpInactiveAnimation = function() {
                        _this.scaleX += 0.05;
                        _this.scaleY += 0.05;
                      };
                      return _this;
                    }
                    Object.defineProperty(ToggleButton2.prototype, "group", {
                      /** Gets or sets group name this toggle button belongs to */
                      get: function() {
                        return this._group;
                      },
                      set: function(value) {
                        if (this._group === value) {
                          return;
                        }
                        this._group = value;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ToggleButton2.prototype, "isActive", {
                      /** Gets or sets a boolean indicating if the toggle button is active or not */
                      get: function() {
                        return this._isActive;
                      },
                      set: function(value) {
                        var _this = this;
                        var _a, _b;
                        if (this._isActive === value) {
                          return;
                        }
                        this._isActive = value;
                        if (this._isActive) {
                          (_a = this.toActiveAnimation) === null || _a === void 0 ? void 0 : _a.call(this);
                        } else {
                          (_b = this.toInactiveAnimation) === null || _b === void 0 ? void 0 : _b.call(this);
                        }
                        this._markAsDirty();
                        this.onIsActiveChangedObservable.notifyObservers(value);
                        if (this._isActive && this._host && this._group) {
                          this._host.executeOnAllControls(function(control) {
                            if (control.typeName === "ToggleButton") {
                              if (control === _this) {
                                return;
                              }
                              var childToggle = control;
                              if (childToggle.group === _this.group) {
                                childToggle.isActive = false;
                              }
                            }
                          });
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    ToggleButton2.prototype._getTypeName = function() {
                      return "ToggleButton";
                    };
                    ToggleButton2.prototype._processPicking = function(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY) {
                      if (!this._isEnabled || !this.isHitTestVisible || !this.isVisible || this.notRenderable) {
                        return false;
                      }
                      if (!_super.prototype.contains.call(this, x, y)) {
                        return false;
                      }
                      if (this.delegatePickingToChildren) {
                        var contains = false;
                        for (var index = this._children.length - 1; index >= 0; index--) {
                          var child = this._children[index];
                          if (child.isEnabled && child.isHitTestVisible && child.isVisible && !child.notRenderable && child.contains(x, y)) {
                            contains = true;
                            break;
                          }
                        }
                        if (!contains) {
                          return false;
                        }
                      }
                      this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);
                      return true;
                    };
                    ToggleButton2.prototype._onPointerEnter = function(target, pi) {
                      if (!_super.prototype._onPointerEnter.call(this, target, pi)) {
                        return false;
                      }
                      if (this.isReadOnly) {
                        return true;
                      }
                      if (this._isActive) {
                        if (this.pointerEnterActiveAnimation) {
                          this.pointerEnterActiveAnimation();
                        }
                      } else {
                        if (this.pointerEnterInactiveAnimation) {
                          this.pointerEnterInactiveAnimation();
                        }
                      }
                      return true;
                    };
                    ToggleButton2.prototype._onPointerOut = function(target, pi, force) {
                      if (force === void 0) {
                        force = false;
                      }
                      if (!this.isReadOnly) {
                        if (this._isActive) {
                          if (this.pointerOutActiveAnimation) {
                            this.pointerOutActiveAnimation();
                          }
                        } else {
                          if (this.pointerOutInactiveAnimation) {
                            this.pointerOutInactiveAnimation();
                          }
                        }
                      }
                      _super.prototype._onPointerOut.call(this, target, pi, force);
                    };
                    ToggleButton2.prototype._onPointerDown = function(target, coordinates, pointerId, buttonIndex, pi) {
                      if (!_super.prototype._onPointerDown.call(this, target, coordinates, pointerId, buttonIndex, pi)) {
                        return false;
                      }
                      if (this.isReadOnly) {
                        return true;
                      }
                      if (this._isActive) {
                        if (this.pointerDownActiveAnimation) {
                          this.pointerDownActiveAnimation();
                        }
                      } else {
                        if (this.pointerDownInactiveAnimation) {
                          this.pointerDownInactiveAnimation();
                        }
                      }
                      return true;
                    };
                    ToggleButton2.prototype._onPointerUp = function(target, coordinates, pointerId, buttonIndex, notifyClick, pi) {
                      if (!this.isReadOnly) {
                        if (this._isActive) {
                          if (this.pointerUpActiveAnimation) {
                            this.pointerUpActiveAnimation();
                          }
                        } else {
                          if (this.pointerUpInactiveAnimation) {
                            this.pointerUpInactiveAnimation();
                          }
                        }
                      }
                      _super.prototype._onPointerUp.call(this, target, coordinates, pointerId, buttonIndex, notifyClick, pi);
                    };
                    return ToggleButton2;
                  }(_rectangle__WEBPACK_IMPORTED_MODULE_2__.Rectangle)
                );
                (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.ToggleButton", ToggleButton);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/controls/virtualKeyboard.js": (
              /*!************************************************************!*\
                !*** ../../../lts/gui/dist/2D/controls/virtualKeyboard.js ***!
                \************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "KeyPropertySet": () => (
                    /* binding */
                    KeyPropertySet
                  ),
                  /* harmony export */
                  "VirtualKeyboard": () => (
                    /* binding */
                    VirtualKeyboard
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Misc/typeStore */
                  "core/Misc/perfCounter"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__);
                var _stackPanel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./stackPanel */
                  "../../../lts/gui/dist/2D/controls/stackPanel.js"
                );
                var _button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./button */
                  "../../../lts/gui/dist/2D/controls/button.js"
                );
                var _inputTextArea__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
                  /*! ./inputTextArea */
                  "../../../lts/gui/dist/2D/controls/inputTextArea.js"
                );
                var KeyPropertySet = (
                  /** @class */
                  function() {
                    function KeyPropertySet2() {
                    }
                    return KeyPropertySet2;
                  }()
                );
                var VirtualKeyboard = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(VirtualKeyboard2, _super);
                    function VirtualKeyboard2() {
                      var _this = _super !== null && _super.apply(this, arguments) || this;
                      _this.onKeyPressObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this.defaultButtonWidth = "40px";
                      _this.defaultButtonHeight = "40px";
                      _this.defaultButtonPaddingLeft = "2px";
                      _this.defaultButtonPaddingRight = "2px";
                      _this.defaultButtonPaddingTop = "2px";
                      _this.defaultButtonPaddingBottom = "2px";
                      _this.defaultButtonColor = "#DDD";
                      _this.defaultButtonBackground = "#070707";
                      _this.shiftButtonColor = "#7799FF";
                      _this.selectedShiftThickness = 1;
                      _this.shiftState = 0;
                      _this._currentlyConnectedInputText = null;
                      _this._connectedInputTexts = [];
                      _this._onKeyPressObserver = null;
                      return _this;
                    }
                    VirtualKeyboard2.prototype._getTypeName = function() {
                      return "VirtualKeyboard";
                    };
                    VirtualKeyboard2.prototype._createKey = function(key, propertySet) {
                      var _this = this;
                      var button = _button__WEBPACK_IMPORTED_MODULE_3__.Button.CreateSimpleButton(key, key);
                      button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;
                      button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;
                      button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;
                      button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;
                      button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;
                      button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;
                      button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;
                      button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;
                      button.thickness = 0;
                      button.isFocusInvisible = true;
                      button.shadowColor = this.shadowColor;
                      button.shadowBlur = this.shadowBlur;
                      button.shadowOffsetX = this.shadowOffsetX;
                      button.shadowOffsetY = this.shadowOffsetY;
                      button.onPointerUpObservable.add(function() {
                        _this.onKeyPressObservable.notifyObservers(key);
                      });
                      return button;
                    };
                    VirtualKeyboard2.prototype.addKeysRow = function(keys, propertySets) {
                      var panel = new _stackPanel__WEBPACK_IMPORTED_MODULE_2__.StackPanel();
                      panel.isVertical = false;
                      panel.isFocusInvisible = true;
                      var maxKey = null;
                      for (var i = 0; i < keys.length; i++) {
                        var properties = null;
                        if (propertySets && propertySets.length === keys.length) {
                          properties = propertySets[i];
                        }
                        var key = this._createKey(keys[i], properties);
                        if (!maxKey || key.heightInPixels > maxKey.heightInPixels) {
                          maxKey = key;
                        }
                        panel.addControl(key);
                      }
                      panel.height = maxKey ? maxKey.height : this.defaultButtonHeight;
                      this.addControl(panel);
                    };
                    VirtualKeyboard2.prototype.applyShiftState = function(shiftState) {
                      if (!this.children) {
                        return;
                      }
                      for (var i = 0; i < this.children.length; i++) {
                        var row = this.children[i];
                        if (!row || !row.children) {
                          continue;
                        }
                        var rowContainer = row;
                        for (var j = 0; j < rowContainer.children.length; j++) {
                          var button = rowContainer.children[j];
                          if (!button || !button.children[0]) {
                            continue;
                          }
                          var button_tblock = button.children[0];
                          if (button_tblock.text === "⇧") {
                            button.color = shiftState ? this.shiftButtonColor : this.defaultButtonColor;
                            button.thickness = shiftState > 1 ? this.selectedShiftThickness : 0;
                          }
                          button_tblock.text = shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase();
                        }
                      }
                    };
                    Object.defineProperty(VirtualKeyboard2.prototype, "connectedInputText", {
                      /** Gets the input text control currently attached to the keyboard */
                      get: function() {
                        return this._currentlyConnectedInputText;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    VirtualKeyboard2.prototype.connect = function(input) {
                      var _this = this;
                      var inputTextAlreadyConnected = this._connectedInputTexts.some(function(a) {
                        return a.input === input;
                      });
                      if (inputTextAlreadyConnected) {
                        return;
                      }
                      if (this._onKeyPressObserver === null) {
                        this._onKeyPressObserver = this.onKeyPressObservable.add(function(key) {
                          if (!_this._currentlyConnectedInputText) {
                            return;
                          }
                          _this._currentlyConnectedInputText._host.focusedControl = _this._currentlyConnectedInputText;
                          switch (key) {
                            case "⇧":
                              _this.shiftState++;
                              if (_this.shiftState > 2) {
                                _this.shiftState = 0;
                              }
                              _this.applyShiftState(_this.shiftState);
                              return;
                            case "←":
                              if (_this._currentlyConnectedInputText instanceof _inputTextArea__WEBPACK_IMPORTED_MODULE_4__.InputTextArea) {
                                _this._currentlyConnectedInputText.alternativeProcessKey("Backspace");
                              } else {
                                _this._currentlyConnectedInputText.processKey(8);
                              }
                              return;
                            case "↵":
                              if (_this._currentlyConnectedInputText instanceof _inputTextArea__WEBPACK_IMPORTED_MODULE_4__.InputTextArea) {
                                _this._currentlyConnectedInputText.alternativeProcessKey("Enter");
                              } else {
                                _this._currentlyConnectedInputText.processKey(13);
                              }
                              return;
                          }
                          if (_this._currentlyConnectedInputText instanceof _inputTextArea__WEBPACK_IMPORTED_MODULE_4__.InputTextArea) {
                            _this._currentlyConnectedInputText.alternativeProcessKey("", _this.shiftState ? key.toUpperCase() : key);
                          } else {
                            _this._currentlyConnectedInputText.processKey(-1, _this.shiftState ? key.toUpperCase() : key);
                          }
                          if (_this.shiftState === 1) {
                            _this.shiftState = 0;
                            _this.applyShiftState(_this.shiftState);
                          }
                        });
                      }
                      this.isVisible = false;
                      this._currentlyConnectedInputText = input;
                      input._connectedVirtualKeyboard = this;
                      var onFocusObserver = input.onFocusObservable.add(function() {
                        _this._currentlyConnectedInputText = input;
                        input._connectedVirtualKeyboard = _this;
                        _this.isVisible = true;
                      });
                      var onBlurObserver = input.onBlurObservable.add(function() {
                        input._connectedVirtualKeyboard = null;
                        _this._currentlyConnectedInputText = null;
                        _this.isVisible = false;
                      });
                      this._connectedInputTexts.push({
                        input,
                        onBlurObserver,
                        onFocusObserver
                      });
                    };
                    VirtualKeyboard2.prototype.disconnect = function(input) {
                      var _this = this;
                      if (input) {
                        var filtered = this._connectedInputTexts.filter(function(a) {
                          return a.input === input;
                        });
                        if (filtered.length === 1) {
                          this._removeConnectedInputObservables(filtered[0]);
                          this._connectedInputTexts = this._connectedInputTexts.filter(function(a) {
                            return a.input !== input;
                          });
                          if (this._currentlyConnectedInputText === input) {
                            this._currentlyConnectedInputText = null;
                          }
                        }
                      } else {
                        this._connectedInputTexts.forEach(function(connectedInputText) {
                          _this._removeConnectedInputObservables(connectedInputText);
                        });
                        this._connectedInputTexts.length = 0;
                      }
                      if (this._connectedInputTexts.length === 0) {
                        this._currentlyConnectedInputText = null;
                        this.onKeyPressObservable.remove(this._onKeyPressObserver);
                        this._onKeyPressObserver = null;
                      }
                    };
                    VirtualKeyboard2.prototype._removeConnectedInputObservables = function(connectedInputText) {
                      connectedInputText.input._connectedVirtualKeyboard = null;
                      connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);
                      connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);
                    };
                    VirtualKeyboard2.prototype.dispose = function() {
                      _super.prototype.dispose.call(this);
                      this.disconnect();
                    };
                    VirtualKeyboard2.CreateDefaultLayout = function(name) {
                      var returnValue = new VirtualKeyboard2(name);
                      returnValue.addKeysRow(["1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "←"]);
                      returnValue.addKeysRow(["q", "w", "e", "r", "t", "y", "u", "i", "o", "p"]);
                      returnValue.addKeysRow(["a", "s", "d", "f", "g", "h", "j", "k", "l", ";", "'", "↵"]);
                      returnValue.addKeysRow(["⇧", "z", "x", "c", "v", "b", "n", "m", ",", ".", "/"]);
                      returnValue.addKeysRow([" "], [{ width: "200px" }]);
                      return returnValue;
                    };
                    VirtualKeyboard2.prototype._parseFromContent = function(serializedObject, host) {
                      var _this = this;
                      _super.prototype._parseFromContent.call(this, serializedObject, host);
                      for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
                        var row = _a[_i];
                        if (row.getClassName() === "StackPanel") {
                          var stackPanel = row;
                          var _loop_1 = function(key2) {
                            if (key2.getClassName() === "Button" && key2.name) {
                              key2.onPointerUpObservable.add(function() {
                                _this.onKeyPressObservable.notifyObservers(key2.name);
                              });
                            }
                          };
                          for (var _b = 0, _c = stackPanel.children; _b < _c.length; _b++) {
                            var key = _c[_b];
                            _loop_1(key);
                          }
                        }
                      }
                    };
                    return VirtualKeyboard2;
                  }(_stackPanel__WEBPACK_IMPORTED_MODULE_2__.StackPanel)
                );
                (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.VirtualKeyboard", VirtualKeyboard);
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/index.js": (
              /*!*****************************************!*\
                !*** ../../../lts/gui/dist/2D/index.js ***!
                \*****************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "AdvancedDynamicTexture": () => (
                    /* reexport safe */
                    _advancedDynamicTexture__WEBPACK_IMPORTED_MODULE_1__.AdvancedDynamicTexture
                  ),
                  /* harmony export */
                  "AdvancedDynamicTextureInstrumentation": () => (
                    /* reexport safe */
                    _adtInstrumentation__WEBPACK_IMPORTED_MODULE_2__.AdvancedDynamicTextureInstrumentation
                  ),
                  /* harmony export */
                  "BaseGradient": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.BaseGradient
                  ),
                  /* harmony export */
                  "BaseSlider": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.BaseSlider
                  ),
                  /* harmony export */
                  "Button": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.Button
                  ),
                  /* harmony export */
                  "Checkbox": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.Checkbox
                  ),
                  /* harmony export */
                  "CheckboxGroup": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.CheckboxGroup
                  ),
                  /* harmony export */
                  "ColorPicker": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.ColorPicker
                  ),
                  /* harmony export */
                  "Container": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.Container
                  ),
                  /* harmony export */
                  "Control": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.Control
                  ),
                  /* harmony export */
                  "DisplayGrid": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.DisplayGrid
                  ),
                  /* harmony export */
                  "Ellipse": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.Ellipse
                  ),
                  /* harmony export */
                  "FocusableButton": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.FocusableButton
                  ),
                  /* harmony export */
                  "Grid": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.Grid
                  ),
                  /* harmony export */
                  "Image": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.Image
                  ),
                  /* harmony export */
                  "ImageBasedSlider": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.ImageBasedSlider
                  ),
                  /* harmony export */
                  "ImageScrollBar": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.ImageScrollBar
                  ),
                  /* harmony export */
                  "InputPassword": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.InputPassword
                  ),
                  /* harmony export */
                  "InputText": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.InputText
                  ),
                  /* harmony export */
                  "InputTextArea": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.InputTextArea
                  ),
                  /* harmony export */
                  "KeyPropertySet": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.KeyPropertySet
                  ),
                  /* harmony export */
                  "Line": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.Line
                  ),
                  /* harmony export */
                  "LinearGradient": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.LinearGradient
                  ),
                  /* harmony export */
                  "MathTools": () => (
                    /* reexport safe */
                    _math2D__WEBPACK_IMPORTED_MODULE_3__.MathTools
                  ),
                  /* harmony export */
                  "Matrix2D": () => (
                    /* reexport safe */
                    _math2D__WEBPACK_IMPORTED_MODULE_3__.Matrix2D
                  ),
                  /* harmony export */
                  "Measure": () => (
                    /* reexport safe */
                    _measure__WEBPACK_IMPORTED_MODULE_4__.Measure
                  ),
                  /* harmony export */
                  "MultiLine": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.MultiLine
                  ),
                  /* harmony export */
                  "MultiLinePoint": () => (
                    /* reexport safe */
                    _multiLinePoint__WEBPACK_IMPORTED_MODULE_5__.MultiLinePoint
                  ),
                  /* harmony export */
                  "RadialGradient": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.RadialGradient
                  ),
                  /* harmony export */
                  "RadioButton": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.RadioButton
                  ),
                  /* harmony export */
                  "RadioGroup": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.RadioGroup
                  ),
                  /* harmony export */
                  "Rectangle": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.Rectangle
                  ),
                  /* harmony export */
                  "ScrollBar": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.ScrollBar
                  ),
                  /* harmony export */
                  "ScrollViewer": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.ScrollViewer
                  ),
                  /* harmony export */
                  "SelectionPanel": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.SelectionPanel
                  ),
                  /* harmony export */
                  "SelectorGroup": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.SelectorGroup
                  ),
                  /* harmony export */
                  "Slider": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.Slider
                  ),
                  /* harmony export */
                  "SliderGroup": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.SliderGroup
                  ),
                  /* harmony export */
                  "StackPanel": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.StackPanel
                  ),
                  /* harmony export */
                  "Style": () => (
                    /* reexport safe */
                    _style__WEBPACK_IMPORTED_MODULE_6__.Style
                  ),
                  /* harmony export */
                  "TextBlock": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.TextBlock
                  ),
                  /* harmony export */
                  "TextWrapper": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.TextWrapper
                  ),
                  /* harmony export */
                  "TextWrapping": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.TextWrapping
                  ),
                  /* harmony export */
                  "ToggleButton": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.ToggleButton
                  ),
                  /* harmony export */
                  "ValueAndUnit": () => (
                    /* reexport safe */
                    _valueAndUnit__WEBPACK_IMPORTED_MODULE_7__.ValueAndUnit
                  ),
                  /* harmony export */
                  "Vector2WithInfo": () => (
                    /* reexport safe */
                    _math2D__WEBPACK_IMPORTED_MODULE_3__.Vector2WithInfo
                  ),
                  /* harmony export */
                  "VirtualKeyboard": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.VirtualKeyboard
                  ),
                  /* harmony export */
                  "XmlLoader": () => (
                    /* reexport safe */
                    _xmlLoader__WEBPACK_IMPORTED_MODULE_8__.XmlLoader
                  ),
                  /* harmony export */
                  "name": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.name
                  )
                  /* harmony export */
                });
                var _controls_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! ./controls/index */
                  "../../../lts/gui/dist/2D/controls/index.js"
                );
                var _advancedDynamicTexture__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./advancedDynamicTexture */
                  "../../../lts/gui/dist/2D/advancedDynamicTexture.js"
                );
                var _adtInstrumentation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./adtInstrumentation */
                  "../../../lts/gui/dist/2D/adtInstrumentation.js"
                );
                var _math2D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./math2D */
                  "../../../lts/gui/dist/2D/math2D.js"
                );
                var _measure__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
                  /*! ./measure */
                  "../../../lts/gui/dist/2D/measure.js"
                );
                var _multiLinePoint__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
                  /*! ./multiLinePoint */
                  "../../../lts/gui/dist/2D/multiLinePoint.js"
                );
                var _style__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
                  /*! ./style */
                  "../../../lts/gui/dist/2D/style.js"
                );
                var _valueAndUnit__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
                  /*! ./valueAndUnit */
                  "../../../lts/gui/dist/2D/valueAndUnit.js"
                );
                var _xmlLoader__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__2(
                  /*! ./xmlLoader */
                  "../../../lts/gui/dist/2D/xmlLoader.js"
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/math2D.js": (
              /*!******************************************!*\
                !*** ../../../lts/gui/dist/2D/math2D.js ***!
                \******************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "MathTools": () => (
                    /* binding */
                    MathTools
                  ),
                  /* harmony export */
                  "Matrix2D": () => (
                    /* binding */
                    Matrix2D
                  ),
                  /* harmony export */
                  "Vector2WithInfo": () => (
                    /* binding */
                    Vector2WithInfo
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Maths/math.constants */
                  "core/Misc/perfCounter"
                );
                var core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__);
                var Vector2WithInfo = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Vector2WithInfo2, _super);
                    function Vector2WithInfo2(source, buttonIndex) {
                      if (buttonIndex === void 0) {
                        buttonIndex = 0;
                      }
                      var _this = _super.call(this, source.x, source.y) || this;
                      _this.buttonIndex = buttonIndex;
                      return _this;
                    }
                    return Vector2WithInfo2;
                  }(core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector2)
                );
                var Matrix2D = (
                  /** @class */
                  function() {
                    function Matrix2D2(m00, m01, m10, m11, m20, m21) {
                      this.m = new Float32Array(6);
                      this.fromValues(m00, m01, m10, m11, m20, m21);
                    }
                    Matrix2D2.prototype.fromValues = function(m00, m01, m10, m11, m20, m21) {
                      this.m[0] = m00;
                      this.m[1] = m01;
                      this.m[2] = m10;
                      this.m[3] = m11;
                      this.m[4] = m20;
                      this.m[5] = m21;
                      return this;
                    };
                    Matrix2D2.prototype.determinant = function() {
                      return this.m[0] * this.m[3] - this.m[1] * this.m[2];
                    };
                    Matrix2D2.prototype.invertToRef = function(result) {
                      var l0 = this.m[0];
                      var l1 = this.m[1];
                      var l2 = this.m[2];
                      var l3 = this.m[3];
                      var l4 = this.m[4];
                      var l5 = this.m[5];
                      var det = this.determinant();
                      if (det < core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Epsilon * core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Epsilon) {
                        result.m[0] = 0;
                        result.m[1] = 0;
                        result.m[2] = 0;
                        result.m[3] = 0;
                        result.m[4] = 0;
                        result.m[5] = 0;
                        return this;
                      }
                      var detDiv = 1 / det;
                      var det4 = l2 * l5 - l3 * l4;
                      var det5 = l1 * l4 - l0 * l5;
                      result.m[0] = l3 * detDiv;
                      result.m[1] = -l1 * detDiv;
                      result.m[2] = -l2 * detDiv;
                      result.m[3] = l0 * detDiv;
                      result.m[4] = det4 * detDiv;
                      result.m[5] = det5 * detDiv;
                      return this;
                    };
                    Matrix2D2.prototype.multiplyToRef = function(other, result) {
                      var l0 = this.m[0];
                      var l1 = this.m[1];
                      var l2 = this.m[2];
                      var l3 = this.m[3];
                      var l4 = this.m[4];
                      var l5 = this.m[5];
                      var r0 = other.m[0];
                      var r1 = other.m[1];
                      var r2 = other.m[2];
                      var r3 = other.m[3];
                      var r4 = other.m[4];
                      var r5 = other.m[5];
                      result.m[0] = l0 * r0 + l1 * r2;
                      result.m[1] = l0 * r1 + l1 * r3;
                      result.m[2] = l2 * r0 + l3 * r2;
                      result.m[3] = l2 * r1 + l3 * r3;
                      result.m[4] = l4 * r0 + l5 * r2 + r4;
                      result.m[5] = l4 * r1 + l5 * r3 + r5;
                      return this;
                    };
                    Matrix2D2.prototype.transformCoordinates = function(x, y, result) {
                      result.x = x * this.m[0] + y * this.m[2] + this.m[4];
                      result.y = x * this.m[1] + y * this.m[3] + this.m[5];
                      return this;
                    };
                    Matrix2D2.Identity = function() {
                      return new Matrix2D2(1, 0, 0, 1, 0, 0);
                    };
                    Matrix2D2.IdentityToRef = function(result) {
                      result.m[0] = 1;
                      result.m[1] = 0;
                      result.m[2] = 0;
                      result.m[3] = 1;
                      result.m[4] = 0;
                      result.m[5] = 0;
                    };
                    Matrix2D2.TranslationToRef = function(x, y, result) {
                      result.fromValues(1, 0, 0, 1, x, y);
                    };
                    Matrix2D2.ScalingToRef = function(x, y, result) {
                      result.fromValues(x, 0, 0, y, 0, 0);
                    };
                    Matrix2D2.RotationToRef = function(angle, result) {
                      var s = Math.sin(angle);
                      var c = Math.cos(angle);
                      result.fromValues(c, s, -s, c, 0, 0);
                    };
                    Matrix2D2.ComposeToRef = function(tx, ty, angle, scaleX, scaleY, parentMatrix, result) {
                      Matrix2D2.TranslationToRef(tx, ty, Matrix2D2._TempPreTranslationMatrix);
                      Matrix2D2.ScalingToRef(scaleX, scaleY, Matrix2D2._TempScalingMatrix);
                      Matrix2D2.RotationToRef(angle, Matrix2D2._TempRotationMatrix);
                      Matrix2D2.TranslationToRef(-tx, -ty, Matrix2D2._TempPostTranslationMatrix);
                      Matrix2D2._TempPreTranslationMatrix.multiplyToRef(Matrix2D2._TempScalingMatrix, Matrix2D2._TempCompose0);
                      Matrix2D2._TempCompose0.multiplyToRef(Matrix2D2._TempRotationMatrix, Matrix2D2._TempCompose1);
                      if (parentMatrix) {
                        Matrix2D2._TempCompose1.multiplyToRef(Matrix2D2._TempPostTranslationMatrix, Matrix2D2._TempCompose2);
                        Matrix2D2._TempCompose2.multiplyToRef(parentMatrix, result);
                      } else {
                        Matrix2D2._TempCompose1.multiplyToRef(Matrix2D2._TempPostTranslationMatrix, result);
                      }
                    };
                    Matrix2D2._TempPreTranslationMatrix = Matrix2D2.Identity();
                    Matrix2D2._TempPostTranslationMatrix = Matrix2D2.Identity();
                    Matrix2D2._TempRotationMatrix = Matrix2D2.Identity();
                    Matrix2D2._TempScalingMatrix = Matrix2D2.Identity();
                    Matrix2D2._TempCompose0 = Matrix2D2.Identity();
                    Matrix2D2._TempCompose1 = Matrix2D2.Identity();
                    Matrix2D2._TempCompose2 = Matrix2D2.Identity();
                    return Matrix2D2;
                  }()
                );
                var MathTools = (
                  /** @class */
                  function() {
                    function MathTools2() {
                    }
                    MathTools2.Round = function(value, precision) {
                      if (precision === void 0) {
                        precision = MathTools2.DefaultRoundingPrecision;
                      }
                      return Math.round(value * precision) / precision;
                    };
                    MathTools2.DefaultRoundingPrecision = 100;
                    return MathTools2;
                  }()
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/measure.js": (
              /*!*******************************************!*\
                !*** ../../../lts/gui/dist/2D/measure.js ***!
                \*******************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "Measure": () => (
                    /* binding */
                    Measure
                  )
                  /* harmony export */
                });
                var core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Maths/math.vector */
                  "core/Misc/perfCounter"
                );
                var core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__);
                var tmpRect = [new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0), new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0), new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0), new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0)];
                var tmpRect2 = [new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0), new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0), new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0), new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0)];
                var tmpV1 = new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0);
                var tmpV2 = new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0);
                var Measure = (
                  /** @class */
                  function() {
                    function Measure2(left, top, width, height) {
                      this.left = left;
                      this.top = top;
                      this.width = width;
                      this.height = height;
                    }
                    Measure2.prototype.copyFrom = function(other) {
                      this.left = other.left;
                      this.top = other.top;
                      this.width = other.width;
                      this.height = other.height;
                    };
                    Measure2.prototype.copyFromFloats = function(left, top, width, height) {
                      this.left = left;
                      this.top = top;
                      this.width = width;
                      this.height = height;
                    };
                    Measure2.CombineToRef = function(a, b, result) {
                      var left = Math.min(a.left, b.left);
                      var top = Math.min(a.top, b.top);
                      var right = Math.max(a.left + a.width, b.left + b.width);
                      var bottom = Math.max(a.top + a.height, b.top + b.height);
                      result.left = left;
                      result.top = top;
                      result.width = right - left;
                      result.height = bottom - top;
                    };
                    Measure2.prototype.addAndTransformToRef = function(transform, addX, addY, addWidth, addHeight, result) {
                      var left = this.left + addX;
                      var top = this.top + addY;
                      var width = this.width + addWidth;
                      var height = this.height + addHeight;
                      tmpRect[0].copyFromFloats(left, top);
                      tmpRect[1].copyFromFloats(left + width, top);
                      tmpRect[2].copyFromFloats(left + width, top + height);
                      tmpRect[3].copyFromFloats(left, top + height);
                      tmpV1.copyFromFloats(Number.MAX_VALUE, Number.MAX_VALUE);
                      tmpV2.copyFromFloats(0, 0);
                      for (var i = 0; i < 4; i++) {
                        transform.transformCoordinates(tmpRect[i].x, tmpRect[i].y, tmpRect2[i]);
                        tmpV1.x = Math.floor(Math.min(tmpV1.x, tmpRect2[i].x));
                        tmpV1.y = Math.floor(Math.min(tmpV1.y, tmpRect2[i].y));
                        tmpV2.x = Math.ceil(Math.max(tmpV2.x, tmpRect2[i].x));
                        tmpV2.y = Math.ceil(Math.max(tmpV2.y, tmpRect2[i].y));
                      }
                      result.left = tmpV1.x;
                      result.top = tmpV1.y;
                      result.width = tmpV2.x - tmpV1.x;
                      result.height = tmpV2.y - tmpV1.y;
                    };
                    Measure2.prototype.transformToRef = function(transform, result) {
                      this.addAndTransformToRef(transform, 0, 0, 0, 0, result);
                    };
                    Measure2.prototype.isEqualsTo = function(other) {
                      if (this.left !== other.left) {
                        return false;
                      }
                      if (this.top !== other.top) {
                        return false;
                      }
                      if (this.width !== other.width) {
                        return false;
                      }
                      if (this.height !== other.height) {
                        return false;
                      }
                      return true;
                    };
                    Measure2.Empty = function() {
                      return new Measure2(0, 0, 0, 0);
                    };
                    return Measure2;
                  }()
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/multiLinePoint.js": (
              /*!**************************************************!*\
                !*** ../../../lts/gui/dist/2D/multiLinePoint.js ***!
                \**************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "MultiLinePoint": () => (
                    /* binding */
                    MultiLinePoint
                  )
                  /* harmony export */
                });
                var core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Maths/math.constants */
                  "core/Misc/perfCounter"
                );
                var core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__);
                var _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./valueAndUnit */
                  "../../../lts/gui/dist/2D/valueAndUnit.js"
                );
                var MultiLinePoint = (
                  /** @class */
                  function() {
                    function MultiLinePoint2(multiLine) {
                      this._multiLine = multiLine;
                      this._x = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit(0);
                      this._y = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit(0);
                      this._point = new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 0);
                    }
                    Object.defineProperty(MultiLinePoint2.prototype, "x", {
                      /** Gets or sets x coordinate */
                      get: function() {
                        return this._x.toString(this._multiLine._host);
                      },
                      set: function(value) {
                        if (this._x.toString(this._multiLine._host) === value) {
                          return;
                        }
                        if (this._x.fromString(value)) {
                          this._multiLine._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MultiLinePoint2.prototype, "y", {
                      /** Gets or sets y coordinate */
                      get: function() {
                        return this._y.toString(this._multiLine._host);
                      },
                      set: function(value) {
                        if (this._y.toString(this._multiLine._host) === value) {
                          return;
                        }
                        if (this._y.fromString(value)) {
                          this._multiLine._markAsDirty();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MultiLinePoint2.prototype, "control", {
                      /** Gets or sets the control associated with this point */
                      get: function() {
                        return this._control;
                      },
                      set: function(value) {
                        if (this._control === value) {
                          return;
                        }
                        if (this._control && this._controlObserver) {
                          this._control.onDirtyObservable.remove(this._controlObserver);
                          this._controlObserver = null;
                        }
                        this._control = value;
                        if (this._control) {
                          this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);
                        }
                        this._multiLine._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MultiLinePoint2.prototype, "mesh", {
                      /** Gets or sets the mesh associated with this point */
                      get: function() {
                        return this._mesh;
                      },
                      set: function(value) {
                        if (this._mesh === value) {
                          return;
                        }
                        if (this._mesh && this._meshObserver) {
                          this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);
                        }
                        this._mesh = value;
                        if (this._mesh) {
                          this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);
                        }
                        this._multiLine._markAsDirty();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MultiLinePoint2.prototype.resetLinks = function() {
                      this.control = null;
                      this.mesh = null;
                    };
                    MultiLinePoint2.prototype.translate = function() {
                      this._point = this._translatePoint();
                      return this._point;
                    };
                    MultiLinePoint2.prototype._translatePoint = function() {
                      if (this._mesh != null) {
                        return this._multiLine._host.getProjectedPositionWithZ(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());
                      } else if (this._control != null) {
                        return new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3(this._control.centerX, this._control.centerY, 1 - core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Epsilon);
                      } else {
                        var host = this._multiLine._host;
                        var xValue = this._x.getValueInPixel(host, Number(host._canvas.width));
                        var yValue = this._y.getValueInPixel(host, Number(host._canvas.height));
                        return new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3(xValue, yValue, 1 - core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Epsilon);
                      }
                    };
                    MultiLinePoint2.prototype.dispose = function() {
                      this.resetLinks();
                    };
                    return MultiLinePoint2;
                  }()
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/style.js": (
              /*!*****************************************!*\
                !*** ../../../lts/gui/dist/2D/style.js ***!
                \*****************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "Style": () => (
                    /* binding */
                    Style
                  )
                  /* harmony export */
                });
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Misc/observable */
                  "core/Misc/perfCounter"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__);
                var _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./valueAndUnit */
                  "../../../lts/gui/dist/2D/valueAndUnit.js"
                );
                var Style = (
                  /** @class */
                  function() {
                    function Style2(host) {
                      this._fontFamily = "Arial";
                      this._fontStyle = "";
                      this._fontWeight = "";
                      this._fontSize = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit(18, _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit.UNITMODE_PIXEL, false);
                      this.onChangedObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
                      this._host = host;
                    }
                    Object.defineProperty(Style2.prototype, "fontSize", {
                      /**
                       * Gets or sets the font size
                       */
                      get: function() {
                        return this._fontSize.toString(this._host);
                      },
                      set: function(value) {
                        if (this._fontSize.toString(this._host) === value) {
                          return;
                        }
                        if (this._fontSize.fromString(value)) {
                          this.onChangedObservable.notifyObservers(this);
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Style2.prototype, "fontFamily", {
                      /**
                       * Gets or sets the font family
                       */
                      get: function() {
                        return this._fontFamily;
                      },
                      set: function(value) {
                        if (this._fontFamily === value) {
                          return;
                        }
                        this._fontFamily = value;
                        this.onChangedObservable.notifyObservers(this);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Style2.prototype, "fontStyle", {
                      /**
                       * Gets or sets the font style
                       */
                      get: function() {
                        return this._fontStyle;
                      },
                      set: function(value) {
                        if (this._fontStyle === value) {
                          return;
                        }
                        this._fontStyle = value;
                        this.onChangedObservable.notifyObservers(this);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Style2.prototype, "fontWeight", {
                      /** Gets or sets font weight */
                      get: function() {
                        return this._fontWeight;
                      },
                      set: function(value) {
                        if (this._fontWeight === value) {
                          return;
                        }
                        this._fontWeight = value;
                        this.onChangedObservable.notifyObservers(this);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Style2.prototype.dispose = function() {
                      this.onChangedObservable.clear();
                    };
                    return Style2;
                  }()
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/valueAndUnit.js": (
              /*!************************************************!*\
                !*** ../../../lts/gui/dist/2D/valueAndUnit.js ***!
                \************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "ValueAndUnit": () => (
                    /* binding */
                    ValueAndUnit
                  )
                  /* harmony export */
                });
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Misc/observable */
                  "core/Misc/perfCounter"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__);
                var ValueAndUnit = (
                  /** @class */
                  function() {
                    function ValueAndUnit2(value, unit, negativeValueAllowed) {
                      if (unit === void 0) {
                        unit = ValueAndUnit2.UNITMODE_PIXEL;
                      }
                      if (negativeValueAllowed === void 0) {
                        negativeValueAllowed = true;
                      }
                      this.negativeValueAllowed = negativeValueAllowed;
                      this._value = 1;
                      this._unit = ValueAndUnit2.UNITMODE_PIXEL;
                      this.ignoreAdaptiveScaling = false;
                      this.onChangedObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
                      this._value = value;
                      this._unit = unit;
                      this._originalUnit = unit;
                    }
                    Object.defineProperty(ValueAndUnit2.prototype, "isPercentage", {
                      /** Gets a boolean indicating if the value is a percentage */
                      get: function() {
                        return this._unit === ValueAndUnit2.UNITMODE_PERCENTAGE;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ValueAndUnit2.prototype, "isPixel", {
                      /** Gets a boolean indicating if the value is store as pixel */
                      get: function() {
                        return this._unit === ValueAndUnit2.UNITMODE_PIXEL;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ValueAndUnit2.prototype, "internalValue", {
                      /**
                       * Gets value (without units)
                       * @deprecated use value property instead
                       */
                      get: function() {
                        return this._value;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ValueAndUnit2.prototype, "value", {
                      /** Gets value (without units) */
                      get: function() {
                        return this._value;
                      },
                      /** Sets value (without units) */
                      set: function(value) {
                        if (value !== this._value) {
                          this._value = value;
                          this.onChangedObservable.notifyObservers();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ValueAndUnit2.prototype, "unit", {
                      /** Gets units (without value) */
                      get: function() {
                        return this._unit;
                      },
                      /** Sets units (without value) */
                      set: function(value) {
                        if (value !== this._unit) {
                          this._unit = value;
                          this.onChangedObservable.notifyObservers();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    ValueAndUnit2.prototype.getValueInPixel = function(host, refValue) {
                      if (this.isPixel) {
                        return this.getValue(host);
                      }
                      return this.getValue(host) * refValue;
                    };
                    ValueAndUnit2.prototype.updateInPlace = function(value, unit) {
                      if (unit === void 0) {
                        unit = ValueAndUnit2.UNITMODE_PIXEL;
                      }
                      if (this.value !== value || this.unit !== unit) {
                        this._value = value;
                        this._unit = unit;
                        this.onChangedObservable.notifyObservers();
                      }
                      return this;
                    };
                    ValueAndUnit2.prototype.getValue = function(host) {
                      if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit2.UNITMODE_PERCENTAGE) {
                        var width = 0;
                        var height = 0;
                        if (host.idealWidth) {
                          width = Math.ceil(this._value * host.getSize().width / host.idealWidth);
                        }
                        if (host.idealHeight) {
                          height = Math.ceil(this._value * host.getSize().height / host.idealHeight);
                        }
                        if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {
                          return window.innerWidth < window.innerHeight ? width : height;
                        }
                        if (host.idealWidth) {
                          return width;
                        }
                        if (host.idealHeight) {
                          return height;
                        }
                      }
                      return this._value;
                    };
                    ValueAndUnit2.prototype.toString = function(host, decimals) {
                      switch (this._unit) {
                        case ValueAndUnit2.UNITMODE_PERCENTAGE: {
                          var percentage = this.getValue(host) * 100;
                          return (decimals ? percentage.toFixed(decimals) : percentage) + "%";
                        }
                        case ValueAndUnit2.UNITMODE_PIXEL: {
                          var pixels = this.getValue(host);
                          return (decimals ? pixels.toFixed(decimals) : pixels) + "px";
                        }
                      }
                      return this._unit.toString();
                    };
                    ValueAndUnit2.prototype.fromString = function(source) {
                      var match = ValueAndUnit2._Regex.exec(source.toString());
                      if (!match || match.length === 0) {
                        return false;
                      }
                      var sourceValue = parseFloat(match[1]);
                      var sourceUnit = this._originalUnit;
                      if (!this.negativeValueAllowed) {
                        if (sourceValue < 0) {
                          sourceValue = 0;
                        }
                      }
                      if (match.length === 4) {
                        switch (match[3]) {
                          case "px":
                            sourceUnit = ValueAndUnit2.UNITMODE_PIXEL;
                            break;
                          case "%":
                            sourceUnit = ValueAndUnit2.UNITMODE_PERCENTAGE;
                            sourceValue /= 100;
                            break;
                        }
                      }
                      if (sourceValue === this._value && sourceUnit === this._unit) {
                        return false;
                      }
                      this._value = sourceValue;
                      this._unit = sourceUnit;
                      this.onChangedObservable.notifyObservers();
                      return true;
                    };
                    Object.defineProperty(ValueAndUnit2, "UNITMODE_PERCENTAGE", {
                      /** UNITMODE_PERCENTAGE */
                      get: function() {
                        return ValueAndUnit2._UNITMODE_PERCENTAGE;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(ValueAndUnit2, "UNITMODE_PIXEL", {
                      /** UNITMODE_PIXEL */
                      get: function() {
                        return ValueAndUnit2._UNITMODE_PIXEL;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    ValueAndUnit2._Regex = /(^-?\d*(\.\d+)?)(%|px)?/;
                    ValueAndUnit2._UNITMODE_PERCENTAGE = 0;
                    ValueAndUnit2._UNITMODE_PIXEL = 1;
                    return ValueAndUnit2;
                  }()
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/2D/xmlLoader.js": (
              /*!*********************************************!*\
                !*** ../../../lts/gui/dist/2D/xmlLoader.js ***!
                \*********************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "XmlLoader": () => (
                    /* binding */
                    XmlLoader
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Misc/typeStore */
                  "core/Misc/perfCounter"
                );
                var core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__);
                var XmlLoaderError = "XmlLoader Exception : XML file is malformed or corrupted.";
                var XmlLoader = (
                  /** @class */
                  function() {
                    function XmlLoader2(parentClass) {
                      if (parentClass === void 0) {
                        parentClass = null;
                      }
                      this._nodes = {};
                      this._nodeTypes = {
                        element: 1,
                        attribute: 2,
                        text: 3
                      };
                      this._isLoaded = false;
                      this._objectAttributes = {
                        textHorizontalAlignment: 1,
                        textVerticalAlignment: 2,
                        horizontalAlignment: 3,
                        verticalAlignment: 4,
                        stretch: 5
                      };
                      if (parentClass) {
                        this._parentClass = parentClass;
                      }
                    }
                    XmlLoader2.prototype._getChainElement = function(attributeValue) {
                      var element = window;
                      if (this._parentClass) {
                        element = this._parentClass;
                      }
                      var value = attributeValue;
                      value = value.split(".");
                      for (var i = 0; i < value.length; i++) {
                        element = element[value[i]];
                      }
                      return element;
                    };
                    XmlLoader2.prototype._getClassAttribute = function(attributeName) {
                      var attribute = attributeName.split(".");
                      var className = (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.GetClass)("BABYLON.GUI." + attribute[0]);
                      return className[attribute[1]];
                    };
                    XmlLoader2.prototype._createGuiElement = function(node, parent, linkParent) {
                      if (linkParent === void 0) {
                        linkParent = true;
                      }
                      try {
                        var className = (0, core_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.GetClass)("BABYLON.GUI." + node.nodeName);
                        var guiNode = new className();
                        if (parent && linkParent) {
                          parent.addControl(guiNode);
                        }
                        for (var i = 0; i < node.attributes.length; i++) {
                          if (node.attributes[i].name.toLowerCase().includes("datasource")) {
                            continue;
                          }
                          if (node.attributes[i].name.toLowerCase().includes("observable")) {
                            var element = this._getChainElement(node.attributes[i].value);
                            guiNode[node.attributes[i].name].add(element);
                            continue;
                          } else if (node.attributes[i].name == "linkWithMesh") {
                            if (this._parentClass) {
                              guiNode.linkWithMesh(this._parentClass[node.attributes[i].value]);
                            } else {
                              guiNode.linkWithMesh(window[node.attributes[i].value]);
                            }
                          } else if (node.attributes[i].value.startsWith("{{") && node.attributes[i].value.endsWith("}}")) {
                            var element = this._getChainElement(node.attributes[i].value.substring(2, node.attributes[i].value.length - 2));
                            guiNode[node.attributes[i].name] = element;
                          } else if (!this._objectAttributes[node.attributes[i].name]) {
                            if (node.attributes[i].value == "true" || node.attributes[i].value == "false") {
                              guiNode[node.attributes[i].name] = node.attributes[i].value == "true";
                            } else {
                              guiNode[node.attributes[i].name] = !isNaN(Number(node.attributes[i].value)) ? Number(node.attributes[i].value) : node.attributes[i].value;
                            }
                          } else {
                            guiNode[node.attributes[i].name] = this._getClassAttribute(node.attributes[i].value);
                          }
                        }
                        if (!node.attributes.getNamedItem("id")) {
                          this._nodes[node.nodeName + Object.keys(this._nodes).length + "_gen"] = guiNode;
                          return guiNode;
                        }
                        var id = node.attributes.getNamedItem("id").value;
                        if (id.startsWith("{{") && id.endsWith("}}")) {
                          id = this._getChainElement(id.substring(2, id.length - 2));
                        }
                        if (!this._nodes[id]) {
                          this._nodes[id] = guiNode;
                        } else {
                          throw "XmlLoader Exception : Duplicate ID, every element should have an unique ID attribute";
                        }
                        return guiNode;
                      } catch (exception) {
                        throw "XmlLoader Exception : Error parsing Control " + node.nodeName + "," + exception + ".";
                      }
                    };
                    XmlLoader2.prototype._parseGrid = function(node, guiNode, parent) {
                      var width;
                      var height;
                      var columns;
                      var rows = node.children;
                      var cells;
                      var isPixel = false;
                      var cellNode;
                      var rowNumber = -1;
                      var columnNumber = -1;
                      var totalColumnsNumber = 0;
                      for (var i = 0; i < rows.length; i++) {
                        if (rows[i].nodeType != this._nodeTypes.element) {
                          continue;
                        }
                        if (rows[i].nodeName != "Row") {
                          throw "XmlLoader Exception : Expecting Row node, received " + rows[i].nodeName;
                        }
                        rowNumber += 1;
                        columns = rows[i].children;
                        if (!rows[i].attributes.getNamedItem("height")) {
                          throw "XmlLoader Exception : Height must be defined for grid rows";
                        }
                        height = Number(rows[i].attributes.getNamedItem("height").nodeValue);
                        isPixel = rows[i].attributes.getNamedItem("isPixel") ? JSON.parse(rows[i].attributes.getNamedItem("isPixel").nodeValue) : false;
                        guiNode.addRowDefinition(height, isPixel);
                        for (var j = 0; j < columns.length; j++) {
                          if (columns[j].nodeType != this._nodeTypes.element) {
                            continue;
                          }
                          if (columns[j].nodeName != "Column") {
                            throw "XmlLoader Exception : Expecting Column node, received " + columns[j].nodeName;
                          }
                          columnNumber += 1;
                          if (rowNumber > 0 && columnNumber > totalColumnsNumber) {
                            throw "XmlLoader Exception : In the Grid element, the number of columns is defined in the first row, do not add more columns in the subsequent rows.";
                          }
                          if (rowNumber == 0) {
                            if (!columns[j].attributes.getNamedItem("width")) {
                              throw "XmlLoader Exception : Width must be defined for all the grid columns in the first row";
                            }
                            width = Number(columns[j].attributes.getNamedItem("width").nodeValue);
                            isPixel = columns[j].attributes.getNamedItem("isPixel") ? JSON.parse(columns[j].attributes.getNamedItem("isPixel").nodeValue) : false;
                            guiNode.addColumnDefinition(width, isPixel);
                          }
                          cells = columns[j].children;
                          for (var k = 0; k < cells.length; k++) {
                            if (cells[k].nodeType != this._nodeTypes.element) {
                              continue;
                            }
                            cellNode = this._createGuiElement(cells[k], guiNode, false);
                            guiNode.addControl(cellNode, rowNumber, columnNumber);
                            if (cells[k].firstChild) {
                              this._parseXml(cells[k].firstChild, cellNode);
                            }
                          }
                        }
                        if (rowNumber == 0) {
                          totalColumnsNumber = columnNumber;
                        }
                        columnNumber = -1;
                      }
                      if (node.nextSibling) {
                        this._parseXml(node.nextSibling, parent);
                      }
                    };
                    XmlLoader2.prototype._parseElement = function(node, guiNode, parent) {
                      if (node.firstChild) {
                        this._parseXml(node.firstChild, guiNode);
                      }
                      if (node.nextSibling) {
                        this._parseXml(node.nextSibling, parent);
                      }
                    };
                    XmlLoader2.prototype._prepareSourceElement = function(node, guiNode, variable, source, iterator) {
                      if (this._parentClass) {
                        this._parentClass[variable] = source[iterator];
                      } else {
                        window[variable] = source[iterator];
                      }
                      if (node.firstChild) {
                        this._parseXml(node.firstChild, guiNode, true);
                      }
                    };
                    XmlLoader2.prototype._parseElementsFromSource = function(node, guiNode, parent) {
                      var dataSource = node.attributes.getNamedItem("dataSource").value;
                      if (!dataSource.includes(" in ")) {
                        throw "XmlLoader Exception : Malformed XML, Data Source must include an in";
                      } else {
                        var isArray = true;
                        var splittedSource = dataSource.split(" in ");
                        if (splittedSource.length < 2) {
                          throw "XmlLoader Exception : Malformed XML, Data Source must have an iterator and a source";
                        }
                        var source = splittedSource[1];
                        if (source.startsWith("{") && source.endsWith("}")) {
                          isArray = false;
                        }
                        if (!isArray || source.startsWith("[") && source.endsWith("]")) {
                          source = source.substring(1, source.length - 1);
                        }
                        if (this._parentClass) {
                          source = this._parentClass[source];
                        } else {
                          source = window[source];
                        }
                        if (isArray) {
                          for (var i = 0; i < source.length; i++) {
                            this._prepareSourceElement(node, guiNode, splittedSource[0], source, i);
                          }
                        } else {
                          for (var i in source) {
                            this._prepareSourceElement(node, guiNode, splittedSource[0], source, i);
                          }
                        }
                        if (node.nextSibling) {
                          this._parseXml(node.nextSibling, parent);
                        }
                      }
                    };
                    XmlLoader2.prototype._parseXml = function(node, parent, generated) {
                      if (generated === void 0) {
                        generated = false;
                      }
                      if (node.nodeType != this._nodeTypes.element) {
                        if (node.nextSibling) {
                          this._parseXml(node.nextSibling, parent, generated);
                        }
                        return;
                      }
                      if (generated) {
                        node.setAttribute("id", parent.id + (parent._children.length + 1));
                      }
                      var guiNode = this._createGuiElement(node, parent);
                      if (!this._rootNode) {
                        this._rootNode = guiNode;
                      }
                      if (node.nodeName == "Grid") {
                        this._parseGrid(node, guiNode, parent);
                      } else if (!node.attributes.getNamedItem("dataSource")) {
                        this._parseElement(node, guiNode, parent);
                      } else {
                        this._parseElementsFromSource(node, guiNode, parent);
                      }
                    };
                    XmlLoader2.prototype.isLoaded = function() {
                      return this._isLoaded;
                    };
                    XmlLoader2.prototype.getNodeById = function(id) {
                      return this._nodes[id];
                    };
                    XmlLoader2.prototype.getNodes = function() {
                      return this._nodes;
                    };
                    XmlLoader2.prototype.dispose = function() {
                      if (this._rootNode) {
                        this._rootNode.dispose();
                        this._rootNode = null;
                        this._nodes = {};
                      }
                    };
                    XmlLoader2.prototype.loadLayout = function(xmlFile, rootNode, onSuccess, onError) {
                      var _this = this;
                      if (onSuccess === void 0) {
                        onSuccess = null;
                      }
                      if (onError === void 0) {
                        onError = null;
                      }
                      var xhttp = new XMLHttpRequest();
                      xhttp.onload = function() {
                        if (xhttp.readyState === 4 && xhttp.status === 200) {
                          if (!xhttp.responseXML) {
                            if (onError) {
                              onError(XmlLoaderError);
                              return;
                            } else {
                              throw XmlLoaderError;
                            }
                          }
                          var xmlDoc = xhttp.responseXML.documentElement;
                          _this._parseXml(xmlDoc.firstChild, rootNode);
                          _this._isLoaded = true;
                          if (onSuccess) {
                            onSuccess();
                          }
                        }
                      };
                      xhttp.onerror = function() {
                        if (onError) {
                          onError("an error occurred during loading the layout");
                        }
                      };
                      xhttp.open("GET", xmlFile, true);
                      xhttp.send();
                    };
                    XmlLoader2.prototype.loadLayoutAsync = function(xmlFile, rootNode) {
                      return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {
                        var _this = this;
                        return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {
                          return [2, new Promise(function(resolve, reject) {
                            _this.loadLayout(xmlFile, rootNode, resolve, reject);
                          })];
                        });
                      });
                    };
                    return XmlLoader2;
                  }()
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/behaviors/defaultBehavior.js": (
              /*!*************************************************************!*\
                !*** ../../../lts/gui/dist/3D/behaviors/defaultBehavior.js ***!
                \*************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "DefaultBehavior": () => (
                    /* binding */
                    DefaultBehavior
                  )
                  /* harmony export */
                });
                var core_Behaviors_Meshes_followBehavior__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Behaviors/Meshes/surfaceMagnetismBehavior */
                  "core/Misc/perfCounter"
                );
                var core_Behaviors_Meshes_followBehavior__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Behaviors_Meshes_followBehavior__WEBPACK_IMPORTED_MODULE_0__);
                var DefaultBehavior = (
                  /** @class */
                  function() {
                    function DefaultBehavior2() {
                      this.followBehaviorEnabled = false;
                      this.sixDofDragBehaviorEnabled = true;
                      this.surfaceMagnetismBehaviorEnabled = true;
                      this._followBehavior = new core_Behaviors_Meshes_followBehavior__WEBPACK_IMPORTED_MODULE_0__.FollowBehavior();
                      this._sixDofDragBehavior = new core_Behaviors_Meshes_followBehavior__WEBPACK_IMPORTED_MODULE_0__.SixDofDragBehavior();
                      this._surfaceMagnetismBehavior = new core_Behaviors_Meshes_followBehavior__WEBPACK_IMPORTED_MODULE_0__.SurfaceMagnetismBehavior();
                    }
                    Object.defineProperty(DefaultBehavior2.prototype, "name", {
                      /**
                       *  The name of the behavior
                       */
                      get: function() {
                        return "Default";
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(DefaultBehavior2.prototype, "followBehavior", {
                      /**
                       *  The follow behavior
                       */
                      get: function() {
                        return this._followBehavior;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(DefaultBehavior2.prototype, "sixDofDragBehavior", {
                      /**
                       *  The six DoF drag behavior
                       */
                      get: function() {
                        return this._sixDofDragBehavior;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(DefaultBehavior2.prototype, "surfaceMagnetismBehavior", {
                      /**
                       * The surface magnetism behavior
                       */
                      get: function() {
                        return this._surfaceMagnetismBehavior;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    DefaultBehavior2.prototype.init = function() {
                    };
                    DefaultBehavior2.prototype.attach = function(ownerMesh, draggablesMeshes, sceneUnderstandingMeshes) {
                      this._scene = ownerMesh.getScene();
                      this.attachedNode = ownerMesh;
                      this._addObservables();
                      this._followBehavior.attach(ownerMesh);
                      this._sixDofDragBehavior.attach(ownerMesh);
                      this._sixDofDragBehavior.draggableMeshes = draggablesMeshes || null;
                      this._sixDofDragBehavior.faceCameraOnDragStart = true;
                      this._surfaceMagnetismBehavior.attach(ownerMesh, this._scene);
                      if (sceneUnderstandingMeshes) {
                        this._surfaceMagnetismBehavior.meshes = sceneUnderstandingMeshes;
                      }
                      this._surfaceMagnetismBehavior.enabled = false;
                    };
                    DefaultBehavior2.prototype.detach = function() {
                      this.attachedNode = null;
                      this._removeObservables();
                      this._followBehavior.detach();
                      this._sixDofDragBehavior.detach();
                      this._surfaceMagnetismBehavior.detach();
                    };
                    DefaultBehavior2.prototype._addObservables = function() {
                      var _this = this;
                      this._onBeforeRenderObserver = this._scene.onBeforeRenderObservable.add(function() {
                        _this._followBehavior._enabled = !_this._sixDofDragBehavior.isMoving && _this.followBehaviorEnabled;
                      });
                      this._onDragObserver = this._sixDofDragBehavior.onDragObservable.add(function(event) {
                        _this._sixDofDragBehavior.disableMovement = _this._surfaceMagnetismBehavior.findAndUpdateTarget(event.pickInfo);
                      });
                    };
                    DefaultBehavior2.prototype._removeObservables = function() {
                      this._scene.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);
                      this._sixDofDragBehavior.onDragObservable.remove(this._onDragObserver);
                    };
                    return DefaultBehavior2;
                  }()
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/controls/MRTK3/touchHolographicButton.js": (
              /*!*************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/controls/MRTK3/touchHolographicButton.js ***!
                \*************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "TouchHolographicButton": () => (
                    /* binding */
                    TouchHolographicButton
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var _2D_advancedDynamicTexture__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ../../../2D/advancedDynamicTexture */
                  "../../../lts/gui/dist/2D/advancedDynamicTexture.js"
                );
                var core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! core/Maths/math.vector */
                  "core/Misc/perfCounter"
                );
                var core_Animations_animation__WEBPACK_IMPORTED_MODULE_2___default = __webpack_require__2.n(core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__);
                var _2D_controls_control__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ../../../2D/controls/control */
                  "../../../lts/gui/dist/2D/controls/control.js"
                );
                var _2D_controls_grid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
                  /*! ../../../2D/controls/grid */
                  "../../../lts/gui/dist/2D/controls/grid.js"
                );
                var _2D_controls_image__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
                  /*! ../../../2D/controls/image */
                  "../../../lts/gui/dist/2D/controls/image.js"
                );
                var _materials_mrdl_mrdlBackglowMaterial__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
                  /*! ../../materials/mrdl/mrdlBackglowMaterial */
                  "../../../lts/gui/dist/3D/materials/mrdl/mrdlBackglowMaterial.js"
                );
                var _materials_mrdl_mrdlBackplateMaterial__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
                  /*! ../../materials/mrdl/mrdlBackplateMaterial */
                  "../../../lts/gui/dist/3D/materials/mrdl/mrdlBackplateMaterial.js"
                );
                var _materials_mrdl_mrdlFrontplateMaterial__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__2(
                  /*! ../../materials/mrdl/mrdlFrontplateMaterial */
                  "../../../lts/gui/dist/3D/materials/mrdl/mrdlFrontplateMaterial.js"
                );
                var _materials_mrdl_mrdlInnerquadMaterial__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__2(
                  /*! ../../materials/mrdl/mrdlInnerquadMaterial */
                  "../../../lts/gui/dist/3D/materials/mrdl/mrdlInnerquadMaterial.js"
                );
                var _2D_controls_rectangle__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__2(
                  /*! ../../../2D/controls/rectangle */
                  "../../../lts/gui/dist/2D/controls/rectangle.js"
                );
                var _2D_controls_stackPanel__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__2(
                  /*! ../../../2D/controls/stackPanel */
                  "../../../lts/gui/dist/2D/controls/stackPanel.js"
                );
                var _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__2(
                  /*! ../../../2D/controls/textBlock */
                  "../../../lts/gui/dist/2D/controls/textBlock.js"
                );
                var _touchButton3D__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__2(
                  /*! ../touchButton3D */
                  "../../../lts/gui/dist/3D/controls/touchButton3D.js"
                );
                var TouchHolographicButton = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(TouchHolographicButton2, _super);
                    function TouchHolographicButton2(name, shareMaterials) {
                      if (shareMaterials === void 0) {
                        shareMaterials = true;
                      }
                      var _this = _super.call(this, name) || this;
                      _this.width = 1;
                      _this.height = 1;
                      _this.radius = 0.14;
                      _this.textSizeInPixels = 18;
                      _this.imageSizeInPixels = 40;
                      _this.plateMaterialColor = new core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.Color3(0.4, 0.4, 0.4);
                      _this.frontPlateDepth = 0.2;
                      _this.backPlateDepth = 0.04;
                      _this.backGlowOffset = 0.1;
                      _this.flatPlaneDepth = 1e-3;
                      _this.innerQuadRadius = _this.radius - 0.04;
                      _this.innerQuadColor = new core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.Color4(0, 0, 0, 0);
                      _this.innerQuadToggledColor = new core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.Color4(0.5197843, 0.6485234, 0.9607843, 0.6);
                      _this.innerQuadHoverColor = new core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.Color4(1, 1, 1, 0.05);
                      _this.innerQuadToggledHoverColor = new core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.Color4(0.5197843, 0.6485234, 0.9607843, 1);
                      _this._isBackplateVisible = true;
                      _this._shareMaterials = true;
                      _this._shareMaterials = shareMaterials;
                      _this.pointerEnterAnimation = function() {
                        if (_this._frontPlate && _this._textPlate && !_this.isToggleButton) {
                          _this._performEnterExitAnimation(1);
                        }
                        if (_this.isToggleButton && _this._innerQuadMaterial) {
                          if (_this.isToggled) {
                            _this._innerQuadMaterial.color = _this.innerQuadToggledHoverColor;
                          } else {
                            _this._innerQuadMaterial.color = _this.innerQuadHoverColor;
                          }
                        }
                      };
                      _this.pointerOutAnimation = function() {
                        if (_this._frontPlate && _this._textPlate && !_this.isToggleButton) {
                          _this._performEnterExitAnimation(-0.8);
                        }
                        if (_this.isToggleButton && _this._innerQuadMaterial) {
                          _this._onToggle(_this.isToggled);
                        }
                      };
                      _this.pointerDownAnimation = function() {
                      };
                      _this.pointerUpAnimation = function() {
                      };
                      _this._pointerClickObserver = _this.onPointerClickObservable.add(function() {
                        if (_this._frontPlate && _this._backGlow && !_this.isActiveNearInteraction) {
                          _this._performClickAnimation();
                        }
                        if (_this.isToggleButton && _this._innerQuadMaterial) {
                          _this._onToggle(_this.isToggled);
                        }
                      });
                      _this._pointerEnterObserver = _this.onPointerEnterObservable.add(function() {
                        _this.pointerEnterAnimation();
                      });
                      _this._pointerOutObserver = _this.onPointerOutObservable.add(function() {
                        _this.pointerOutAnimation();
                      });
                      _this._toggleObserver = _this.onToggleObservable.add(function(isToggled) {
                        if (isToggled) {
                          _this._innerQuadMaterial.color = _this.innerQuadToggledColor;
                        } else {
                          _this._innerQuadMaterial.color = _this.innerQuadColor;
                        }
                      });
                      return _this;
                    }
                    TouchHolographicButton2.prototype._disposeTooltip = function() {
                      this._tooltipFade = null;
                      if (this._tooltipTextBlock) {
                        this._tooltipTextBlock.dispose();
                      }
                      if (this._tooltipTexture) {
                        this._tooltipTexture.dispose();
                      }
                      if (this._tooltipMesh) {
                        this._tooltipMesh.dispose();
                      }
                      this.onPointerEnterObservable.remove(this._tooltipHoverObserver);
                      this.onPointerOutObservable.remove(this._tooltipOutObserver);
                    };
                    Object.defineProperty(TouchHolographicButton2.prototype, "renderingGroupId", {
                      get: function() {
                        return this._backPlate.renderingGroupId;
                      },
                      /**
                       * Rendering ground id of all the mesh in the button
                       */
                      set: function(id) {
                        this._backPlate.renderingGroupId = id;
                        this._textPlate.renderingGroupId = id;
                        this._frontPlate.renderingGroupId = id;
                        this._backGlow.renderingGroupId = id;
                        this._innerQuad.renderingGroupId = id;
                        if (this._tooltipMesh) {
                          this._tooltipMesh.renderingGroupId = id;
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TouchHolographicButton2.prototype, "mesh", {
                      /**
                       * Gets the mesh used to render this control
                       */
                      get: function() {
                        return this._backPlate;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TouchHolographicButton2.prototype, "tooltipText", {
                      get: function() {
                        var _a;
                        return ((_a = this._tooltipTextBlock) === null || _a === void 0 ? void 0 : _a.text) || null;
                      },
                      /**
                       * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)
                       * Set this property after adding the button to the GUI3DManager
                       */
                      set: function(text) {
                        var _this = this;
                        if (!text) {
                          this._disposeTooltip();
                          return;
                        }
                        if (!this._tooltipFade) {
                          var rightHandedScene = this._backPlate._scene.useRightHandedSystem;
                          this._tooltipMesh = (0, core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.CreatePlane)("", { size: 1 }, this._backPlate._scene);
                          this._tooltipMesh.position = core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.Vector3.Down().scale(0.7).add(core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.Vector3.Forward(rightHandedScene).scale(-0.15));
                          this._tooltipMesh.isPickable = false;
                          this._tooltipMesh.parent = this._frontPlateCollisionMesh;
                          this._tooltipTexture = _2D_advancedDynamicTexture__WEBPACK_IMPORTED_MODULE_1__.AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);
                          var tooltipBackground = new _2D_controls_rectangle__WEBPACK_IMPORTED_MODULE_10__.Rectangle();
                          tooltipBackground.height = 0.25;
                          tooltipBackground.width = 0.8;
                          tooltipBackground.cornerRadius = 25;
                          tooltipBackground.color = "#ffffff";
                          tooltipBackground.thickness = 20;
                          tooltipBackground.background = "#060668";
                          this._tooltipTexture.addControl(tooltipBackground);
                          this._tooltipTextBlock = new _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_12__.TextBlock();
                          this._tooltipTextBlock.color = "white";
                          this._tooltipTextBlock.fontSize = 100;
                          this._tooltipTexture.addControl(this._tooltipTextBlock);
                          this._tooltipFade = new core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.FadeInOutBehavior();
                          this._tooltipFade.delay = 500;
                          this._tooltipMesh.addBehavior(this._tooltipFade);
                          this._tooltipHoverObserver = this.onPointerEnterObservable.add(function() {
                            if (_this._tooltipFade) {
                              _this._tooltipFade.fadeIn(true);
                            }
                          });
                          this._tooltipOutObserver = this.onPointerOutObservable.add(function() {
                            if (_this._tooltipFade) {
                              _this._tooltipFade.fadeIn(false);
                            }
                          });
                        }
                        if (this._tooltipTextBlock) {
                          this._tooltipTextBlock.text = text;
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TouchHolographicButton2.prototype, "text", {
                      /**
                       * Gets or sets text for the button
                       */
                      get: function() {
                        return this._text;
                      },
                      set: function(value) {
                        if (this._text === value) {
                          return;
                        }
                        this._text = value;
                        this._rebuildContent();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TouchHolographicButton2.prototype, "subtext", {
                      /**
                       * Gets or sets subtext for a button with larger width
                       */
                      get: function() {
                        return this._subtext;
                      },
                      set: function(value) {
                        if (this._subtext === value) {
                          return;
                        }
                        this._subtext = value;
                        this._rebuildContent();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TouchHolographicButton2.prototype, "imageUrl", {
                      /**
                       * Gets or sets the image url for the button
                       */
                      get: function() {
                        return this._imageUrl;
                      },
                      set: function(value) {
                        if (this._imageUrl === value) {
                          return;
                        }
                        this._imageUrl = value;
                        this._rebuildContent();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TouchHolographicButton2.prototype, "backMaterial", {
                      /**
                       * Gets the back material used by this button
                       */
                      get: function() {
                        return this._backMaterial;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TouchHolographicButton2.prototype, "frontMaterial", {
                      /**
                       * Gets the front material used by this button
                       */
                      get: function() {
                        return this._frontMaterial;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TouchHolographicButton2.prototype, "backGlowMaterial", {
                      /**
                       * Gets the back glow material used by this button
                       */
                      get: function() {
                        return this._backGlowMaterial;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TouchHolographicButton2.prototype, "innerQuadMaterial", {
                      /**
                       * Gets the inner quad material used by this button
                       */
                      get: function() {
                        return this._innerQuadMaterial;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TouchHolographicButton2.prototype, "plateMaterial", {
                      /**
                       * Gets the plate material used by this button
                       */
                      get: function() {
                        return this._plateMaterial;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TouchHolographicButton2.prototype, "shareMaterials", {
                      /**
                       * Gets a boolean indicating if this button shares its material with other V3 Buttons
                       */
                      get: function() {
                        return this._shareMaterials;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TouchHolographicButton2.prototype, "isBackplateVisible", {
                      /**
                       * Sets whether the backplate is visible or hidden. Hiding the backplate is not recommended without some sort of replacement
                       */
                      set: function(isVisible) {
                        if (this.mesh && this._backMaterial) {
                          if (isVisible && !this._isBackplateVisible) {
                            this._backPlate.visibility = 1;
                          } else if (!isVisible && this._isBackplateVisible) {
                            this._backPlate.visibility = 0;
                          }
                        }
                        this._isBackplateVisible = isVisible;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    TouchHolographicButton2.prototype._getTypeName = function() {
                      return "TouchHolographicButton";
                    };
                    TouchHolographicButton2.prototype._rebuildContent = function() {
                      var content;
                      if (this._getAspectRatio() <= 1) {
                        content = this._alignContentVertically();
                      } else {
                        content = this._alignContentHorizontally();
                      }
                      this.content = content;
                    };
                    TouchHolographicButton2.prototype._getAspectRatio = function() {
                      return this.width / this.height;
                    };
                    TouchHolographicButton2.prototype._alignContentVertically = function() {
                      var panel = new _2D_controls_stackPanel__WEBPACK_IMPORTED_MODULE_11__.StackPanel();
                      panel.isVertical = true;
                      if (core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.DomManagement.IsDocumentAvailable() && !!document.createElement) {
                        if (this._imageUrl) {
                          var image = new _2D_controls_image__WEBPACK_IMPORTED_MODULE_5__.Image();
                          image.source = this._imageUrl;
                          image.heightInPixels = 180;
                          image.widthInPixels = 100;
                          image.paddingTopInPixels = 40;
                          image.paddingBottomInPixels = 40;
                          panel.addControl(image);
                        }
                      }
                      if (this._text) {
                        var text = new _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_12__.TextBlock();
                        text.text = this._text;
                        text.color = "white";
                        text.heightInPixels = 30;
                        text.fontSize = 24;
                        panel.addControl(text);
                      }
                      return panel;
                    };
                    TouchHolographicButton2.prototype._alignContentHorizontally = function() {
                      var totalPanelWidthInPixels = 240;
                      var padding = 15;
                      var contentContainer = new _2D_controls_rectangle__WEBPACK_IMPORTED_MODULE_10__.Rectangle();
                      contentContainer.widthInPixels = totalPanelWidthInPixels;
                      contentContainer.heightInPixels = totalPanelWidthInPixels;
                      contentContainer.color = "transparent";
                      contentContainer.setPaddingInPixels(padding, padding, padding, padding);
                      totalPanelWidthInPixels -= padding * 2;
                      var panel = new _2D_controls_stackPanel__WEBPACK_IMPORTED_MODULE_11__.StackPanel();
                      panel.isVertical = false;
                      panel.scaleY = this._getAspectRatio();
                      if (core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.DomManagement.IsDocumentAvailable() && !!document.createElement) {
                        if (this._imageUrl) {
                          var imageContainer = new _2D_controls_rectangle__WEBPACK_IMPORTED_MODULE_10__.Rectangle("".concat(this.name, "_image"));
                          imageContainer.widthInPixels = this.imageSizeInPixels;
                          imageContainer.heightInPixels = this.imageSizeInPixels;
                          imageContainer.color = "transparent";
                          totalPanelWidthInPixels -= this.imageSizeInPixels;
                          var image = new _2D_controls_image__WEBPACK_IMPORTED_MODULE_5__.Image();
                          image.source = this._imageUrl;
                          imageContainer.addControl(image);
                          panel.addControl(imageContainer);
                        }
                      }
                      if (this._text) {
                        var text = new _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_12__.TextBlock("".concat(this.name, "_text"));
                        text.text = this._text;
                        text.color = "white";
                        text.fontSize = this.textSizeInPixels;
                        text.widthInPixels = totalPanelWidthInPixels;
                        if (this._imageUrl) {
                          text.textHorizontalAlignment = _2D_controls_control__WEBPACK_IMPORTED_MODULE_3__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                          text.paddingLeftInPixels = padding;
                        }
                        if (this._subtext) {
                          var textContainer = new _2D_controls_grid__WEBPACK_IMPORTED_MODULE_4__.Grid();
                          textContainer.addColumnDefinition(1);
                          textContainer.addRowDefinition(0.5);
                          textContainer.addRowDefinition(0.5);
                          textContainer.widthInPixels = totalPanelWidthInPixels;
                          textContainer.heightInPixels = 45;
                          var subtext = new _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_12__.TextBlock("".concat(this.name, "_subtext"));
                          subtext.text = this._subtext;
                          subtext.color = "#EEEEEEAB";
                          subtext.fontSize = this.textSizeInPixels * 0.75;
                          subtext.fontWeight = "600";
                          if (this._imageUrl) {
                            subtext.textHorizontalAlignment = _2D_controls_control__WEBPACK_IMPORTED_MODULE_3__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                            subtext.paddingLeftInPixels = padding;
                          }
                          textContainer.addControl(text, 0);
                          textContainer.addControl(subtext, 1);
                          panel.addControl(textContainer);
                        } else {
                          panel.addControl(text);
                        }
                      }
                      contentContainer.addControl(panel);
                      return contentContainer;
                    };
                    TouchHolographicButton2.prototype._createNode = function(scene) {
                      var _a;
                      this.name = (_a = this.name) !== null && _a !== void 0 ? _a : "TouchHolographicButton";
                      var backPlateMesh = this._createBackPlate(scene);
                      var collisionMesh = this._createFrontPlate(scene);
                      var innerQuadMesh = this._createInnerQuad(scene);
                      var backGlowMesh = this._createBackGlow(scene);
                      this._frontPlateCollisionMesh = collisionMesh;
                      this._textPlate = _super.prototype._createNode.call(this, scene);
                      this._textPlate.name = "".concat(this.name, "_textPlate");
                      this._textPlate.isPickable = false;
                      this._textPlate.scaling.x = this.width;
                      this._textPlate.parent = collisionMesh;
                      this._backPlate = backPlateMesh;
                      this._backPlate.position = core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.Vector3.Forward(scene.useRightHandedSystem).scale(this.backPlateDepth / 2);
                      this._backPlate.isPickable = false;
                      this._backPlate.addChild(collisionMesh);
                      this._backPlate.addChild(innerQuadMesh);
                      if (backGlowMesh) {
                        this._backPlate.addChild(backGlowMesh);
                      }
                      var tn = new core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.TransformNode("".concat(this.name, "_root"), scene);
                      this._backPlate.setParent(tn);
                      this.collisionMesh = collisionMesh;
                      this.collidableFrontDirection = this._backPlate.forward.negate();
                      return tn;
                    };
                    TouchHolographicButton2.prototype._createBackPlate = function(scene) {
                      var _this = this;
                      var backPlateMesh = (0, core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.CreateBox)("".concat(this.name, "_backPlate"), {}, scene);
                      backPlateMesh.isPickable = false;
                      backPlateMesh.visibility = 0;
                      backPlateMesh.scaling.z = 0.2;
                      core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.SceneLoader.ImportMeshAsync(void 0, TouchHolographicButton2.MRTK_ASSET_BASE_URL, TouchHolographicButton2.BACKPLATE_MODEL_FILENAME, scene).then(function(result) {
                        var backPlateModel = result.meshes[1];
                        backPlateModel.visibility = 0;
                        if (_this._isBackplateVisible) {
                          backPlateModel.visibility = 1;
                          backPlateModel.name = "".concat(_this.name, "_backPlate");
                          backPlateModel.isPickable = false;
                          backPlateModel.scaling.x = _this.width;
                          backPlateModel.scaling.y = _this.height;
                          backPlateModel.parent = backPlateMesh;
                        }
                        if (_this._backMaterial) {
                          backPlateModel.material = _this._backMaterial;
                        }
                        _this._backPlate = backPlateModel;
                      });
                      return backPlateMesh;
                    };
                    TouchHolographicButton2.prototype._createFrontPlate = function(scene) {
                      var _this = this;
                      var collisionMesh = (0, core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.CreateBox)("".concat(this.name, "_frontPlate"), {
                        width: this.width,
                        height: this.height,
                        depth: this.frontPlateDepth
                      }, scene);
                      collisionMesh.isPickable = true;
                      collisionMesh.isNearPickable = true;
                      collisionMesh.visibility = 0;
                      collisionMesh.position = core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.Vector3.Forward(scene.useRightHandedSystem).scale((this.backPlateDepth - this.frontPlateDepth) / 2);
                      core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.SceneLoader.ImportMeshAsync(void 0, TouchHolographicButton2.MRTK_ASSET_BASE_URL, TouchHolographicButton2.FRONTPLATE_MODEL_FILENAME, scene).then(function(result) {
                        var collisionPlate = (0, core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.CreateBox)("".concat(_this.name, "_collisionPlate"), {
                          width: _this.width,
                          height: _this.height
                        }, scene);
                        collisionPlate.isPickable = false;
                        collisionPlate.scaling.z = _this.frontPlateDepth;
                        collisionPlate.visibility = 0;
                        collisionPlate.parent = collisionMesh;
                        _this._collisionPlate = collisionPlate;
                        var frontPlateModel = result.meshes[1];
                        frontPlateModel.name = "".concat(_this.name, "_frontPlate");
                        frontPlateModel.isPickable = false;
                        frontPlateModel.scaling.x = _this.width - _this.backGlowOffset;
                        frontPlateModel.scaling.y = _this.height - _this.backGlowOffset;
                        frontPlateModel.position = core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.Vector3.Forward(scene.useRightHandedSystem).scale(-0.5);
                        frontPlateModel.parent = collisionPlate;
                        if (_this.isToggleButton) {
                          frontPlateModel.visibility = 0;
                        }
                        if (_this._frontMaterial) {
                          frontPlateModel.material = _this._frontMaterial;
                        }
                        _this._textPlate.scaling.x = 1;
                        _this._textPlate.parent = frontPlateModel;
                        _this._frontPlate = frontPlateModel;
                      });
                      return collisionMesh;
                    };
                    TouchHolographicButton2.prototype._createInnerQuad = function(scene) {
                      var _this = this;
                      var innerQuadMesh = (0, core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.CreateBox)("".concat(this.name, "_innerQuad"), {}, scene);
                      innerQuadMesh.isPickable = false;
                      innerQuadMesh.visibility = 0;
                      innerQuadMesh.scaling.z = this.flatPlaneDepth;
                      innerQuadMesh.position.z += this.backPlateDepth / 2 - this.flatPlaneDepth;
                      core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.SceneLoader.ImportMeshAsync(void 0, TouchHolographicButton2.MRTK_ASSET_BASE_URL, TouchHolographicButton2.INNERQUAD_MODEL_FILENAME, scene).then(function(result) {
                        var innerQuadModel = result.meshes[1];
                        innerQuadModel.name = "".concat(_this.name, "_innerQuad");
                        innerQuadModel.isPickable = false;
                        innerQuadModel.scaling.x = _this.width - _this.backGlowOffset;
                        innerQuadModel.scaling.y = _this.height - _this.backGlowOffset;
                        innerQuadModel.parent = innerQuadMesh;
                        if (_this._innerQuadMaterial) {
                          innerQuadModel.material = _this._innerQuadMaterial;
                        }
                        _this._innerQuad = innerQuadModel;
                      });
                      return innerQuadMesh;
                    };
                    TouchHolographicButton2.prototype._createBackGlow = function(scene) {
                      var _this = this;
                      if (this.isToggleButton) {
                        return;
                      }
                      var backGlowMesh = (0, core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.CreateBox)("".concat(this.name, "_backGlow"), {}, scene);
                      backGlowMesh.isPickable = false;
                      backGlowMesh.visibility = 0;
                      backGlowMesh.scaling.z = this.flatPlaneDepth;
                      backGlowMesh.position.z += this.backPlateDepth / 2 - this.flatPlaneDepth * 2;
                      core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.SceneLoader.ImportMeshAsync(void 0, TouchHolographicButton2.MRTK_ASSET_BASE_URL, TouchHolographicButton2.BACKGLOW_MODEL_FILENAME, scene).then(function(result) {
                        var backGlowModel = result.meshes[1];
                        backGlowModel.name = "".concat(_this.name, "_backGlow");
                        backGlowModel.isPickable = false;
                        backGlowModel.scaling.x = _this.width - _this.backGlowOffset;
                        backGlowModel.scaling.y = _this.height - _this.backGlowOffset;
                        backGlowModel.parent = backGlowMesh;
                        if (_this._backGlowMaterial) {
                          backGlowModel.material = _this._backGlowMaterial;
                        }
                        _this._backGlow = backGlowModel;
                      });
                      return backGlowMesh;
                    };
                    TouchHolographicButton2.prototype._applyFacade = function(facadeTexture) {
                      this._plateMaterial.emissiveTexture = facadeTexture;
                      this._plateMaterial.opacityTexture = facadeTexture;
                      this._plateMaterial.diffuseColor = this.plateMaterialColor;
                    };
                    TouchHolographicButton2.prototype._performClickAnimation = function() {
                      var frameRate = 60;
                      var animationGroup = new core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.AnimationGroup("Click Animation Group");
                      var animations = [
                        {
                          name: "backGlowMotion",
                          mesh: this._backGlow,
                          property: "material.motion",
                          keys: [
                            {
                              frame: 0,
                              values: [0, 0, 0]
                            },
                            {
                              frame: 20,
                              values: [1, 0.0144, 0.0144]
                            },
                            {
                              frame: 40,
                              values: [0.0027713229489760476, 0, 0]
                            },
                            {
                              frame: 45,
                              values: [0.0027713229489760476]
                            }
                          ]
                        },
                        {
                          name: "_collisionPlateZSlide",
                          mesh: this._collisionPlate,
                          property: "position.z",
                          keys: [
                            {
                              frame: 0,
                              values: [0, 0, 0]
                            },
                            {
                              frame: 20,
                              values: [core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.Vector3.Forward(this._collisionPlate._scene.useRightHandedSystem).scale(this.frontPlateDepth / 2).z, 0, 0]
                            },
                            {
                              frame: 40,
                              values: [0, 0.005403332496794331]
                            },
                            {
                              frame: 45,
                              values: [0]
                            }
                          ]
                        },
                        {
                          name: "_collisionPlateZScale",
                          mesh: this._collisionPlate,
                          property: "scaling.z",
                          keys: [
                            {
                              frame: 0,
                              values: [this.frontPlateDepth, 0, 0]
                            },
                            {
                              frame: 20,
                              values: [this.backPlateDepth, 0, 0]
                            },
                            {
                              frame: 40,
                              values: [this.frontPlateDepth, 54e-4]
                            },
                            {
                              frame: 45,
                              values: [this.frontPlateDepth]
                            }
                          ]
                        }
                      ];
                      for (var _i = 0, animations_1 = animations; _i < animations_1.length; _i++) {
                        var animation = animations_1[_i];
                        var anim = new core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.Animation(animation.name, animation.property, frameRate, core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.Animation.ANIMATIONTYPE_FLOAT, core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.Animation.ANIMATIONLOOPMODE_CYCLE);
                        var animkeyFrames = [];
                        for (var _a = 0, _b = animation.keys; _a < _b.length; _a++) {
                          var key = _b[_a];
                          animkeyFrames.push({
                            frame: key.frame,
                            value: key.values[0],
                            inTangent: key.values[1],
                            outTangent: key.values[2],
                            interpolation: key.values[3]
                          });
                        }
                        anim.setKeys(animkeyFrames);
                        if (!animation.mesh) {
                          continue;
                        }
                        animationGroup.addTargetedAnimation(anim, animation.mesh);
                      }
                      animationGroup.normalize(0, 45);
                      animationGroup.speedRatio = 1;
                      animationGroup.play();
                    };
                    TouchHolographicButton2.prototype._performEnterExitAnimation = function(speedRatio) {
                      var frameRate = 60;
                      var animationGroup = new core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.AnimationGroup("Enter Exit Animation Group");
                      var animations = [
                        {
                          name: "frontPlateFadeOut",
                          mesh: this._frontPlate,
                          property: "material.fadeOut",
                          keys: [
                            {
                              frame: 0,
                              values: [0, 0, 0.025045314830017686, 0]
                            },
                            {
                              frame: 40,
                              values: [1.00205599570012, 0.025045314830017686, 0, 0]
                            }
                          ]
                        },
                        {
                          name: "textPlateZSlide",
                          mesh: this._textPlate,
                          property: "position.z",
                          keys: [
                            {
                              frame: 0,
                              values: [0, 0, 0]
                            },
                            {
                              frame: 40,
                              values: [core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-0.15).z, 0, 0]
                            }
                          ]
                        }
                      ];
                      for (var _i = 0, animations_2 = animations; _i < animations_2.length; _i++) {
                        var animation = animations_2[_i];
                        var anim = new core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.Animation(animation.name, animation.property, frameRate, core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.Animation.ANIMATIONTYPE_FLOAT, core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.Animation.ANIMATIONLOOPMODE_CYCLE);
                        var animkeyFrames = [];
                        for (var _a = 0, _b = animation.keys; _a < _b.length; _a++) {
                          var key = _b[_a];
                          animkeyFrames.push({
                            frame: key.frame,
                            value: key.values[0],
                            inTangent: key.values[1],
                            outTangent: key.values[2],
                            interpolation: key.values[3]
                          });
                        }
                        anim.setKeys(animkeyFrames);
                        if (!animation.mesh) {
                          continue;
                        }
                        animationGroup.addTargetedAnimation(anim, animation.mesh);
                      }
                      animationGroup.normalize(0, 45);
                      animationGroup.speedRatio = speedRatio;
                      animationGroup.play();
                    };
                    TouchHolographicButton2.prototype._createBackMaterial = function(mesh) {
                      var _a;
                      this._backMaterial = (_a = this._backMaterial) !== null && _a !== void 0 ? _a : new _materials_mrdl_mrdlBackplateMaterial__WEBPACK_IMPORTED_MODULE_7__.MRDLBackplateMaterial(this.name + "backPlateMaterial", mesh.getScene());
                      this._backMaterial.absoluteSizes = true;
                      this._backMaterial.radius = this.radius;
                      this._backMaterial.lineWidth = 0.02;
                    };
                    TouchHolographicButton2.prototype._createFrontMaterial = function(mesh) {
                      var _a;
                      this._frontMaterial = (_a = this._frontMaterial) !== null && _a !== void 0 ? _a : new _materials_mrdl_mrdlFrontplateMaterial__WEBPACK_IMPORTED_MODULE_8__.MRDLFrontplateMaterial(this.name + "Front Material", mesh.getScene());
                      this.frontMaterial.radius = this.innerQuadRadius;
                      this.frontMaterial.fadeOut = 0;
                    };
                    TouchHolographicButton2.prototype._createBackGlowMaterial = function(mesh) {
                      var _a;
                      var glowRadius = this.radius + 0.04;
                      this._backGlowMaterial = (_a = this._backGlowMaterial) !== null && _a !== void 0 ? _a : new _materials_mrdl_mrdlBackglowMaterial__WEBPACK_IMPORTED_MODULE_6__.MRDLBackglowMaterial(this.name + "Back Glow Material", mesh.getScene());
                      this._backGlowMaterial.bevelRadius = glowRadius;
                      this._backGlowMaterial.lineWidth = glowRadius;
                      this._backGlowMaterial.motion = 0;
                    };
                    TouchHolographicButton2.prototype._createInnerQuadMaterial = function(mesh) {
                      var _a;
                      this._innerQuadMaterial = (_a = this._innerQuadMaterial) !== null && _a !== void 0 ? _a : new _materials_mrdl_mrdlInnerquadMaterial__WEBPACK_IMPORTED_MODULE_9__.MRDLInnerquadMaterial("inner_quad", mesh.getScene());
                      this._innerQuadMaterial.radius = this.innerQuadRadius;
                      if (this.isToggleButton) {
                        this._innerQuadMaterial.color = this.innerQuadColor;
                      }
                    };
                    TouchHolographicButton2.prototype._createPlateMaterial = function(mesh) {
                      var _a;
                      this._plateMaterial = (_a = this._plateMaterial) !== null && _a !== void 0 ? _a : new core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.StandardMaterial(this.name + "Plate Material", mesh.getScene());
                      this._plateMaterial.specularColor = core_Animations_animation__WEBPACK_IMPORTED_MODULE_2__.Color3.Black();
                    };
                    TouchHolographicButton2.prototype._onToggle = function(newState) {
                      _super.prototype._onToggle.call(this, newState);
                    };
                    TouchHolographicButton2.prototype._affectMaterial = function(mesh) {
                      if (this._shareMaterials) {
                        if (!this._host._touchSharedMaterials["mrdlBackplateMaterial"]) {
                          this._createBackMaterial(mesh);
                          this._host._touchSharedMaterials["mrdlBackplateMaterial"] = this._backMaterial;
                        } else {
                          this._backMaterial = this._host._touchSharedMaterials["mrdlBackplateMaterial"];
                        }
                        if (!this._host._touchSharedMaterials["mrdlFrontplateMaterial"]) {
                          this._createFrontMaterial(mesh);
                          this._host._touchSharedMaterials["mrdlFrontplateMaterial"] = this._frontMaterial;
                        } else {
                          this._frontMaterial = this._host._touchSharedMaterials["mrdlFrontplateMaterial"];
                        }
                        if (!this._host._touchSharedMaterials["mrdlBackglowMaterial"]) {
                          this._createBackGlowMaterial(mesh);
                          this._host._touchSharedMaterials["mrdlBackglowMaterial"] = this._backGlowMaterial;
                        } else {
                          this._backGlowMaterial = this._host._touchSharedMaterials["mrdlBackglowMaterial"];
                        }
                        if (!this._host._touchSharedMaterials["mrdlInnerQuadMaterial"]) {
                          this._createInnerQuadMaterial(mesh);
                          this._host._touchSharedMaterials["mrdlInnerQuadMaterial"] = this._innerQuadMaterial;
                        } else {
                          this._innerQuadMaterial = this._host._touchSharedMaterials["mrdlInnerQuadMaterial"];
                        }
                      } else {
                        this._createBackMaterial(mesh);
                        this._createFrontMaterial(mesh);
                        this._createBackGlowMaterial(mesh);
                        this._createInnerQuadMaterial(mesh);
                      }
                      this._createPlateMaterial(mesh);
                      this._backPlate.material = this._backMaterial;
                      this._textPlate.material = this._plateMaterial;
                      if (!this._isBackplateVisible) {
                        this._backPlate.visibility = 0;
                      }
                      if (this._frontPlate) {
                        this._frontPlate.material = this._frontMaterial;
                      }
                      if (this._backGlow) {
                        this._backGlow.material = this._backGlowMaterial;
                      }
                      if (this._innerQuad) {
                        this._innerQuad.material = this._innerQuadMaterial;
                      }
                      this._rebuildContent();
                    };
                    TouchHolographicButton2.prototype.dispose = function() {
                      _super.prototype.dispose.call(this);
                      this._disposeTooltip();
                      this.onPointerClickObservable.remove(this._pointerClickObserver);
                      this.onPointerEnterObservable.remove(this._pointerEnterObserver);
                      this.onPointerOutObservable.remove(this._pointerOutObserver);
                      this.onToggleObservable.remove(this._toggleObserver);
                      if (!this.shareMaterials) {
                        this._backMaterial.dispose();
                        this._frontMaterial.dispose();
                        this._plateMaterial.dispose();
                        this._backGlowMaterial.dispose();
                        this._innerQuadMaterial.dispose();
                        if (this._pickedPointObserver) {
                          this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);
                          this._pickedPointObserver = null;
                        }
                      }
                    };
                    TouchHolographicButton2.MRTK_ASSET_BASE_URL = "https://assets.babylonjs.com/meshes/MRTK/";
                    TouchHolographicButton2.FRONTPLATE_MODEL_FILENAME = "mrtk-fluent-frontplate.glb";
                    TouchHolographicButton2.BACKPLATE_MODEL_FILENAME = "mrtk-fluent-backplate.glb";
                    TouchHolographicButton2.BACKGLOW_MODEL_FILENAME = "mrtk-fluent-button.glb";
                    TouchHolographicButton2.INNERQUAD_MODEL_FILENAME = "SlateProximity.glb";
                    return TouchHolographicButton2;
                  }(_touchButton3D__WEBPACK_IMPORTED_MODULE_13__.TouchButton3D)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/controls/abstractButton3D.js": (
              /*!*************************************************************!*\
                !*** ../../../lts/gui/dist/3D/controls/abstractButton3D.js ***!
                \*************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "AbstractButton3D": () => (
                    /* binding */
                    AbstractButton3D
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Meshes_transformNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Meshes/transformNode */
                  "core/Misc/perfCounter"
                );
                var core_Meshes_transformNode__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Meshes_transformNode__WEBPACK_IMPORTED_MODULE_1__);
                var _contentDisplay3D__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./contentDisplay3D */
                  "../../../lts/gui/dist/3D/controls/contentDisplay3D.js"
                );
                var AbstractButton3D = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(AbstractButton3D2, _super);
                    function AbstractButton3D2(name) {
                      return _super.call(this, name) || this;
                    }
                    AbstractButton3D2.prototype._getTypeName = function() {
                      return "AbstractButton3D";
                    };
                    AbstractButton3D2.prototype._createNode = function(scene) {
                      return new core_Meshes_transformNode__WEBPACK_IMPORTED_MODULE_1__.TransformNode("button" + this.name, scene);
                    };
                    return AbstractButton3D2;
                  }(_contentDisplay3D__WEBPACK_IMPORTED_MODULE_2__.ContentDisplay3D)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/controls/button3D.js": (
              /*!*****************************************************!*\
                !*** ../../../lts/gui/dist/3D/controls/button3D.js ***!
                \*****************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "Button3D": () => (
                    /* binding */
                    Button3D
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Maths/math.color */
                  "core/Misc/perfCounter"
                );
                var core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__);
                var _abstractButton3D__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./abstractButton3D */
                  "../../../lts/gui/dist/3D/controls/abstractButton3D.js"
                );
                var Button3D = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Button3D2, _super);
                    function Button3D2(name, options) {
                      var _this = _super.call(this, name) || this;
                      _this._options = (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({ width: 1, height: 1, depth: 0.08 }, options);
                      _this.pointerEnterAnimation = function() {
                        if (!_this.mesh) {
                          return;
                        }
                        _this._currentMaterial.emissiveColor = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Color3.Red();
                      };
                      _this.pointerOutAnimation = function() {
                        _this._currentMaterial.emissiveColor = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Color3.Black();
                      };
                      _this.pointerDownAnimation = function() {
                        if (!_this.mesh) {
                          return;
                        }
                        _this.mesh.scaling.scaleInPlace(0.95);
                      };
                      _this.pointerUpAnimation = function() {
                        if (!_this.mesh) {
                          return;
                        }
                        _this.mesh.scaling.scaleInPlace(1 / 0.95);
                      };
                      return _this;
                    }
                    Button3D2.prototype._applyFacade = function(facadeTexture) {
                      this._currentMaterial.emissiveTexture = facadeTexture;
                    };
                    Button3D2.prototype._getTypeName = function() {
                      return "Button3D";
                    };
                    Button3D2.prototype._createNode = function(scene) {
                      var faceUV = new Array(6);
                      for (var i = 0; i < 6; i++) {
                        faceUV[i] = new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector4(0, 0, 0, 0);
                      }
                      if (scene.useRightHandedSystem) {
                        faceUV[0].copyFromFloats(1, 0, 0, 1);
                      } else {
                        faceUV[1].copyFromFloats(0, 0, 1, 1);
                      }
                      var mesh = (0, core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.CreateBox)(this.name + "_rootMesh", {
                        width: this._options.width,
                        height: this._options.height,
                        depth: this._options.depth,
                        faceUV,
                        wrap: true
                      }, scene);
                      this._contentScaleRatioY = this._contentScaleRatio * this._options.width / this._options.height;
                      this._setFacadeTextureScaling();
                      return mesh;
                    };
                    Button3D2.prototype._affectMaterial = function(mesh) {
                      var material = new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.StandardMaterial(this.name + "Material", mesh.getScene());
                      material.specularColor = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Color3.Black();
                      mesh.material = material;
                      this._currentMaterial = material;
                      this._resetContent();
                    };
                    Button3D2.prototype.dispose = function() {
                      _super.prototype.dispose.call(this);
                      this._disposeFacadeTexture();
                      if (this._currentMaterial) {
                        this._currentMaterial.dispose();
                      }
                    };
                    return Button3D2;
                  }(_abstractButton3D__WEBPACK_IMPORTED_MODULE_2__.AbstractButton3D)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/controls/container3D.js": (
              /*!********************************************************!*\
                !*** ../../../lts/gui/dist/3D/controls/container3D.js ***!
                \********************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "Container3D": () => (
                    /* binding */
                    Container3D
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Meshes_transformNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Meshes/transformNode */
                  "core/Misc/perfCounter"
                );
                var core_Meshes_transformNode__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Meshes_transformNode__WEBPACK_IMPORTED_MODULE_1__);
                var _control3D__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./control3D */
                  "../../../lts/gui/dist/3D/controls/control3D.js"
                );
                var Container3D = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Container3D2, _super);
                    function Container3D2(name) {
                      var _this = _super.call(this, name) || this;
                      _this._blockLayout = false;
                      _this._children = new Array();
                      return _this;
                    }
                    Object.defineProperty(Container3D2.prototype, "children", {
                      /**
                       * Gets the list of child controls
                       */
                      get: function() {
                        return this._children;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Container3D2.prototype, "blockLayout", {
                      /**
                       * Gets or sets a boolean indicating if the layout must be blocked (default is false).
                       * This is helpful to optimize layout operation when adding multiple children in a row
                       */
                      get: function() {
                        return this._blockLayout;
                      },
                      set: function(value) {
                        if (this._blockLayout === value) {
                          return;
                        }
                        this._blockLayout = value;
                        if (!this._blockLayout) {
                          this._arrangeChildren();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Container3D2.prototype.updateLayout = function() {
                      this._arrangeChildren();
                      return this;
                    };
                    Container3D2.prototype.containsControl = function(control) {
                      return this._children.indexOf(control) !== -1;
                    };
                    Container3D2.prototype.addControl = function(control) {
                      var index = this._children.indexOf(control);
                      if (index !== -1) {
                        return this;
                      }
                      control.parent = this;
                      control._host = this._host;
                      this._children.push(control);
                      if (this._host.utilityLayer) {
                        control._prepareNode(this._host.utilityLayer.utilityLayerScene);
                        if (control.node) {
                          control.node.parent = this.node;
                        }
                        if (!this.blockLayout) {
                          this._arrangeChildren();
                        }
                      }
                      return this;
                    };
                    Container3D2.prototype._arrangeChildren = function() {
                    };
                    Container3D2.prototype._createNode = function(scene) {
                      return new core_Meshes_transformNode__WEBPACK_IMPORTED_MODULE_1__.TransformNode("ContainerNode", scene);
                    };
                    Container3D2.prototype.removeControl = function(control) {
                      var index = this._children.indexOf(control);
                      if (index !== -1) {
                        this._children.splice(index, 1);
                        control.parent = null;
                        control._disposeNode();
                      }
                      return this;
                    };
                    Container3D2.prototype._getTypeName = function() {
                      return "Container3D";
                    };
                    Container3D2.prototype.dispose = function() {
                      for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
                        var control = _a[_i];
                        control.dispose();
                      }
                      this._children.length = 0;
                      _super.prototype.dispose.call(this);
                    };
                    Container3D2.UNSET_ORIENTATION = 0;
                    Container3D2.FACEORIGIN_ORIENTATION = 1;
                    Container3D2.FACEORIGINREVERSED_ORIENTATION = 2;
                    Container3D2.FACEFORWARD_ORIENTATION = 3;
                    Container3D2.FACEFORWARDREVERSED_ORIENTATION = 4;
                    return Container3D2;
                  }(_control3D__WEBPACK_IMPORTED_MODULE_2__.Control3D)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/controls/contentDisplay3D.js": (
              /*!*************************************************************!*\
                !*** ../../../lts/gui/dist/3D/controls/contentDisplay3D.js ***!
                \*************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "ContentDisplay3D": () => (
                    /* binding */
                    ContentDisplay3D
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var _2D_advancedDynamicTexture__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ../../2D/advancedDynamicTexture */
                  "../../../lts/gui/dist/2D/advancedDynamicTexture.js"
                );
                var _control3D__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./control3D */
                  "../../../lts/gui/dist/3D/controls/control3D.js"
                );
                var core_Materials_Textures_texture__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! core/Materials/Textures/texture */
                  "core/Misc/perfCounter"
                );
                var core_Materials_Textures_texture__WEBPACK_IMPORTED_MODULE_3___default = __webpack_require__2.n(core_Materials_Textures_texture__WEBPACK_IMPORTED_MODULE_3__);
                var ContentDisplay3D = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ContentDisplay3D2, _super);
                    function ContentDisplay3D2() {
                      var _this = _super !== null && _super.apply(this, arguments) || this;
                      _this._contentResolution = 512;
                      _this._contentScaleRatio = 2;
                      return _this;
                    }
                    Object.defineProperty(ContentDisplay3D2.prototype, "content", {
                      /**
                       * Gets or sets the GUI 2D content used to display the button's facade
                       */
                      get: function() {
                        return this._content;
                      },
                      set: function(value) {
                        this._content = value;
                        if (!value || !this._host || !this._host.utilityLayer) {
                          return;
                        }
                        if (!this._facadeTexture) {
                          this._facadeTexture = new _2D_advancedDynamicTexture__WEBPACK_IMPORTED_MODULE_1__.AdvancedDynamicTexture("Facade", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, core_Materials_Textures_texture__WEBPACK_IMPORTED_MODULE_3__.Texture.TRILINEAR_SAMPLINGMODE);
                          this._setFacadeTextureScaling();
                          this._facadeTexture.premulAlpha = true;
                        } else {
                          this._facadeTexture.rootContainer.clearControls();
                        }
                        this._facadeTexture.addControl(value);
                        this._applyFacade(this._facadeTexture);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    ContentDisplay3D2.prototype._setFacadeTextureScaling = function() {
                      var _a;
                      if (this._facadeTexture) {
                        this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;
                        this._facadeTexture.rootContainer.scaleY = (_a = this._contentScaleRatioY) !== null && _a !== void 0 ? _a : this._contentScaleRatio;
                      }
                    };
                    Object.defineProperty(ContentDisplay3D2.prototype, "contentResolution", {
                      /**
                       * Gets or sets the texture resolution used to render content (512 by default)
                       */
                      get: function() {
                        return this._contentResolution;
                      },
                      set: function(value) {
                        if (this._contentResolution === value) {
                          return;
                        }
                        this._contentResolution = value;
                        this._resetContent();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    ContentDisplay3D2.prototype._disposeFacadeTexture = function() {
                      if (this._facadeTexture) {
                        this._facadeTexture.dispose();
                        this._facadeTexture = null;
                      }
                    };
                    ContentDisplay3D2.prototype._resetContent = function() {
                      this._disposeFacadeTexture();
                      this.content = this._content;
                    };
                    ContentDisplay3D2.prototype._applyFacade = function(facadeTexture) {
                    };
                    return ContentDisplay3D2;
                  }(_control3D__WEBPACK_IMPORTED_MODULE_2__.Control3D)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/controls/control3D.js": (
              /*!******************************************************!*\
                !*** ../../../lts/gui/dist/3D/controls/control3D.js ***!
                \******************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "Control3D": () => (
                    /* binding */
                    Control3D
                  )
                  /* harmony export */
                });
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Meshes/abstractMesh */
                  "core/Misc/perfCounter"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__);
                var _vector3WithInfo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ../vector3WithInfo */
                  "../../../lts/gui/dist/3D/vector3WithInfo.js"
                );
                var Control3D = (
                  /** @class */
                  function() {
                    function Control3D2(name) {
                      this.name = name;
                      this._downCount = 0;
                      this._enterCount = -1;
                      this._downPointerIds = {};
                      this._isVisible = true;
                      this._isScaledByManager = false;
                      this.onPointerMoveObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
                      this.onPointerOutObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
                      this.onPointerDownObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
                      this.onPointerUpObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
                      this.onPointerClickObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
                      this.onPointerEnterObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
                      this._behaviors = new Array();
                    }
                    Object.defineProperty(Control3D2.prototype, "position", {
                      /** Gets or sets the control position in world space */
                      get: function() {
                        if (!this._node) {
                          return core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector3.Zero();
                        }
                        return this._node.position;
                      },
                      set: function(value) {
                        if (!this._node) {
                          return;
                        }
                        this._node.position = value;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control3D2.prototype, "scaling", {
                      /** Gets or sets the control scaling in world space */
                      get: function() {
                        if (!this._node) {
                          return new core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector3(1, 1, 1);
                        }
                        return this._node.scaling;
                      },
                      set: function(value) {
                        if (!this._node) {
                          return;
                        }
                        this._isScaledByManager = false;
                        this._node.scaling = value;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control3D2.prototype, "behaviors", {
                      /**
                       * Gets the list of attached behaviors
                       * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors
                       */
                      get: function() {
                        return this._behaviors;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Control3D2.prototype.addBehavior = function(behavior) {
                      var _this = this;
                      var index = this._behaviors.indexOf(behavior);
                      if (index !== -1) {
                        return this;
                      }
                      behavior.init();
                      var scene = this._host.scene;
                      if (scene.isLoading) {
                        scene.onDataLoadedObservable.addOnce(function() {
                          behavior.attach(_this);
                        });
                      } else {
                        behavior.attach(this);
                      }
                      this._behaviors.push(behavior);
                      return this;
                    };
                    Control3D2.prototype.removeBehavior = function(behavior) {
                      var index = this._behaviors.indexOf(behavior);
                      if (index === -1) {
                        return this;
                      }
                      this._behaviors[index].detach();
                      this._behaviors.splice(index, 1);
                      return this;
                    };
                    Control3D2.prototype.getBehaviorByName = function(name) {
                      for (var _i = 0, _a = this._behaviors; _i < _a.length; _i++) {
                        var behavior = _a[_i];
                        if (behavior.name === name) {
                          return behavior;
                        }
                      }
                      return null;
                    };
                    Object.defineProperty(Control3D2.prototype, "isVisible", {
                      /** Gets or sets a boolean indicating if the control is visible */
                      get: function() {
                        return this._isVisible;
                      },
                      set: function(value) {
                        if (this._isVisible === value) {
                          return;
                        }
                        this._isVisible = value;
                        var mesh = this.mesh;
                        if (mesh) {
                          mesh.setEnabled(value);
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control3D2.prototype, "typeName", {
                      /**
                       * Gets a string representing the class name
                       */
                      get: function() {
                        return this._getTypeName();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Control3D2.prototype.getClassName = function() {
                      return this._getTypeName();
                    };
                    Control3D2.prototype._getTypeName = function() {
                      return "Control3D";
                    };
                    Object.defineProperty(Control3D2.prototype, "node", {
                      /**
                       * Gets the transform node used by this control
                       */
                      get: function() {
                        return this._node;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Control3D2.prototype, "mesh", {
                      /**
                       * Gets the mesh used to render this control
                       */
                      get: function() {
                        if (this._node instanceof core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.AbstractMesh) {
                          return this._node;
                        }
                        return null;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Control3D2.prototype.linkToTransformNode = function(node) {
                      if (this._node) {
                        this._node.parent = node;
                      }
                      return this;
                    };
                    Control3D2.prototype._prepareNode = function(scene) {
                      if (!this._node) {
                        this._node = this._createNode(scene);
                        if (!this.node) {
                          return;
                        }
                        this._injectGUI3DReservedDataStore(this.node).control = this;
                        var mesh = this.mesh;
                        if (mesh) {
                          mesh.isPickable = true;
                          this._affectMaterial(mesh);
                        }
                      }
                    };
                    Control3D2.prototype._injectGUI3DReservedDataStore = function(node) {
                      var _a, _b;
                      node.reservedDataStore = (_a = node.reservedDataStore) !== null && _a !== void 0 ? _a : {};
                      node.reservedDataStore.GUI3D = (_b = node.reservedDataStore.GUI3D) !== null && _b !== void 0 ? _b : {};
                      return node.reservedDataStore.GUI3D;
                    };
                    Control3D2.prototype._createNode = function(scene) {
                      return null;
                    };
                    Control3D2.prototype._affectMaterial = function(mesh) {
                      mesh.material = null;
                    };
                    Control3D2.prototype._isTouchButton3D = function(control) {
                      return control._generatePointerEventType !== void 0;
                    };
                    Control3D2.prototype._onPointerMove = function(target, coordinates) {
                      this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);
                    };
                    Control3D2.prototype._onPointerEnter = function(target) {
                      if (this._enterCount === -1) {
                        this._enterCount = 0;
                      }
                      this._enterCount++;
                      if (this._enterCount > 1) {
                        return false;
                      }
                      this.onPointerEnterObservable.notifyObservers(this, -1, target, this);
                      if (this.pointerEnterAnimation) {
                        this.pointerEnterAnimation();
                      }
                      return true;
                    };
                    Control3D2.prototype._onPointerOut = function(target) {
                      this._enterCount--;
                      if (this._enterCount > 0) {
                        return;
                      }
                      this._enterCount = 0;
                      this.onPointerOutObservable.notifyObservers(this, -1, target, this);
                      if (this.pointerOutAnimation) {
                        this.pointerOutAnimation();
                      }
                    };
                    Control3D2.prototype._onPointerDown = function(target, coordinates, pointerId, buttonIndex) {
                      this._downCount++;
                      this._downPointerIds[pointerId] = this._downPointerIds[pointerId] + 1 || 1;
                      if (this._downCount !== 1) {
                        return false;
                      }
                      this.onPointerDownObservable.notifyObservers(new _vector3WithInfo__WEBPACK_IMPORTED_MODULE_1__.Vector3WithInfo(coordinates, buttonIndex), -1, target, this);
                      if (this.pointerDownAnimation) {
                        this.pointerDownAnimation();
                      }
                      return true;
                    };
                    Control3D2.prototype._onPointerUp = function(target, coordinates, pointerId, buttonIndex, notifyClick) {
                      this._downCount--;
                      this._downPointerIds[pointerId]--;
                      if (this._downPointerIds[pointerId] <= 0) {
                        delete this._downPointerIds[pointerId];
                      }
                      if (this._downCount < 0) {
                        this._downCount = 0;
                        return;
                      }
                      if (this._downCount == 0) {
                        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {
                          this.onPointerClickObservable.notifyObservers(new _vector3WithInfo__WEBPACK_IMPORTED_MODULE_1__.Vector3WithInfo(coordinates, buttonIndex), -1, target, this);
                        }
                        this.onPointerUpObservable.notifyObservers(new _vector3WithInfo__WEBPACK_IMPORTED_MODULE_1__.Vector3WithInfo(coordinates, buttonIndex), -1, target, this);
                        if (this.pointerUpAnimation) {
                          this.pointerUpAnimation();
                        }
                      }
                    };
                    Control3D2.prototype.forcePointerUp = function(pointerId) {
                      if (pointerId === void 0) {
                        pointerId = null;
                      }
                      if (pointerId !== null) {
                        this._onPointerUp(this, core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector3.Zero(), pointerId, 0, true);
                      } else {
                        for (var key in this._downPointerIds) {
                          this._onPointerUp(this, core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector3.Zero(), +key, 0, true);
                        }
                        if (this._downCount > 0) {
                          this._downCount = 1;
                          this._onPointerUp(this, core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector3.Zero(), 0, 0, true);
                        }
                      }
                    };
                    Control3D2.prototype._processObservables = function(type, pickedPoint, originMeshPosition, pointerId, buttonIndex) {
                      if (this._isTouchButton3D(this) && originMeshPosition) {
                        type = this._generatePointerEventType(type, originMeshPosition, this._downCount);
                      }
                      if (type === core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERMOVE) {
                        this._onPointerMove(this, pickedPoint);
                        var previousControlOver = this._host._lastControlOver[pointerId];
                        if (previousControlOver && previousControlOver !== this) {
                          previousControlOver._onPointerOut(this);
                        }
                        if (previousControlOver !== this) {
                          this._onPointerEnter(this);
                        }
                        this._host._lastControlOver[pointerId] = this;
                        return true;
                      }
                      if (type === core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERDOWN) {
                        this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);
                        this._host._lastControlDown[pointerId] = this;
                        this._host._lastPickedControl = this;
                        return true;
                      }
                      if (type === core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERUP || type === core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERDOUBLETAP) {
                        if (this._host._lastControlDown[pointerId]) {
                          this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);
                        }
                        delete this._host._lastControlDown[pointerId];
                        return true;
                      }
                      return false;
                    };
                    Control3D2.prototype._disposeNode = function() {
                      if (this._node) {
                        this._node.dispose();
                        this._node = null;
                      }
                    };
                    Control3D2.prototype.dispose = function() {
                      this.onPointerDownObservable.clear();
                      this.onPointerEnterObservable.clear();
                      this.onPointerMoveObservable.clear();
                      this.onPointerOutObservable.clear();
                      this.onPointerUpObservable.clear();
                      this.onPointerClickObservable.clear();
                      this._disposeNode();
                      for (var _i = 0, _a = this._behaviors; _i < _a.length; _i++) {
                        var behavior = _a[_i];
                        behavior.detach();
                      }
                    };
                    return Control3D2;
                  }()
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/controls/cylinderPanel.js": (
              /*!**********************************************************!*\
                !*** ../../../lts/gui/dist/3D/controls/cylinderPanel.js ***!
                \**********************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "CylinderPanel": () => (
                    /* binding */
                    CylinderPanel
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Maths/math.axis */
                  "core/Misc/perfCounter"
                );
                var core_Misc_tools__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__);
                var _volumeBasedPanel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./volumeBasedPanel */
                  "../../../lts/gui/dist/3D/controls/volumeBasedPanel.js"
                );
                var _container3D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./container3D */
                  "../../../lts/gui/dist/3D/controls/container3D.js"
                );
                var CylinderPanel = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(CylinderPanel2, _super);
                    function CylinderPanel2() {
                      var _this = _super !== null && _super.apply(this, arguments) || this;
                      _this._radius = 5;
                      return _this;
                    }
                    Object.defineProperty(CylinderPanel2.prototype, "radius", {
                      /**
                       * Gets or sets the radius of the cylinder where to project controls (5 by default)
                       */
                      get: function() {
                        return this._radius;
                      },
                      set: function(value) {
                        var _this = this;
                        if (this._radius === value) {
                          return;
                        }
                        this._radius = value;
                        core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Tools.SetImmediate(function() {
                          _this._arrangeChildren();
                        });
                      },
                      enumerable: false,
                      configurable: true
                    });
                    CylinderPanel2.prototype._mapGridNode = function(control, nodePosition) {
                      var mesh = control.mesh;
                      if (!mesh) {
                        return;
                      }
                      var newPos = this._cylindricalMapping(nodePosition);
                      control.position = newPos;
                      switch (this.orientation) {
                        case _container3D__WEBPACK_IMPORTED_MODULE_3__.Container3D.FACEORIGIN_ORIENTATION:
                          mesh.lookAt(new core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));
                          break;
                        case _container3D__WEBPACK_IMPORTED_MODULE_3__.Container3D.FACEORIGINREVERSED_ORIENTATION:
                          mesh.lookAt(new core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Vector3(-newPos.x, newPos.y, -newPos.z));
                          break;
                        case _container3D__WEBPACK_IMPORTED_MODULE_3__.Container3D.FACEFORWARD_ORIENTATION:
                          break;
                        case _container3D__WEBPACK_IMPORTED_MODULE_3__.Container3D.FACEFORWARDREVERSED_ORIENTATION:
                          mesh.rotate(core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Axis.Y, Math.PI, core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Space.LOCAL);
                          break;
                      }
                    };
                    CylinderPanel2.prototype._cylindricalMapping = function(source) {
                      var newPos = new core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, source.y, this._radius);
                      var yAngle = source.x / this._radius;
                      core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Matrix[0]);
                      return core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Vector3.TransformNormal(newPos, core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Matrix[0]);
                    };
                    return CylinderPanel2;
                  }(_volumeBasedPanel__WEBPACK_IMPORTED_MODULE_2__.VolumeBasedPanel)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/controls/handMenu.js": (
              /*!*****************************************************!*\
                !*** ../../../lts/gui/dist/3D/controls/handMenu.js ***!
                \*****************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "HandMenu": () => (
                    /* binding */
                    HandMenu
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var _touchHolographicMenu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./touchHolographicMenu */
                  "../../../lts/gui/dist/3D/controls/touchHolographicMenu.js"
                );
                var core_Behaviors_Meshes_handConstraintBehavior__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! core/Behaviors/Meshes/handConstraintBehavior */
                  "core/Misc/perfCounter"
                );
                var core_Behaviors_Meshes_handConstraintBehavior__WEBPACK_IMPORTED_MODULE_2___default = __webpack_require__2.n(core_Behaviors_Meshes_handConstraintBehavior__WEBPACK_IMPORTED_MODULE_2__);
                var HandMenu = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(HandMenu2, _super);
                    function HandMenu2(xr, name) {
                      var _this = _super.call(this, name) || this;
                      _this._handConstraintBehavior = new core_Behaviors_Meshes_handConstraintBehavior__WEBPACK_IMPORTED_MODULE_2__.HandConstraintBehavior();
                      _this._handConstraintBehavior.linkToXRExperience(xr);
                      _this.backPlateMargin = 0.15;
                      _this.rows = 3;
                      return _this;
                    }
                    Object.defineProperty(HandMenu2.prototype, "handConstraintBehavior", {
                      /**
                       * The hand constraint behavior setting the transformation of this node
                       */
                      get: function() {
                        return this._handConstraintBehavior;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    HandMenu2.prototype._createNode = function(scene) {
                      var node = _super.prototype._createNode.call(this, scene);
                      this._handConstraintBehavior.attach(node);
                      return node;
                    };
                    HandMenu2.prototype.dispose = function() {
                      _super.prototype.dispose.call(this);
                      this._handConstraintBehavior.detach();
                    };
                    return HandMenu2;
                  }(_touchHolographicMenu__WEBPACK_IMPORTED_MODULE_1__.TouchHolographicMenu)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/controls/holographicBackplate.js": (
              /*!*****************************************************************!*\
                !*** ../../../lts/gui/dist/3D/controls/holographicBackplate.js ***!
                \*****************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "HolographicBackplate": () => (
                    /* binding */
                    HolographicBackplate
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Loading/sceneLoader */
                  "core/Misc/perfCounter"
                );
                var core_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_1__);
                var _materials_fluentBackplate_fluentBackplateMaterial__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ../materials/fluentBackplate/fluentBackplateMaterial */
                  "../../../lts/gui/dist/3D/materials/fluentBackplate/fluentBackplateMaterial.js"
                );
                var _control3D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./control3D */
                  "../../../lts/gui/dist/3D/controls/control3D.js"
                );
                var HolographicBackplate = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(HolographicBackplate2, _super);
                    function HolographicBackplate2(name, _shareMaterials) {
                      if (_shareMaterials === void 0) {
                        _shareMaterials = true;
                      }
                      var _this = _super.call(this, name) || this;
                      _this._shareMaterials = _shareMaterials;
                      return _this;
                    }
                    Object.defineProperty(HolographicBackplate2.prototype, "renderingGroupId", {
                      get: function() {
                        return this._model.renderingGroupId;
                      },
                      /**
                       * Rendering ground id of the backplate mesh.
                       */
                      set: function(id) {
                        this._model.renderingGroupId = id;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(HolographicBackplate2.prototype, "material", {
                      /**
                       * Gets the material used by the backplate
                       */
                      get: function() {
                        return this._material;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(HolographicBackplate2.prototype, "shareMaterials", {
                      /**
                       * Gets a boolean indicating if this backplate shares its material with other HolographicBackplates
                       */
                      get: function() {
                        return this._shareMaterials;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    HolographicBackplate2.prototype._getTypeName = function() {
                      return "HolographicBackplate";
                    };
                    HolographicBackplate2.prototype._createNode = function(scene) {
                      var _this = this;
                      var _a;
                      var collisionMesh = (0, core_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_1__.CreateBox)(((_a = this.name) !== null && _a !== void 0 ? _a : "HolographicBackplate") + "_CollisionMesh", {
                        width: 1,
                        height: 1,
                        depth: 1
                      }, scene);
                      collisionMesh.isPickable = true;
                      collisionMesh.visibility = 0;
                      core_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_1__.SceneLoader.ImportMeshAsync(void 0, HolographicBackplate2.MODEL_BASE_URL, HolographicBackplate2.MODEL_FILENAME, scene).then(function(result) {
                        var importedModel = result.meshes[1];
                        importedModel.name = "".concat(_this.name, "_frontPlate");
                        importedModel.isPickable = false;
                        importedModel.parent = collisionMesh;
                        if (_this._material) {
                          importedModel.material = _this._material;
                        }
                        _this._model = importedModel;
                      });
                      return collisionMesh;
                    };
                    HolographicBackplate2.prototype._createMaterial = function(mesh) {
                      this._material = new _materials_fluentBackplate_fluentBackplateMaterial__WEBPACK_IMPORTED_MODULE_2__.FluentBackplateMaterial(this.name + " Material", mesh.getScene());
                    };
                    HolographicBackplate2.prototype._affectMaterial = function(mesh) {
                      if (this._shareMaterials) {
                        if (!this._host._touchSharedMaterials["fluentBackplateMaterial"]) {
                          this._createMaterial(mesh);
                          this._host._touchSharedMaterials["fluentBackplateMaterial"] = this._material;
                        } else {
                          this._material = this._host._touchSharedMaterials["fluentBackplateMaterial"];
                        }
                      } else {
                        this._createMaterial(mesh);
                      }
                    };
                    HolographicBackplate2.prototype.dispose = function() {
                      _super.prototype.dispose.call(this);
                      if (!this.shareMaterials) {
                        this._material.dispose();
                      }
                      this._model.dispose();
                    };
                    HolographicBackplate2.MODEL_BASE_URL = "https://assets.babylonjs.com/meshes/MRTK/";
                    HolographicBackplate2.MODEL_FILENAME = "mrtk-fluent-backplate.glb";
                    return HolographicBackplate2;
                  }(_control3D__WEBPACK_IMPORTED_MODULE_3__.Control3D)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/controls/holographicButton.js": (
              /*!**************************************************************!*\
                !*** ../../../lts/gui/dist/3D/controls/holographicButton.js ***!
                \**************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "HolographicButton": () => (
                    /* binding */
                    HolographicButton
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var _button3D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./button3D */
                  "../../../lts/gui/dist/3D/controls/button3D.js"
                );
                var core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! core/Misc/domManagement */
                  "core/Misc/perfCounter"
                );
                var core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_2___default = __webpack_require__2.n(core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_2__);
                var _materials_fluent_fluentMaterial__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ../materials/fluent/fluentMaterial */
                  "../../../lts/gui/dist/3D/materials/fluent/fluentMaterial.js"
                );
                var _2D_controls_stackPanel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
                  /*! ../../2D/controls/stackPanel */
                  "../../../lts/gui/dist/2D/controls/stackPanel.js"
                );
                var _2D_controls_image__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
                  /*! ../../2D/controls/image */
                  "../../../lts/gui/dist/2D/controls/image.js"
                );
                var _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
                  /*! ../../2D/controls/textBlock */
                  "../../../lts/gui/dist/2D/controls/textBlock.js"
                );
                var _2D_advancedDynamicTexture__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
                  /*! ../../2D/advancedDynamicTexture */
                  "../../../lts/gui/dist/2D/advancedDynamicTexture.js"
                );
                var HolographicButton = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(HolographicButton2, _super);
                    function HolographicButton2(name, shareMaterials) {
                      if (shareMaterials === void 0) {
                        shareMaterials = true;
                      }
                      var _this = _super.call(this, name) || this;
                      _this._shareMaterials = true;
                      _this._shareMaterials = shareMaterials;
                      _this.pointerEnterAnimation = function() {
                        if (!_this.mesh) {
                          return;
                        }
                        _this._frontPlate.setEnabled(true);
                      };
                      _this.pointerOutAnimation = function() {
                        if (!_this.mesh) {
                          return;
                        }
                        _this._frontPlate.setEnabled(false);
                      };
                      return _this;
                    }
                    HolographicButton2.prototype._disposeTooltip = function() {
                      this._tooltipFade = null;
                      if (this._tooltipTextBlock) {
                        this._tooltipTextBlock.dispose();
                      }
                      if (this._tooltipTexture) {
                        this._tooltipTexture.dispose();
                      }
                      if (this._tooltipMesh) {
                        this._tooltipMesh.dispose();
                      }
                      this.onPointerEnterObservable.remove(this._tooltipHoverObserver);
                      this.onPointerOutObservable.remove(this._tooltipOutObserver);
                    };
                    Object.defineProperty(HolographicButton2.prototype, "renderingGroupId", {
                      get: function() {
                        return this._backPlate.renderingGroupId;
                      },
                      /**
                       * Rendering ground id of all the mesh in the button
                       */
                      set: function(id) {
                        this._backPlate.renderingGroupId = id;
                        this._textPlate.renderingGroupId = id;
                        this._frontPlate.renderingGroupId = id;
                        if (this._tooltipMesh) {
                          this._tooltipMesh.renderingGroupId = id;
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(HolographicButton2.prototype, "tooltipText", {
                      get: function() {
                        if (this._tooltipTextBlock) {
                          return this._tooltipTextBlock.text;
                        }
                        return null;
                      },
                      /**
                       * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)
                       */
                      set: function(text) {
                        var _this = this;
                        if (!text) {
                          this._disposeTooltip();
                          return;
                        }
                        if (!this._tooltipFade) {
                          var rightHandedScene = this._backPlate._scene.useRightHandedSystem;
                          this._tooltipMesh = (0, core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_2__.CreatePlane)("", { size: 1 }, this._backPlate._scene);
                          var tooltipBackground = (0, core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_2__.CreatePlane)("", { size: 1, sideOrientation: core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_2__.Mesh.DOUBLESIDE }, this._backPlate._scene);
                          var mat = new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_2__.StandardMaterial("", this._backPlate._scene);
                          mat.diffuseColor = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_2__.Color3.FromHexString("#212121");
                          tooltipBackground.material = mat;
                          tooltipBackground.isPickable = false;
                          this._tooltipMesh.addChild(tooltipBackground);
                          tooltipBackground.position = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.Forward(rightHandedScene).scale(0.05);
                          this._tooltipMesh.scaling.y = 1 / 3;
                          this._tooltipMesh.position = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.Up().scale(0.7).add(core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.Forward(rightHandedScene).scale(-0.15));
                          this._tooltipMesh.isPickable = false;
                          this._tooltipMesh.parent = this._backPlate;
                          this._tooltipTexture = _2D_advancedDynamicTexture__WEBPACK_IMPORTED_MODULE_7__.AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);
                          this._tooltipTextBlock = new _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_6__.TextBlock();
                          this._tooltipTextBlock.scaleY = 3;
                          this._tooltipTextBlock.color = "white";
                          this._tooltipTextBlock.fontSize = 130;
                          this._tooltipTexture.addControl(this._tooltipTextBlock);
                          this._tooltipFade = new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_2__.FadeInOutBehavior();
                          this._tooltipFade.delay = 500;
                          this._tooltipMesh.addBehavior(this._tooltipFade);
                          this._tooltipHoverObserver = this.onPointerEnterObservable.add(function() {
                            if (_this._tooltipFade) {
                              _this._tooltipFade.fadeIn(true);
                            }
                          });
                          this._tooltipOutObserver = this.onPointerOutObservable.add(function() {
                            if (_this._tooltipFade) {
                              _this._tooltipFade.fadeIn(false);
                            }
                          });
                        }
                        if (this._tooltipTextBlock) {
                          this._tooltipTextBlock.text = text;
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(HolographicButton2.prototype, "text", {
                      /**
                       * Gets or sets text for the button
                       */
                      get: function() {
                        return this._text;
                      },
                      set: function(value) {
                        if (this._text === value) {
                          return;
                        }
                        this._text = value;
                        this._rebuildContent();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(HolographicButton2.prototype, "imageUrl", {
                      /**
                       * Gets or sets the image url for the button
                       */
                      get: function() {
                        return this._imageUrl;
                      },
                      set: function(value) {
                        if (this._imageUrl === value) {
                          return;
                        }
                        this._imageUrl = value;
                        this._rebuildContent();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(HolographicButton2.prototype, "backMaterial", {
                      /**
                       * Gets the back material used by this button
                       */
                      get: function() {
                        return this._backMaterial;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(HolographicButton2.prototype, "frontMaterial", {
                      /**
                       * Gets the front material used by this button
                       */
                      get: function() {
                        return this._frontMaterial;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(HolographicButton2.prototype, "plateMaterial", {
                      /**
                       * Gets the plate material used by this button
                       */
                      get: function() {
                        return this._plateMaterial;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(HolographicButton2.prototype, "shareMaterials", {
                      /**
                       * Gets a boolean indicating if this button shares its material with other HolographicButtons
                       */
                      get: function() {
                        return this._shareMaterials;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    HolographicButton2.prototype._getTypeName = function() {
                      return "HolographicButton";
                    };
                    HolographicButton2.prototype._rebuildContent = function() {
                      this._disposeFacadeTexture();
                      var panel = new _2D_controls_stackPanel__WEBPACK_IMPORTED_MODULE_4__.StackPanel();
                      panel.isVertical = true;
                      if (core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_2__.DomManagement.IsDocumentAvailable() && !!document.createElement) {
                        if (this._imageUrl) {
                          var image = new _2D_controls_image__WEBPACK_IMPORTED_MODULE_5__.Image();
                          image.source = this._imageUrl;
                          image.paddingTop = "40px";
                          image.height = "180px";
                          image.width = "100px";
                          image.paddingBottom = "40px";
                          panel.addControl(image);
                        }
                      }
                      if (this._text) {
                        var text = new _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_6__.TextBlock();
                        text.text = this._text;
                        text.color = "white";
                        text.height = "30px";
                        text.fontSize = 24;
                        panel.addControl(text);
                      }
                      if (this._frontPlate) {
                        this.content = panel;
                      }
                    };
                    HolographicButton2.prototype._createNode = function(scene) {
                      this._backPlate = (0, core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_2__.CreateBox)(this.name + "BackMesh", {
                        width: 1,
                        height: 1,
                        depth: 0.08
                      }, scene);
                      this._frontPlate = (0, core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_2__.CreateBox)(this.name + "FrontMesh", {
                        width: 1,
                        height: 1,
                        depth: 0.08
                      }, scene);
                      this._frontPlate.parent = this._backPlate;
                      this._frontPlate.position = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.Forward(scene.useRightHandedSystem).scale(-0.08);
                      this._frontPlate.isPickable = false;
                      this._frontPlate.setEnabled(false);
                      this._textPlate = _super.prototype._createNode.call(this, scene);
                      this._textPlate.parent = this._backPlate;
                      this._textPlate.position = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.Forward(scene.useRightHandedSystem).scale(-0.08);
                      this._textPlate.isPickable = false;
                      return this._backPlate;
                    };
                    HolographicButton2.prototype._applyFacade = function(facadeTexture) {
                      this._plateMaterial.emissiveTexture = facadeTexture;
                      this._plateMaterial.opacityTexture = facadeTexture;
                    };
                    HolographicButton2.prototype._createBackMaterial = function(mesh) {
                      var _this = this;
                      this._backMaterial = new _materials_fluent_fluentMaterial__WEBPACK_IMPORTED_MODULE_3__.FluentMaterial(this.name + "Back Material", mesh.getScene());
                      this._backMaterial.renderHoverLight = true;
                      this._pickedPointObserver = this._host.onPickedPointChangedObservable.add(function(pickedPoint) {
                        if (pickedPoint) {
                          _this._backMaterial.hoverPosition = pickedPoint;
                          _this._backMaterial.hoverColor.a = 1;
                        } else {
                          _this._backMaterial.hoverColor.a = 0;
                        }
                      });
                    };
                    HolographicButton2.prototype._createFrontMaterial = function(mesh) {
                      this._frontMaterial = new _materials_fluent_fluentMaterial__WEBPACK_IMPORTED_MODULE_3__.FluentMaterial(this.name + "Front Material", mesh.getScene());
                      this._frontMaterial.innerGlowColorIntensity = 0;
                      this._frontMaterial.alpha = 0.5;
                      this._frontMaterial.renderBorders = true;
                    };
                    HolographicButton2.prototype._createPlateMaterial = function(mesh) {
                      this._plateMaterial = new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_2__.StandardMaterial(this.name + "Plate Material", mesh.getScene());
                      this._plateMaterial.specularColor = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_2__.Color3.Black();
                    };
                    HolographicButton2.prototype._affectMaterial = function(mesh) {
                      if (this._shareMaterials) {
                        if (!this._host._sharedMaterials["backFluentMaterial"]) {
                          this._createBackMaterial(mesh);
                          this._host._sharedMaterials["backFluentMaterial"] = this._backMaterial;
                        } else {
                          this._backMaterial = this._host._sharedMaterials["backFluentMaterial"];
                        }
                        if (!this._host._sharedMaterials["frontFluentMaterial"]) {
                          this._createFrontMaterial(mesh);
                          this._host._sharedMaterials["frontFluentMaterial"] = this._frontMaterial;
                        } else {
                          this._frontMaterial = this._host._sharedMaterials["frontFluentMaterial"];
                        }
                      } else {
                        this._createBackMaterial(mesh);
                        this._createFrontMaterial(mesh);
                      }
                      this._createPlateMaterial(mesh);
                      this._backPlate.material = this._backMaterial;
                      this._frontPlate.material = this._frontMaterial;
                      this._textPlate.material = this._plateMaterial;
                      this._rebuildContent();
                    };
                    HolographicButton2.prototype.dispose = function() {
                      _super.prototype.dispose.call(this);
                      this._disposeTooltip();
                      if (!this.shareMaterials) {
                        this._backMaterial.dispose();
                        this._frontMaterial.dispose();
                        this._plateMaterial.dispose();
                        if (this._pickedPointObserver) {
                          this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);
                          this._pickedPointObserver = null;
                        }
                      }
                    };
                    return HolographicButton2;
                  }(_button3D__WEBPACK_IMPORTED_MODULE_1__.Button3D)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/controls/holographicSlate.js": (
              /*!*************************************************************!*\
                !*** ../../../lts/gui/dist/3D/controls/holographicSlate.js ***!
                \*************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "HolographicSlate": () => (
                    /* binding */
                    HolographicSlate
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var _contentDisplay3D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./contentDisplay3D */
                  "../../../lts/gui/dist/3D/controls/contentDisplay3D.js"
                );
                var _touchHolographicButton__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./touchHolographicButton */
                  "../../../lts/gui/dist/3D/controls/touchHolographicButton.js"
                );
                var _2D_advancedDynamicTexture__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ../../2D/advancedDynamicTexture */
                  "../../../lts/gui/dist/2D/advancedDynamicTexture.js"
                );
                var _2D_controls_control__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
                  /*! ../../2D/controls/control */
                  "../../../lts/gui/dist/2D/controls/control.js"
                );
                var _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
                  /*! ../../2D/controls/textBlock */
                  "../../../lts/gui/dist/2D/controls/textBlock.js"
                );
                var _behaviors_defaultBehavior__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
                  /*! ../behaviors/defaultBehavior */
                  "../../../lts/gui/dist/3D/behaviors/defaultBehavior.js"
                );
                var _gizmos_slateGizmo__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
                  /*! ../gizmos/slateGizmo */
                  "../../../lts/gui/dist/3D/gizmos/slateGizmo.js"
                );
                var _materials_fluent_fluentMaterial__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__2(
                  /*! ../materials/fluent/fluentMaterial */
                  "../../../lts/gui/dist/3D/materials/fluent/fluentMaterial.js"
                );
                var _materials_fluentBackplate_fluentBackplateMaterial__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__2(
                  /*! ../materials/fluentBackplate/fluentBackplateMaterial */
                  "../../../lts/gui/dist/3D/materials/fluentBackplate/fluentBackplateMaterial.js"
                );
                var core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__2(
                  /*! core/Meshes/mesh.vertexData */
                  "core/Misc/perfCounter"
                );
                var core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10___default = __webpack_require__2.n(core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__);
                var HolographicSlate = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(HolographicSlate2, _super);
                    function HolographicSlate2(name) {
                      var _this = _super.call(this, name) || this;
                      _this.titleBarMargin = 5e-3;
                      _this.origin = new core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector3(0, 0, 0);
                      _this._dimensions = new core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector2(21.875, 12.5);
                      _this._titleBarHeight = 0.625;
                      _this._titleText = "";
                      _this._contentScaleRatio = 1;
                      _this.minDimensions = new core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector2(15.625, 6.25);
                      _this.defaultDimensions = _this._dimensions.clone();
                      _this._followButton = new _touchHolographicButton__WEBPACK_IMPORTED_MODULE_2__.TouchHolographicButton("followButton" + _this.name);
                      _this._followButton.isToggleButton = true;
                      _this._closeButton = new _touchHolographicButton__WEBPACK_IMPORTED_MODULE_2__.TouchHolographicButton("closeButton" + _this.name);
                      _this._contentViewport = new core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Viewport(0, 0, 1, 1);
                      _this._contentDragBehavior = new core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.PointerDragBehavior({
                        dragPlaneNormal: new core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector3(0, 0, -1)
                      });
                      return _this;
                    }
                    Object.defineProperty(HolographicSlate2.prototype, "defaultBehavior", {
                      /**
                       * Regroups all mesh behaviors for the slate
                       */
                      get: function() {
                        return this._defaultBehavior;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(HolographicSlate2.prototype, "dimensions", {
                      /**
                       * 2D dimensions of the slate
                       */
                      get: function() {
                        return this._dimensions;
                      },
                      set: function(value) {
                        var scale = 1;
                        if (value.x < this.minDimensions.x || value.y < this.minDimensions.y) {
                          var newRatio = value.x / value.y;
                          var minRatio = this.minDimensions.x / this.minDimensions.y;
                          if (minRatio > newRatio) {
                            scale = this.minDimensions.x / value.x;
                          } else {
                            scale = this.minDimensions.y / value.y;
                          }
                        }
                        this._dimensions.copyFrom(value).scaleInPlace(scale);
                        this._updatePivot();
                        this._positionElements();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(HolographicSlate2.prototype, "titleBarHeight", {
                      /**
                       * Height of the title bar component
                       */
                      get: function() {
                        return this._titleBarHeight;
                      },
                      set: function(value) {
                        this._titleBarHeight = value;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(HolographicSlate2.prototype, "renderingGroupId", {
                      get: function() {
                        return this._titleBar.renderingGroupId;
                      },
                      /**
                       * Rendering ground id of all the meshes
                       */
                      set: function(id) {
                        this._titleBar.renderingGroupId = id;
                        this._titleBarTitle.renderingGroupId = id;
                        this._contentPlate.renderingGroupId = id;
                        this._backPlate.renderingGroupId = id;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(HolographicSlate2.prototype, "title", {
                      get: function() {
                        return this._titleText;
                      },
                      /**
                       * The title text displayed at the top of the slate
                       */
                      set: function(title) {
                        this._titleText = title;
                        if (this._titleTextComponent) {
                          this._titleTextComponent.text = title;
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    HolographicSlate2.prototype._applyFacade = function(facadeTexture) {
                      this._contentMaterial.albedoTexture = facadeTexture;
                      this._resetContentPositionAndZoom();
                      this._applyContentViewport();
                      facadeTexture.attachToMesh(this._contentPlate, true);
                    };
                    HolographicSlate2.prototype._addControl = function(control) {
                      control._host = this._host;
                      if (this._host.utilityLayer) {
                        control._prepareNode(this._host.utilityLayer.utilityLayerScene);
                      }
                    };
                    HolographicSlate2.prototype._getTypeName = function() {
                      return "HolographicSlate";
                    };
                    HolographicSlate2.prototype._positionElements = function() {
                      var followButton = this._followButton;
                      var closeButton = this._closeButton;
                      var titleBar = this._titleBar;
                      var titleBarTitle = this._titleBarTitle;
                      var contentPlate = this._contentPlate;
                      var backPlate = this._backPlate;
                      if (followButton && closeButton && titleBar) {
                        closeButton.scaling.setAll(this.titleBarHeight);
                        followButton.scaling.setAll(this.titleBarHeight);
                        closeButton.position.copyFromFloats(this.dimensions.x - this.titleBarHeight / 2, -this.titleBarHeight / 2, 0).addInPlace(this.origin);
                        followButton.position.copyFromFloats(this.dimensions.x - 3 * this.titleBarHeight / 2, -this.titleBarHeight / 2, 0).addInPlace(this.origin);
                        var contentPlateHeight = this.dimensions.y - this.titleBarHeight - this.titleBarMargin;
                        var rightHandScene = contentPlate.getScene().useRightHandedSystem;
                        titleBar.scaling.set(this.dimensions.x, this.titleBarHeight, core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Epsilon);
                        titleBarTitle.scaling.set(this.dimensions.x - 2 * this.titleBarHeight, this.titleBarHeight, core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Epsilon);
                        contentPlate.scaling.copyFromFloats(this.dimensions.x, contentPlateHeight, core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Epsilon);
                        backPlate.scaling.copyFromFloats(this.dimensions.x, contentPlateHeight, core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Epsilon);
                        titleBar.position.copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight / 2), 0).addInPlace(this.origin);
                        titleBarTitle.position.copyFromFloats(this.dimensions.x / 2 - this.titleBarHeight, -(this.titleBarHeight / 2), rightHandScene ? core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Epsilon : -core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Epsilon).addInPlace(this.origin);
                        contentPlate.position.copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight + this.titleBarMargin + contentPlateHeight / 2), 0).addInPlace(this.origin);
                        backPlate.position.copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight + this.titleBarMargin + contentPlateHeight / 2), rightHandScene ? -core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Epsilon : core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Epsilon).addInPlace(this.origin);
                        this._titleTextComponent.host.scaleTo(HolographicSlate2._DEFAULT_TEXT_RESOLUTION_Y * titleBarTitle.scaling.x / titleBarTitle.scaling.y, HolographicSlate2._DEFAULT_TEXT_RESOLUTION_Y);
                        var aspectRatio = this.dimensions.x / contentPlateHeight;
                        this._contentViewport.width = this._contentScaleRatio;
                        this._contentViewport.height = this._contentScaleRatio / aspectRatio;
                        this._applyContentViewport();
                        if (this._gizmo) {
                          this._gizmo.updateBoundingBox();
                        }
                      }
                    };
                    HolographicSlate2.prototype._applyContentViewport = function() {
                      var _a;
                      if (((_a = this._contentPlate) === null || _a === void 0 ? void 0 : _a.material) && this._contentPlate.material.albedoTexture) {
                        var tex = this._contentPlate.material.albedoTexture;
                        tex.uScale = this._contentScaleRatio;
                        tex.vScale = this._contentScaleRatio / this._contentViewport.width * this._contentViewport.height;
                        tex.uOffset = this._contentViewport.x;
                        tex.vOffset = this._contentViewport.y;
                      }
                    };
                    HolographicSlate2.prototype._resetContentPositionAndZoom = function() {
                      this._contentViewport.x = 0;
                      this._contentViewport.y = 1 - this._contentViewport.height / this._contentViewport.width;
                      this._contentScaleRatio = 1;
                    };
                    HolographicSlate2.prototype._updatePivot = function() {
                      if (!this.mesh) {
                        return;
                      }
                      var center = new core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector3(this.dimensions.x * 0.5, -this.dimensions.y * 0.5, core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Epsilon);
                      center.addInPlace(this.origin);
                      center.z = 0;
                      var origin = new core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector3(0, 0, 0);
                      core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector3.TransformCoordinatesToRef(origin, this.mesh.computeWorldMatrix(true), origin);
                      this.mesh.setPivotPoint(center);
                      var origin2 = new core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector3(0, 0, 0);
                      core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector3.TransformCoordinatesToRef(origin2, this.mesh.computeWorldMatrix(true), origin2);
                      this.mesh.position.addInPlace(origin).subtractInPlace(origin2);
                    };
                    HolographicSlate2.prototype._createNode = function(scene) {
                      var _this = this;
                      var node = new core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Mesh("slate_" + this.name, scene);
                      this._titleBar = (0, core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.CreateBox)("titleBar_" + this.name, { size: 1 }, scene);
                      this._titleBarTitle = (0, core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.CreatePlane)("titleText_" + this.name, { size: 1 }, scene);
                      this._titleBarTitle.parent = node;
                      this._titleBarTitle.isPickable = false;
                      var adt = _2D_advancedDynamicTexture__WEBPACK_IMPORTED_MODULE_3__.AdvancedDynamicTexture.CreateForMesh(this._titleBarTitle);
                      this._titleTextComponent = new _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_5__.TextBlock("titleText_" + this.name, this._titleText);
                      this._titleTextComponent.textWrapping = _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_5__.TextWrapping.Ellipsis;
                      this._titleTextComponent.textHorizontalAlignment = _2D_controls_control__WEBPACK_IMPORTED_MODULE_4__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                      this._titleTextComponent.color = "white";
                      this._titleTextComponent.fontSize = HolographicSlate2._DEFAULT_TEXT_RESOLUTION_Y / 2;
                      this._titleTextComponent.paddingLeft = HolographicSlate2._DEFAULT_TEXT_RESOLUTION_Y / 4;
                      adt.addControl(this._titleTextComponent);
                      if (scene.useRightHandedSystem) {
                        var faceUV = new core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector4(0, 0, 1, 1);
                        this._contentPlate = (0, core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.CreatePlane)("contentPlate_" + this.name, { size: 1, sideOrientation: core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.VertexData.BACKSIDE, frontUVs: faceUV }, scene);
                        this._backPlate = (0, core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.CreatePlane)("backPlate_" + this.name, { size: 1, sideOrientation: core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.VertexData.FRONTSIDE }, scene);
                      } else {
                        var faceUV = new core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector4(0, 0, 1, 1);
                        this._contentPlate = (0, core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.CreatePlane)("contentPlate_" + this.name, { size: 1, sideOrientation: core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.VertexData.FRONTSIDE, frontUVs: faceUV }, scene);
                        this._backPlate = (0, core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.CreatePlane)("backPlate_" + this.name, { size: 1, sideOrientation: core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.VertexData.BACKSIDE }, scene);
                      }
                      this._titleBar.parent = node;
                      this._titleBar.isNearGrabbable = true;
                      this._contentPlate.parent = node;
                      this._backPlate.parent = node;
                      this._attachContentPlateBehavior();
                      this._addControl(this._followButton);
                      this._addControl(this._closeButton);
                      var followButton = this._followButton;
                      var closeButton = this._closeButton;
                      followButton.node.parent = node;
                      closeButton.node.parent = node;
                      this._positionElements();
                      this._followButton.imageUrl = HolographicSlate2.ASSETS_BASE_URL + HolographicSlate2.FOLLOW_ICON_FILENAME;
                      this._closeButton.imageUrl = HolographicSlate2.ASSETS_BASE_URL + HolographicSlate2.CLOSE_ICON_FILENAME;
                      this._followButton.isBackplateVisible = false;
                      this._closeButton.isBackplateVisible = false;
                      this._followButton.onToggleObservable.add(function(isToggled) {
                        _this._defaultBehavior.followBehaviorEnabled = isToggled;
                        if (_this._defaultBehavior.followBehaviorEnabled) {
                          _this._defaultBehavior.followBehavior.recenter();
                        }
                      });
                      this._closeButton.onPointerClickObservable.add(function() {
                        _this.dispose();
                      });
                      node.rotationQuaternion = core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Quaternion.Identity();
                      node.isVisible = false;
                      return node;
                    };
                    HolographicSlate2.prototype._attachContentPlateBehavior = function() {
                      var _this = this;
                      this._contentDragBehavior.attach(this._contentPlate);
                      this._contentDragBehavior.moveAttached = false;
                      this._contentDragBehavior.useObjectOrientationForDragging = true;
                      this._contentDragBehavior.updateDragPlane = false;
                      var origin = new core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector3();
                      var worldDimensions = new core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector3();
                      var upWorld = new core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector3();
                      var rightWorld = new core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector3();
                      var projectedOffset = new core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector2();
                      var startViewport;
                      var worldMatrix;
                      this._contentDragBehavior.onDragStartObservable.add(function(event) {
                        if (!_this.node) {
                          return;
                        }
                        startViewport = _this._contentViewport.clone();
                        worldMatrix = _this.node.computeWorldMatrix(true);
                        origin.copyFrom(event.dragPlanePoint);
                        worldDimensions.set(_this.dimensions.x, _this.dimensions.y, core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Epsilon);
                        worldDimensions.y -= _this.titleBarHeight + _this.titleBarMargin;
                        core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector3.TransformNormalToRef(worldDimensions, worldMatrix, worldDimensions);
                        upWorld.copyFromFloats(0, 1, 0);
                        core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector3.TransformNormalToRef(upWorld, worldMatrix, upWorld);
                        rightWorld.copyFromFloats(1, 0, 0);
                        core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector3.TransformNormalToRef(rightWorld, worldMatrix, rightWorld);
                        upWorld.normalize();
                        upWorld.scaleInPlace(1 / core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector3.Dot(upWorld, worldDimensions));
                        rightWorld.normalize();
                        rightWorld.scaleInPlace(1 / core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector3.Dot(rightWorld, worldDimensions));
                      });
                      var offset = new core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector3();
                      this._contentDragBehavior.onDragObservable.add(function(event) {
                        offset.copyFrom(event.dragPlanePoint);
                        offset.subtractInPlace(origin);
                        projectedOffset.copyFromFloats(core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector3.Dot(offset, rightWorld), core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector3.Dot(offset, upWorld));
                        _this._contentViewport.x = core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Scalar.Clamp(startViewport.x - offset.x, 0, 1 - _this._contentViewport.width * _this._contentScaleRatio);
                        _this._contentViewport.y = core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Scalar.Clamp(startViewport.y - offset.y, 0, 1 - _this._contentViewport.height * _this._contentScaleRatio);
                        _this._applyContentViewport();
                      });
                    };
                    HolographicSlate2.prototype._affectMaterial = function(mesh) {
                      this._titleBarMaterial = new _materials_fluentBackplate_fluentBackplateMaterial__WEBPACK_IMPORTED_MODULE_9__.FluentBackplateMaterial("".concat(this.name, " plateMaterial"), mesh.getScene());
                      this._contentMaterial = new _materials_fluent_fluentMaterial__WEBPACK_IMPORTED_MODULE_8__.FluentMaterial("".concat(this.name, " contentMaterial"), mesh.getScene());
                      this._contentMaterial.renderBorders = true;
                      this._backMaterial = new _materials_fluentBackplate_fluentBackplateMaterial__WEBPACK_IMPORTED_MODULE_9__.FluentBackplateMaterial("".concat(this.name, " backPlate"), mesh.getScene());
                      this._backMaterial.lineWidth = core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Epsilon;
                      this._backMaterial.radius = 5e-3;
                      this._backMaterial.backFaceCulling = true;
                      this._titleBar.material = this._titleBarMaterial;
                      this._contentPlate.material = this._contentMaterial;
                      this._backPlate.material = this._backMaterial;
                      this._resetContent();
                      this._applyContentViewport();
                    };
                    HolographicSlate2.prototype._prepareNode = function(scene) {
                      var _this = this;
                      _super.prototype._prepareNode.call(this, scene);
                      this._gizmo = new _gizmos_slateGizmo__WEBPACK_IMPORTED_MODULE_7__.SlateGizmo(this._host.utilityLayer);
                      this._gizmo.attachedSlate = this;
                      this._defaultBehavior = new _behaviors_defaultBehavior__WEBPACK_IMPORTED_MODULE_6__.DefaultBehavior();
                      this._defaultBehavior.attach(this.node, [this._titleBar]);
                      this._defaultBehavior.sixDofDragBehavior.onDragStartObservable.add(function() {
                        _this._followButton.isToggled = false;
                      });
                      this._positionChangedObserver = this._defaultBehavior.sixDofDragBehavior.onPositionChangedObservable.add(function() {
                        _this._gizmo.updateBoundingBox();
                      });
                      this._updatePivot();
                      this.resetDefaultAspectAndPose(false);
                    };
                    HolographicSlate2.prototype.resetDefaultAspectAndPose = function(resetAspect) {
                      if (resetAspect === void 0) {
                        resetAspect = true;
                      }
                      if (!this._host || !this._host.utilityLayer || !this.node) {
                        return;
                      }
                      var scene = this._host.utilityLayer.utilityLayerScene;
                      var camera = scene.activeCamera;
                      if (camera) {
                        var worldMatrix = camera.getWorldMatrix();
                        var backward = core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector3.TransformNormal(core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector3.Backward(scene.useRightHandedSystem), worldMatrix);
                        this.origin.setAll(0);
                        this._gizmo.updateBoundingBox();
                        var pivot = this.node.getAbsolutePivotPoint();
                        this.node.position.copyFrom(camera.position).subtractInPlace(backward).subtractInPlace(pivot);
                        this.node.rotationQuaternion = core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Quaternion.FromLookDirectionLH(backward, new core_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_10__.Vector3(0, 1, 0));
                        if (resetAspect) {
                          this.dimensions = this.defaultDimensions;
                        }
                      }
                    };
                    HolographicSlate2.prototype.dispose = function() {
                      _super.prototype.dispose.call(this);
                      this._titleBarMaterial.dispose();
                      this._contentMaterial.dispose();
                      this._titleBar.dispose();
                      this._titleBarTitle.dispose();
                      this._contentPlate.dispose();
                      this._backPlate.dispose();
                      this._followButton.dispose();
                      this._closeButton.dispose();
                      this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);
                      this._defaultBehavior.sixDofDragBehavior.onPositionChangedObservable.remove(this._positionChangedObserver);
                      this._defaultBehavior.detach();
                      this._gizmo.dispose();
                      this._contentDragBehavior.detach();
                    };
                    HolographicSlate2.ASSETS_BASE_URL = "https://assets.babylonjs.com/meshes/MRTK/";
                    HolographicSlate2.CLOSE_ICON_FILENAME = "IconClose.png";
                    HolographicSlate2.FOLLOW_ICON_FILENAME = "IconFollowMe.png";
                    HolographicSlate2._DEFAULT_TEXT_RESOLUTION_Y = 102.4;
                    return HolographicSlate2;
                  }(_contentDisplay3D__WEBPACK_IMPORTED_MODULE_1__.ContentDisplay3D)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/controls/index.js": (
              /*!**************************************************!*\
                !*** ../../../lts/gui/dist/3D/controls/index.js ***!
                \**************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "AbstractButton3D": () => (
                    /* reexport safe */
                    _abstractButton3D__WEBPACK_IMPORTED_MODULE_0__.AbstractButton3D
                  ),
                  /* harmony export */
                  "Button3D": () => (
                    /* reexport safe */
                    _button3D__WEBPACK_IMPORTED_MODULE_1__.Button3D
                  ),
                  /* harmony export */
                  "Container3D": () => (
                    /* reexport safe */
                    _container3D__WEBPACK_IMPORTED_MODULE_2__.Container3D
                  ),
                  /* harmony export */
                  "Control3D": () => (
                    /* reexport safe */
                    _control3D__WEBPACK_IMPORTED_MODULE_3__.Control3D
                  ),
                  /* harmony export */
                  "CylinderPanel": () => (
                    /* reexport safe */
                    _cylinderPanel__WEBPACK_IMPORTED_MODULE_4__.CylinderPanel
                  ),
                  /* harmony export */
                  "HandMenu": () => (
                    /* reexport safe */
                    _handMenu__WEBPACK_IMPORTED_MODULE_5__.HandMenu
                  ),
                  /* harmony export */
                  "HolographicBackplate": () => (
                    /* reexport safe */
                    _holographicBackplate__WEBPACK_IMPORTED_MODULE_6__.HolographicBackplate
                  ),
                  /* harmony export */
                  "HolographicButton": () => (
                    /* reexport safe */
                    _holographicButton__WEBPACK_IMPORTED_MODULE_7__.HolographicButton
                  ),
                  /* harmony export */
                  "HolographicSlate": () => (
                    /* reexport safe */
                    _holographicSlate__WEBPACK_IMPORTED_MODULE_8__.HolographicSlate
                  ),
                  /* harmony export */
                  "MeshButton3D": () => (
                    /* reexport safe */
                    _meshButton3D__WEBPACK_IMPORTED_MODULE_9__.MeshButton3D
                  ),
                  /* harmony export */
                  "NearMenu": () => (
                    /* reexport safe */
                    _nearMenu__WEBPACK_IMPORTED_MODULE_10__.NearMenu
                  ),
                  /* harmony export */
                  "PlanePanel": () => (
                    /* reexport safe */
                    _planePanel__WEBPACK_IMPORTED_MODULE_11__.PlanePanel
                  ),
                  /* harmony export */
                  "ScatterPanel": () => (
                    /* reexport safe */
                    _scatterPanel__WEBPACK_IMPORTED_MODULE_12__.ScatterPanel
                  ),
                  /* harmony export */
                  "Slider3D": () => (
                    /* reexport safe */
                    _slider3D__WEBPACK_IMPORTED_MODULE_13__.Slider3D
                  ),
                  /* harmony export */
                  "SpherePanel": () => (
                    /* reexport safe */
                    _spherePanel__WEBPACK_IMPORTED_MODULE_14__.SpherePanel
                  ),
                  /* harmony export */
                  "StackPanel3D": () => (
                    /* reexport safe */
                    _stackPanel3D__WEBPACK_IMPORTED_MODULE_15__.StackPanel3D
                  ),
                  /* harmony export */
                  "TouchButton3D": () => (
                    /* reexport safe */
                    _touchButton3D__WEBPACK_IMPORTED_MODULE_16__.TouchButton3D
                  ),
                  /* harmony export */
                  "TouchHolographicButton": () => (
                    /* reexport safe */
                    _touchHolographicButton__WEBPACK_IMPORTED_MODULE_18__.TouchHolographicButton
                  ),
                  /* harmony export */
                  "TouchHolographicButtonV3": () => (
                    /* reexport safe */
                    _MRTK3_touchHolographicButton__WEBPACK_IMPORTED_MODULE_21__.TouchHolographicButton
                  ),
                  /* harmony export */
                  "TouchHolographicMenu": () => (
                    /* reexport safe */
                    _touchHolographicMenu__WEBPACK_IMPORTED_MODULE_19__.TouchHolographicMenu
                  ),
                  /* harmony export */
                  "TouchMeshButton3D": () => (
                    /* reexport safe */
                    _touchMeshButton3D__WEBPACK_IMPORTED_MODULE_17__.TouchMeshButton3D
                  ),
                  /* harmony export */
                  "VolumeBasedPanel": () => (
                    /* reexport safe */
                    _volumeBasedPanel__WEBPACK_IMPORTED_MODULE_20__.VolumeBasedPanel
                  )
                  /* harmony export */
                });
                var _abstractButton3D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! ./abstractButton3D */
                  "../../../lts/gui/dist/3D/controls/abstractButton3D.js"
                );
                var _button3D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./button3D */
                  "../../../lts/gui/dist/3D/controls/button3D.js"
                );
                var _container3D__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./container3D */
                  "../../../lts/gui/dist/3D/controls/container3D.js"
                );
                var _control3D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./control3D */
                  "../../../lts/gui/dist/3D/controls/control3D.js"
                );
                var _cylinderPanel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
                  /*! ./cylinderPanel */
                  "../../../lts/gui/dist/3D/controls/cylinderPanel.js"
                );
                var _handMenu__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
                  /*! ./handMenu */
                  "../../../lts/gui/dist/3D/controls/handMenu.js"
                );
                var _holographicBackplate__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
                  /*! ./holographicBackplate */
                  "../../../lts/gui/dist/3D/controls/holographicBackplate.js"
                );
                var _holographicButton__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
                  /*! ./holographicButton */
                  "../../../lts/gui/dist/3D/controls/holographicButton.js"
                );
                var _holographicSlate__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__2(
                  /*! ./holographicSlate */
                  "../../../lts/gui/dist/3D/controls/holographicSlate.js"
                );
                var _meshButton3D__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__2(
                  /*! ./meshButton3D */
                  "../../../lts/gui/dist/3D/controls/meshButton3D.js"
                );
                var _nearMenu__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__2(
                  /*! ./nearMenu */
                  "../../../lts/gui/dist/3D/controls/nearMenu.js"
                );
                var _planePanel__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__2(
                  /*! ./planePanel */
                  "../../../lts/gui/dist/3D/controls/planePanel.js"
                );
                var _scatterPanel__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__2(
                  /*! ./scatterPanel */
                  "../../../lts/gui/dist/3D/controls/scatterPanel.js"
                );
                var _slider3D__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__2(
                  /*! ./slider3D */
                  "../../../lts/gui/dist/3D/controls/slider3D.js"
                );
                var _spherePanel__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__2(
                  /*! ./spherePanel */
                  "../../../lts/gui/dist/3D/controls/spherePanel.js"
                );
                var _stackPanel3D__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__2(
                  /*! ./stackPanel3D */
                  "../../../lts/gui/dist/3D/controls/stackPanel3D.js"
                );
                var _touchButton3D__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__2(
                  /*! ./touchButton3D */
                  "../../../lts/gui/dist/3D/controls/touchButton3D.js"
                );
                var _touchMeshButton3D__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__2(
                  /*! ./touchMeshButton3D */
                  "../../../lts/gui/dist/3D/controls/touchMeshButton3D.js"
                );
                var _touchHolographicButton__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__2(
                  /*! ./touchHolographicButton */
                  "../../../lts/gui/dist/3D/controls/touchHolographicButton.js"
                );
                var _touchHolographicMenu__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__2(
                  /*! ./touchHolographicMenu */
                  "../../../lts/gui/dist/3D/controls/touchHolographicMenu.js"
                );
                var _volumeBasedPanel__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__2(
                  /*! ./volumeBasedPanel */
                  "../../../lts/gui/dist/3D/controls/volumeBasedPanel.js"
                );
                var _MRTK3_touchHolographicButton__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__2(
                  /*! ./MRTK3/touchHolographicButton */
                  "../../../lts/gui/dist/3D/controls/MRTK3/touchHolographicButton.js"
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/controls/meshButton3D.js": (
              /*!*********************************************************!*\
                !*** ../../../lts/gui/dist/3D/controls/meshButton3D.js ***!
                \*********************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "MeshButton3D": () => (
                    /* binding */
                    MeshButton3D
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var _button3D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./button3D */
                  "../../../lts/gui/dist/3D/controls/button3D.js"
                );
                var MeshButton3D = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MeshButton3D2, _super);
                    function MeshButton3D2(mesh, name) {
                      var _this = _super.call(this, name) || this;
                      _this._currentMesh = mesh;
                      _this.pointerEnterAnimation = function() {
                        if (!_this.mesh) {
                          return;
                        }
                        _this.mesh.scaling.scaleInPlace(1.1);
                      };
                      _this.pointerOutAnimation = function() {
                        if (!_this.mesh) {
                          return;
                        }
                        _this.mesh.scaling.scaleInPlace(1 / 1.1);
                      };
                      _this.pointerDownAnimation = function() {
                        if (!_this.mesh) {
                          return;
                        }
                        _this.mesh.scaling.scaleInPlace(0.95);
                      };
                      _this.pointerUpAnimation = function() {
                        if (!_this.mesh) {
                          return;
                        }
                        _this.mesh.scaling.scaleInPlace(1 / 0.95);
                      };
                      return _this;
                    }
                    MeshButton3D2.prototype._getTypeName = function() {
                      return "MeshButton3D";
                    };
                    MeshButton3D2.prototype._createNode = function(scene) {
                      var _this = this;
                      this._currentMesh.getChildMeshes().forEach(function(mesh) {
                        _this._injectGUI3DReservedDataStore(mesh).control = _this;
                      });
                      return this._currentMesh;
                    };
                    MeshButton3D2.prototype._affectMaterial = function(mesh) {
                    };
                    return MeshButton3D2;
                  }(_button3D__WEBPACK_IMPORTED_MODULE_1__.Button3D)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/controls/nearMenu.js": (
              /*!*****************************************************!*\
                !*** ../../../lts/gui/dist/3D/controls/nearMenu.js ***!
                \*****************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "NearMenu": () => (
                    /* binding */
                    NearMenu
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var _touchHolographicButton__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./touchHolographicButton */
                  "../../../lts/gui/dist/3D/controls/touchHolographicButton.js"
                );
                var _behaviors_defaultBehavior__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ../behaviors/defaultBehavior */
                  "../../../lts/gui/dist/3D/behaviors/defaultBehavior.js"
                );
                var _touchHolographicMenu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./touchHolographicMenu */
                  "../../../lts/gui/dist/3D/controls/touchHolographicMenu.js"
                );
                var NearMenu = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(NearMenu2, _super);
                    function NearMenu2(name) {
                      var _this = _super.call(this, name) || this;
                      _this._isPinned = false;
                      _this._defaultBehavior = new _behaviors_defaultBehavior__WEBPACK_IMPORTED_MODULE_2__.DefaultBehavior();
                      _this._dragObserver = _this._defaultBehavior.sixDofDragBehavior.onDragObservable.add(function() {
                        _this.isPinned = true;
                      });
                      _this.backPlateMargin = 1;
                      return _this;
                    }
                    Object.defineProperty(NearMenu2.prototype, "defaultBehavior", {
                      /**
                       * Regroups all mesh behaviors for the near menu
                       */
                      get: function() {
                        return this._defaultBehavior;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(NearMenu2.prototype, "isPinned", {
                      /**
                       * Indicates if the near menu is world-pinned
                       */
                      get: function() {
                        return this._isPinned;
                      },
                      set: function(value) {
                        if (this._pinButton.isToggled !== value) {
                          this._pinButton.isToggled = value;
                          return;
                        }
                        this._isPinned = value;
                        if (value) {
                          this._defaultBehavior.followBehaviorEnabled = false;
                        } else {
                          this._defaultBehavior.followBehaviorEnabled = true;
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    NearMenu2.prototype._createPinButton = function(parent) {
                      var _this = this;
                      var control = new _touchHolographicButton__WEBPACK_IMPORTED_MODULE_1__.TouchHolographicButton("pin" + this.name, false);
                      control.imageUrl = NearMenu2._ASSETS_BASE_URL + NearMenu2._PIN_ICON_FILENAME;
                      control.parent = this;
                      control._host = this._host;
                      control.isToggleButton = true;
                      control.onToggleObservable.add(function(newState) {
                        _this.isPinned = newState;
                      });
                      if (this._host.utilityLayer) {
                        control._prepareNode(this._host.utilityLayer.utilityLayerScene);
                        control.scaling.scaleInPlace(_touchHolographicMenu__WEBPACK_IMPORTED_MODULE_3__.TouchHolographicMenu.MENU_BUTTON_SCALE);
                        if (control.node) {
                          control.node.parent = parent;
                        }
                      }
                      return control;
                    };
                    NearMenu2.prototype._createNode = function(scene) {
                      var node = _super.prototype._createNode.call(this, scene);
                      this._pinButton = this._createPinButton(node);
                      this.isPinned = false;
                      this._defaultBehavior.attach(node, [this._backPlate]);
                      this._defaultBehavior.followBehavior.ignoreCameraPitchAndRoll = true;
                      this._defaultBehavior.followBehavior.pitchOffset = -15;
                      this._defaultBehavior.followBehavior.minimumDistance = 0.3;
                      this._defaultBehavior.followBehavior.defaultDistance = 0.4;
                      this._defaultBehavior.followBehavior.maximumDistance = 0.6;
                      this._backPlate.isNearGrabbable = true;
                      node.isVisible = false;
                      return node;
                    };
                    NearMenu2.prototype._finalProcessing = function() {
                      _super.prototype._finalProcessing.call(this);
                      this._pinButton.position.copyFromFloats((this._backPlate.scaling.x + _touchHolographicMenu__WEBPACK_IMPORTED_MODULE_3__.TouchHolographicMenu.MENU_BUTTON_SCALE) / 2, this._backPlate.scaling.y / 2, 0);
                    };
                    NearMenu2.prototype.dispose = function() {
                      _super.prototype.dispose.call(this);
                      this._defaultBehavior.sixDofDragBehavior.onDragObservable.remove(this._dragObserver);
                      this._defaultBehavior.detach();
                    };
                    NearMenu2._ASSETS_BASE_URL = "https://assets.babylonjs.com/meshes/MRTK/";
                    NearMenu2._PIN_ICON_FILENAME = "IconPin.png";
                    return NearMenu2;
                  }(_touchHolographicMenu__WEBPACK_IMPORTED_MODULE_3__.TouchHolographicMenu)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/controls/planePanel.js": (
              /*!*******************************************************!*\
                !*** ../../../lts/gui/dist/3D/controls/planePanel.js ***!
                \*******************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "PlanePanel": () => (
                    /* binding */
                    PlanePanel
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Maths/math.vector */
                  "core/Misc/perfCounter"
                );
                var core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__);
                var _container3D__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./container3D */
                  "../../../lts/gui/dist/3D/controls/container3D.js"
                );
                var _volumeBasedPanel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./volumeBasedPanel */
                  "../../../lts/gui/dist/3D/controls/volumeBasedPanel.js"
                );
                var PlanePanel = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(PlanePanel2, _super);
                    function PlanePanel2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    PlanePanel2.prototype._mapGridNode = function(control, nodePosition) {
                      var mesh = control.mesh;
                      if (!mesh) {
                        return;
                      }
                      control.position = nodePosition.clone();
                      var target = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Vector3[0];
                      target.copyFrom(nodePosition);
                      switch (this.orientation) {
                        case _container3D__WEBPACK_IMPORTED_MODULE_2__.Container3D.FACEORIGIN_ORIENTATION:
                        case _container3D__WEBPACK_IMPORTED_MODULE_2__.Container3D.FACEFORWARD_ORIENTATION:
                          target.addInPlace(new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 1));
                          mesh.lookAt(target);
                          break;
                        case _container3D__WEBPACK_IMPORTED_MODULE_2__.Container3D.FACEFORWARDREVERSED_ORIENTATION:
                        case _container3D__WEBPACK_IMPORTED_MODULE_2__.Container3D.FACEORIGINREVERSED_ORIENTATION:
                          target.addInPlace(new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, -1));
                          mesh.lookAt(target);
                          break;
                      }
                    };
                    return PlanePanel2;
                  }(_volumeBasedPanel__WEBPACK_IMPORTED_MODULE_3__.VolumeBasedPanel)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/controls/scatterPanel.js": (
              /*!*********************************************************!*\
                !*** ../../../lts/gui/dist/3D/controls/scatterPanel.js ***!
                \*********************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "ScatterPanel": () => (
                    /* binding */
                    ScatterPanel
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Maths/math.vector */
                  "core/Misc/perfCounter"
                );
                var core_Misc_tools__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__);
                var _volumeBasedPanel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./volumeBasedPanel */
                  "../../../lts/gui/dist/3D/controls/volumeBasedPanel.js"
                );
                var _container3D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./container3D */
                  "../../../lts/gui/dist/3D/controls/container3D.js"
                );
                var ScatterPanel = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ScatterPanel2, _super);
                    function ScatterPanel2() {
                      var _this = _super !== null && _super.apply(this, arguments) || this;
                      _this._iteration = 100;
                      return _this;
                    }
                    Object.defineProperty(ScatterPanel2.prototype, "iteration", {
                      /**
                       * Gets or sets the number of iteration to use to scatter the controls (100 by default)
                       */
                      get: function() {
                        return this._iteration;
                      },
                      set: function(value) {
                        var _this = this;
                        if (this._iteration === value) {
                          return;
                        }
                        this._iteration = value;
                        core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Tools.SetImmediate(function() {
                          _this._arrangeChildren();
                        });
                      },
                      enumerable: false,
                      configurable: true
                    });
                    ScatterPanel2.prototype._mapGridNode = function(control, nodePosition) {
                      var mesh = control.mesh;
                      var newPos = this._scatterMapping(nodePosition);
                      if (!mesh) {
                        return;
                      }
                      switch (this.orientation) {
                        case _container3D__WEBPACK_IMPORTED_MODULE_3__.Container3D.FACEORIGIN_ORIENTATION:
                        case _container3D__WEBPACK_IMPORTED_MODULE_3__.Container3D.FACEFORWARD_ORIENTATION:
                          mesh.lookAt(new core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 1));
                          break;
                        case _container3D__WEBPACK_IMPORTED_MODULE_3__.Container3D.FACEFORWARDREVERSED_ORIENTATION:
                        case _container3D__WEBPACK_IMPORTED_MODULE_3__.Container3D.FACEORIGINREVERSED_ORIENTATION:
                          mesh.lookAt(new core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, -1));
                          break;
                      }
                      control.position = newPos;
                    };
                    ScatterPanel2.prototype._scatterMapping = function(source) {
                      source.x = (1 - Math.random() * 2) * this._cellWidth;
                      source.y = (1 - Math.random() * 2) * this._cellHeight;
                      return source;
                    };
                    ScatterPanel2.prototype._finalProcessing = function() {
                      var meshes = [];
                      for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
                        var child = _a[_i];
                        if (!child.mesh) {
                          continue;
                        }
                        meshes.push(child.mesh);
                      }
                      for (var count = 0; count < this._iteration; count++) {
                        meshes.sort(function(a, b) {
                          var distance1 = a.position.lengthSquared();
                          var distance2 = b.position.lengthSquared();
                          if (distance1 < distance2) {
                            return 1;
                          } else if (distance1 > distance2) {
                            return -1;
                          }
                          return 0;
                        });
                        var radiusPaddingSquared = Math.pow(this.margin, 2);
                        var cellSize = Math.max(this._cellWidth, this._cellHeight);
                        var difference2D = core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Vector2[0];
                        var difference = core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Vector3[0];
                        for (var i = 0; i < meshes.length - 1; i++) {
                          for (var j = i + 1; j < meshes.length; j++) {
                            if (i != j) {
                              meshes[j].position.subtractToRef(meshes[i].position, difference);
                              difference2D.x = difference.x;
                              difference2D.y = difference.y;
                              var combinedRadius = cellSize;
                              var distance = difference2D.lengthSquared() - radiusPaddingSquared;
                              var minSeparation = Math.min(distance, radiusPaddingSquared);
                              distance -= minSeparation;
                              if (distance < Math.pow(combinedRadius, 2)) {
                                difference2D.normalize();
                                difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);
                                meshes[j].position.addInPlace(difference);
                                meshes[i].position.subtractInPlace(difference);
                              }
                            }
                          }
                        }
                      }
                    };
                    return ScatterPanel2;
                  }(_volumeBasedPanel__WEBPACK_IMPORTED_MODULE_2__.VolumeBasedPanel)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/controls/slider3D.js": (
              /*!*****************************************************!*\
                !*** ../../../lts/gui/dist/3D/controls/slider3D.js ***!
                \*****************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "Slider3D": () => (
                    /* binding */
                    Slider3D
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Loading/sceneLoader */
                  "core/Misc/perfCounter"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__);
                var _control3D__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./control3D */
                  "../../../lts/gui/dist/3D/controls/control3D.js"
                );
                var _materials_mrdl_mrdlSliderBarMaterial__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ../materials/mrdl/mrdlSliderBarMaterial */
                  "../../../lts/gui/dist/3D/materials/mrdl/mrdlSliderBarMaterial.js"
                );
                var _materials_mrdl_mrdlSliderThumbMaterial__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
                  /*! ../materials/mrdl/mrdlSliderThumbMaterial */
                  "../../../lts/gui/dist/3D/materials/mrdl/mrdlSliderThumbMaterial.js"
                );
                var _materials_mrdl_mrdlBackplateMaterial__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
                  /*! ../materials/mrdl/mrdlBackplateMaterial */
                  "../../../lts/gui/dist/3D/materials/mrdl/mrdlBackplateMaterial.js"
                );
                var SLIDER_MIN = 0;
                var SLIDER_MAX = 100;
                var SLIDER_VAL = 50;
                var SLIDER_STEP = 0;
                var SLIDER_SCALING = 1;
                var SLIDER_MARGIN = 0.2;
                var Slider3D = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Slider3D2, _super);
                    function Slider3D2(name, sliderBackplateVisible) {
                      var _this = _super.call(this, name) || this;
                      _this.onValueChangedObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this._sliderBackplateVisible = sliderBackplateVisible || false;
                      _this._minimum = SLIDER_MIN;
                      _this._maximum = SLIDER_MAX;
                      _this._step = SLIDER_STEP;
                      _this._value = SLIDER_VAL;
                      return _this;
                    }
                    Object.defineProperty(Slider3D2.prototype, "mesh", {
                      /**
                       * Gets the mesh used to render this control
                       */
                      get: function() {
                        if (this.node) {
                          return this._sliderThumb;
                        }
                        return null;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Slider3D2.prototype, "minimum", {
                      /** Gets or sets minimum value */
                      get: function() {
                        return this._minimum;
                      },
                      set: function(value) {
                        if (this._minimum === value) {
                          return;
                        }
                        this._minimum = Math.max(value, SLIDER_MIN);
                        this._value = Math.max(Math.min(this._value, this._maximum), this._minimum);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Slider3D2.prototype, "maximum", {
                      /** Gets or sets maximum value */
                      get: function() {
                        return this._maximum;
                      },
                      set: function(value) {
                        if (this._maximum === value) {
                          return;
                        }
                        this._maximum = Math.max(value, this._minimum);
                        this._value = Math.max(Math.min(this._value, this._maximum), this._minimum);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Slider3D2.prototype, "step", {
                      /** Gets or sets step value */
                      get: function() {
                        return this._step;
                      },
                      set: function(value) {
                        if (this._step === value) {
                          return;
                        }
                        this._step = Math.max(Math.min(value, this._maximum - this._minimum), SLIDER_STEP);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Slider3D2.prototype, "value", {
                      /** Gets or sets current value */
                      get: function() {
                        return this._value;
                      },
                      set: function(value) {
                        if (this._value === value) {
                          return;
                        }
                        this._value = Math.max(Math.min(value, this._maximum), this._minimum);
                        if (this._sliderThumb) {
                          this._sliderThumb.position.x = this._convertToPosition(this.value);
                        }
                        this.onValueChangedObservable.notifyObservers(this._value);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Slider3D2.prototype, "start", {
                      get: function() {
                        if (!this.node) {
                          return -SLIDER_SCALING / 2;
                        }
                        return this._sliderBar.position.x - this._sliderBar.scaling.x / 2;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Slider3D2.prototype, "end", {
                      get: function() {
                        if (!this.node) {
                          return SLIDER_SCALING / 2;
                        }
                        return this._sliderBar.position.x + this._sliderBar.scaling.x / 2;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Slider3D2.prototype, "sliderBarMaterial", {
                      /**
                       * Gets the slider bar material used by this control
                       */
                      get: function() {
                        return this._sliderBarMaterial;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Slider3D2.prototype, "sliderThumbMaterial", {
                      /**
                       * Gets the slider thumb material used by this control
                       */
                      get: function() {
                        return this._sliderThumbMaterial;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Slider3D2.prototype, "sliderBackplateMaterial", {
                      /**
                       * Gets the slider backplate material used by this control
                       */
                      get: function() {
                        return this._sliderBackplateMaterial;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(Slider3D2.prototype, "isVisible", {
                      /** Sets a boolean indicating if the control is visible */
                      set: function(value) {
                        var _a;
                        if (this._isVisible === value) {
                          return;
                        }
                        this._isVisible = value;
                        (_a = this.node) === null || _a === void 0 ? void 0 : _a.setEnabled(value);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Slider3D2.prototype._createNode = function(scene) {
                      var _this = this;
                      var sliderBackplate = (0, core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.CreateBox)("".concat(this.name, "_sliderbackplate"), {
                        width: 1,
                        height: 1,
                        depth: 1
                      }, scene);
                      sliderBackplate.isPickable = false;
                      sliderBackplate.visibility = 0;
                      sliderBackplate.scaling = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Vector3(1, 0.5, 0.8);
                      core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.SceneLoader.ImportMeshAsync(void 0, Slider3D2.MODEL_BASE_URL, Slider3D2.MODEL_FILENAME, scene).then(function(result) {
                        result.meshes.forEach(function(m) {
                          m.isPickable = false;
                        });
                        var sliderBackplateModel = result.meshes[1];
                        var sliderBarModel = result.meshes[1].clone("".concat(_this.name, "_sliderbar"), sliderBackplate);
                        var sliderThumbModel = result.meshes[1].clone("".concat(_this.name, "_sliderthumb"), sliderBackplate);
                        sliderBackplateModel.visibility = 0;
                        if (_this._sliderBackplateVisible) {
                          sliderBackplateModel.visibility = 1;
                          sliderBackplateModel.name = "".concat(_this.name, "_sliderbackplate");
                          sliderBackplateModel.scaling.x = 1;
                          sliderBackplateModel.scaling.z = 0.2;
                          sliderBackplateModel.parent = sliderBackplate;
                          if (_this._sliderBackplateMaterial) {
                            sliderBackplateModel.material = _this._sliderBackplateMaterial;
                          }
                          _this._sliderBackplate = sliderBackplateModel;
                        }
                        if (sliderBarModel) {
                          sliderBarModel.parent = sliderBackplate;
                          sliderBarModel.position.z = -0.1;
                          sliderBarModel.scaling = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Vector3(SLIDER_SCALING - SLIDER_MARGIN, 0.04, 0.3);
                          if (_this._sliderBarMaterial) {
                            sliderBarModel.material = _this._sliderBarMaterial;
                          }
                          _this._sliderBar = sliderBarModel;
                        }
                        if (sliderThumbModel) {
                          sliderThumbModel.parent = sliderBackplate;
                          sliderThumbModel.isPickable = true;
                          sliderThumbModel.position.z = -0.115;
                          sliderThumbModel.scaling = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Vector3(0.025, 0.3, 0.6);
                          sliderThumbModel.position.x = _this._convertToPosition(_this.value);
                          sliderThumbModel.addBehavior(_this._createBehavior());
                          if (_this._sliderThumbMaterial) {
                            sliderThumbModel.material = _this._sliderThumbMaterial;
                          }
                          _this._sliderThumb = sliderThumbModel;
                        }
                        _this._injectGUI3DReservedDataStore(sliderBackplate).control = _this;
                        sliderBackplate.getChildMeshes().forEach(function(mesh) {
                          _this._injectGUI3DReservedDataStore(mesh).control = _this;
                        });
                      });
                      this._affectMaterial(sliderBackplate);
                      return sliderBackplate;
                    };
                    Slider3D2.prototype._affectMaterial = function(mesh) {
                      var _a, _b, _c;
                      this._sliderBackplateMaterial = (_a = this._sliderBackplateMaterial) !== null && _a !== void 0 ? _a : new _materials_mrdl_mrdlBackplateMaterial__WEBPACK_IMPORTED_MODULE_5__.MRDLBackplateMaterial("".concat(this.name, "_sliderbackplate_material"), mesh.getScene());
                      this._sliderBarMaterial = (_b = this._sliderBarMaterial) !== null && _b !== void 0 ? _b : new _materials_mrdl_mrdlSliderBarMaterial__WEBPACK_IMPORTED_MODULE_3__.MRDLSliderBarMaterial("".concat(this.name, "_sliderbar_material"), mesh.getScene());
                      this._sliderThumbMaterial = (_c = this._sliderThumbMaterial) !== null && _c !== void 0 ? _c : new _materials_mrdl_mrdlSliderThumbMaterial__WEBPACK_IMPORTED_MODULE_4__.MRDLSliderThumbMaterial("".concat(this.name, "_sliderthumb_material"), mesh.getScene());
                    };
                    Slider3D2.prototype._createBehavior = function() {
                      var _this = this;
                      var pointerDragBehavior = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.PointerDragBehavior({ dragAxis: core_Misc_observable__WEBPACK_IMPORTED_MODULE_1__.Vector3.Right() });
                      pointerDragBehavior.moveAttached = false;
                      pointerDragBehavior.onDragStartObservable.add(function() {
                        _this._draggedPosition = _this._sliderThumb.position.x;
                      });
                      pointerDragBehavior.onDragObservable.add(function(event) {
                        _this._draggedPosition += event.dragDistance / _this.scaling.x;
                        _this.value = _this._convertToValue(_this._draggedPosition);
                      });
                      return pointerDragBehavior;
                    };
                    Slider3D2.prototype._convertToPosition = function(value) {
                      var position = (value - this.minimum) / (this.maximum - this.minimum) * (this.end - this.start) + this.start;
                      return Math.min(Math.max(position, this.start), this.end);
                    };
                    Slider3D2.prototype._convertToValue = function(position) {
                      var value = (position - this.start) / (this.end - this.start) * (this.maximum - this.minimum);
                      value = this.step ? Math.round(value / this.step) * this.step : value;
                      return Math.max(Math.min(this.minimum + value, this._maximum), this._minimum);
                    };
                    Slider3D2.prototype.dispose = function() {
                      var _a, _b, _c, _d, _e, _f;
                      _super.prototype.dispose.call(this);
                      (_a = this._sliderBar) === null || _a === void 0 ? void 0 : _a.dispose();
                      (_b = this._sliderThumb) === null || _b === void 0 ? void 0 : _b.dispose();
                      (_c = this._sliderBarMaterial) === null || _c === void 0 ? void 0 : _c.dispose();
                      (_d = this._sliderThumbMaterial) === null || _d === void 0 ? void 0 : _d.dispose();
                      (_e = this._sliderBackplate) === null || _e === void 0 ? void 0 : _e.dispose();
                      (_f = this._sliderBackplateMaterial) === null || _f === void 0 ? void 0 : _f.dispose();
                    };
                    Slider3D2.MODEL_BASE_URL = "https://assets.babylonjs.com/meshes/MRTK/";
                    Slider3D2.MODEL_FILENAME = "mrtk-fluent-backplate.glb";
                    return Slider3D2;
                  }(_control3D__WEBPACK_IMPORTED_MODULE_2__.Control3D)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/controls/spherePanel.js": (
              /*!********************************************************!*\
                !*** ../../../lts/gui/dist/3D/controls/spherePanel.js ***!
                \********************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "SpherePanel": () => (
                    /* binding */
                    SpherePanel
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Maths/math.axis */
                  "core/Misc/perfCounter"
                );
                var core_Misc_tools__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__);
                var _volumeBasedPanel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./volumeBasedPanel */
                  "../../../lts/gui/dist/3D/controls/volumeBasedPanel.js"
                );
                var _container3D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./container3D */
                  "../../../lts/gui/dist/3D/controls/container3D.js"
                );
                var SpherePanel = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(SpherePanel2, _super);
                    function SpherePanel2() {
                      var _this = _super !== null && _super.apply(this, arguments) || this;
                      _this._radius = 5;
                      return _this;
                    }
                    Object.defineProperty(SpherePanel2.prototype, "radius", {
                      /**
                       * Gets or sets the radius of the sphere where to project controls (5 by default)
                       */
                      get: function() {
                        return this._radius;
                      },
                      set: function(value) {
                        var _this = this;
                        if (this._radius === value) {
                          return;
                        }
                        this._radius = value;
                        core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Tools.SetImmediate(function() {
                          _this._arrangeChildren();
                        });
                      },
                      enumerable: false,
                      configurable: true
                    });
                    SpherePanel2.prototype._mapGridNode = function(control, nodePosition) {
                      var mesh = control.mesh;
                      if (!mesh) {
                        return;
                      }
                      var newPos = this._sphericalMapping(nodePosition);
                      control.position = newPos;
                      switch (this.orientation) {
                        case _container3D__WEBPACK_IMPORTED_MODULE_3__.Container3D.FACEORIGIN_ORIENTATION:
                          mesh.lookAt(new core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));
                          break;
                        case _container3D__WEBPACK_IMPORTED_MODULE_3__.Container3D.FACEORIGINREVERSED_ORIENTATION:
                          mesh.lookAt(new core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Vector3(-newPos.x, -newPos.y, -newPos.z));
                          break;
                        case _container3D__WEBPACK_IMPORTED_MODULE_3__.Container3D.FACEFORWARD_ORIENTATION:
                          break;
                        case _container3D__WEBPACK_IMPORTED_MODULE_3__.Container3D.FACEFORWARDREVERSED_ORIENTATION:
                          mesh.rotate(core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Axis.Y, Math.PI, core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Space.LOCAL);
                          break;
                      }
                    };
                    SpherePanel2.prototype._sphericalMapping = function(source) {
                      var newPos = new core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, this._radius);
                      var xAngle = source.y / this._radius;
                      var yAngle = -(source.x / this._radius);
                      core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Matrix[0]);
                      return core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Vector3.TransformNormal(newPos, core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Matrix[0]);
                    };
                    return SpherePanel2;
                  }(_volumeBasedPanel__WEBPACK_IMPORTED_MODULE_2__.VolumeBasedPanel)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/controls/stackPanel3D.js": (
              /*!*********************************************************!*\
                !*** ../../../lts/gui/dist/3D/controls/stackPanel3D.js ***!
                \*********************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "StackPanel3D": () => (
                    /* binding */
                    StackPanel3D
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Maths/math.vector */
                  "core/Misc/perfCounter"
                );
                var core_Misc_tools__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__);
                var _container3D__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./container3D */
                  "../../../lts/gui/dist/3D/controls/container3D.js"
                );
                var StackPanel3D = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(StackPanel3D2, _super);
                    function StackPanel3D2(isVertical) {
                      if (isVertical === void 0) {
                        isVertical = false;
                      }
                      var _this = _super.call(this) || this;
                      _this._isVertical = false;
                      _this.margin = 0.1;
                      _this._isVertical = isVertical;
                      return _this;
                    }
                    Object.defineProperty(StackPanel3D2.prototype, "isVertical", {
                      /**
                       * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)
                       */
                      get: function() {
                        return this._isVertical;
                      },
                      set: function(value) {
                        var _this = this;
                        if (this._isVertical === value) {
                          return;
                        }
                        this._isVertical = value;
                        core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Tools.SetImmediate(function() {
                          _this._arrangeChildren();
                        });
                      },
                      enumerable: false,
                      configurable: true
                    });
                    StackPanel3D2.prototype._arrangeChildren = function() {
                      var width = 0;
                      var height = 0;
                      var controlCount = 0;
                      var extendSizes = [];
                      var currentInverseWorld = core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Matrix.Invert(this.node.computeWorldMatrix(true));
                      for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
                        var child = _a[_i];
                        if (!child.mesh) {
                          continue;
                        }
                        controlCount++;
                        child.mesh.computeWorldMatrix(true);
                        child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Matrix[0]);
                        var boundingBox = child.mesh.getBoundingInfo().boundingBox;
                        var extendSize = core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Vector3.TransformNormal(boundingBox.extendSize, core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Matrix[0]);
                        extendSizes.push(extendSize);
                        if (this._isVertical) {
                          height += extendSize.y;
                        } else {
                          width += extendSize.x;
                        }
                      }
                      if (this._isVertical) {
                        height += (controlCount - 1) * this.margin / 2;
                      } else {
                        width += (controlCount - 1) * this.margin / 2;
                      }
                      var offset;
                      if (this._isVertical) {
                        offset = -height;
                      } else {
                        offset = -width;
                      }
                      var index = 0;
                      for (var _b = 0, _c = this._children; _b < _c.length; _b++) {
                        var child = _c[_b];
                        if (!child.mesh) {
                          continue;
                        }
                        controlCount--;
                        var extendSize = extendSizes[index++];
                        if (this._isVertical) {
                          child.position.y = offset + extendSize.y;
                          child.position.x = 0;
                          offset += extendSize.y * 2;
                        } else {
                          child.position.x = offset + extendSize.x;
                          child.position.y = 0;
                          offset += extendSize.x * 2;
                        }
                        offset += controlCount > 0 ? this.margin : 0;
                      }
                    };
                    return StackPanel3D2;
                  }(_container3D__WEBPACK_IMPORTED_MODULE_2__.Container3D)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/controls/touchButton3D.js": (
              /*!**********************************************************!*\
                !*** ../../../lts/gui/dist/3D/controls/touchButton3D.js ***!
                \**********************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "TouchButton3D": () => (
                    /* binding */
                    TouchButton3D
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Misc/observable */
                  "core/Misc/perfCounter"
                );
                var core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__);
                var _button3D__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./button3D */
                  "../../../lts/gui/dist/3D/controls/button3D.js"
                );
                var TouchButton3D = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(TouchButton3D2, _super);
                    function TouchButton3D2(name, collisionMesh) {
                      var _this = _super.call(this, name) || this;
                      _this._isNearPressed = false;
                      _this._interactionSurfaceHeight = 0;
                      _this._isToggleButton = false;
                      _this._toggleState = false;
                      _this._toggleButtonCallback = function() {
                        _this._onToggle(!_this._toggleState);
                      };
                      _this.onToggleObservable = new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Observable();
                      _this.collidableFrontDirection = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.Zero();
                      if (collisionMesh) {
                        _this.collisionMesh = collisionMesh;
                      }
                      return _this;
                    }
                    Object.defineProperty(TouchButton3D2.prototype, "isActiveNearInteraction", {
                      /**
                       * Whether the current interaction is caused by near interaction or not
                       */
                      get: function() {
                        return this._isNearPressed;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TouchButton3D2.prototype, "collidableFrontDirection", {
                      /**
                       * Returns the front-facing direction of the button, or Vector3.Zero if there is no 'front'
                       */
                      get: function() {
                        if (this._collisionMesh) {
                          var transformedDirection = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Vector3[0];
                          core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.TransformNormalToRef(this._collidableFrontDirection, this._collisionMesh.getWorldMatrix(), transformedDirection);
                          return transformedDirection.normalize();
                        }
                        return this._collidableFrontDirection;
                      },
                      /**
                       * Sets the front-facing direction of the button. Pass in Vector3.Zero to allow interactions from any direction
                       * @param frontWorldDir the forward direction of the button
                       */
                      set: function(frontWorldDir) {
                        this._collidableFrontDirection = frontWorldDir.normalize();
                        if (this._collisionMesh) {
                          var invert = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Matrix[0];
                          invert.copyFrom(this._collisionMesh.getWorldMatrix());
                          invert.invert();
                          core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.TransformNormalToRef(this._collidableFrontDirection, invert, this._collidableFrontDirection);
                          this._collidableFrontDirection.normalize();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TouchButton3D2.prototype, "collisionMesh", {
                      /**
                       * Sets the mesh used for testing input collision
                       * @param collisionMesh the new collision mesh for the button
                       */
                      set: function(collisionMesh) {
                        var _this = this;
                        var _a;
                        if (this._collisionMesh) {
                          this._collisionMesh.isNearPickable = false;
                          if ((_a = this._collisionMesh.reservedDataStore) === null || _a === void 0 ? void 0 : _a.GUI3D) {
                            this._collisionMesh.reservedDataStore.GUI3D = {};
                          }
                          this._collisionMesh.getChildMeshes().forEach(function(mesh) {
                            var _a2;
                            mesh.isNearPickable = false;
                            if ((_a2 = mesh.reservedDataStore) === null || _a2 === void 0 ? void 0 : _a2.GUI3D) {
                              mesh.reservedDataStore.GUI3D = {};
                            }
                          });
                        }
                        this._collisionMesh = collisionMesh;
                        this._injectGUI3DReservedDataStore(this._collisionMesh).control = this;
                        this._collisionMesh.isNearPickable = true;
                        this._collisionMesh.getChildMeshes().forEach(function(mesh) {
                          _this._injectGUI3DReservedDataStore(mesh).control = _this;
                          mesh.isNearPickable = true;
                        });
                        this.collidableFrontDirection = collisionMesh.forward;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TouchButton3D2.prototype, "isToggleButton", {
                      get: function() {
                        return this._isToggleButton;
                      },
                      /**
                       * Setter for if this TouchButton3D should be treated as a toggle button
                       * @param value If this TouchHolographicButton should act like a toggle button
                       */
                      set: function(value) {
                        if (value === this._isToggleButton) {
                          return;
                        }
                        this._isToggleButton = value;
                        if (value) {
                          this.onPointerUpObservable.add(this._toggleButtonCallback);
                        } else {
                          this.onPointerUpObservable.removeCallback(this._toggleButtonCallback);
                          if (this._toggleState) {
                            this._onToggle(false);
                          }
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TouchButton3D2.prototype, "isToggled", {
                      get: function() {
                        return this._toggleState;
                      },
                      /**
                       * A public entrypoint to set the toggle state of the TouchHolographicButton. Only works if 'isToggleButton' is true
                       * @param newState The new state to set the TouchHolographicButton's toggle state to
                       */
                      set: function(newState) {
                        if (this._isToggleButton && this._toggleState !== newState) {
                          this._onToggle(newState);
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    TouchButton3D2.prototype._onToggle = function(newState) {
                      this._toggleState = newState;
                      this.onToggleObservable.notifyObservers(newState);
                    };
                    TouchButton3D2.prototype._isInteractionInFrontOfButton = function(collidablePos) {
                      return this._getInteractionHeight(collidablePos, this._collisionMesh.getAbsolutePosition()) > 0;
                    };
                    TouchButton3D2.prototype.getPressDepth = function(touchPoint) {
                      if (!this._isNearPressed) {
                        return 0;
                      }
                      var interactionHeight = this._getInteractionHeight(touchPoint, this._collisionMesh.getAbsolutePosition());
                      return this._interactionSurfaceHeight - interactionHeight;
                    };
                    TouchButton3D2.prototype._getInteractionHeight = function(interactionPos, basePos) {
                      var frontDir = this.collidableFrontDirection;
                      if (frontDir.length() === 0) {
                        return core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.Distance(interactionPos, basePos);
                      }
                      var d = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.Dot(basePos, frontDir);
                      var abc = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.Dot(interactionPos, frontDir);
                      return abc - d;
                    };
                    TouchButton3D2.prototype._generatePointerEventType = function(providedType, nearMeshPosition, activeInteractionCount) {
                      if (providedType === core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.PointerEventTypes.POINTERDOWN || providedType === core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.PointerEventTypes.POINTERMOVE) {
                        if (!this._isInteractionInFrontOfButton(nearMeshPosition)) {
                          return core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.PointerEventTypes.POINTERMOVE;
                        } else {
                          this._isNearPressed = true;
                          this._interactionSurfaceHeight = this._getInteractionHeight(nearMeshPosition, this._collisionMesh.getAbsolutePosition());
                        }
                      }
                      if (providedType === core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.PointerEventTypes.POINTERUP) {
                        if (activeInteractionCount == 0) {
                          return core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.PointerEventTypes.POINTERMOVE;
                        } else {
                          this._isNearPressed = false;
                        }
                      }
                      return providedType;
                    };
                    TouchButton3D2.prototype._getTypeName = function() {
                      return "TouchButton3D";
                    };
                    TouchButton3D2.prototype._createNode = function(scene) {
                      return _super.prototype._createNode.call(this, scene);
                    };
                    TouchButton3D2.prototype.dispose = function() {
                      _super.prototype.dispose.call(this);
                      this.onPointerUpObservable.removeCallback(this._toggleButtonCallback);
                      this.onToggleObservable.clear();
                      if (this._collisionMesh) {
                        this._collisionMesh.dispose();
                      }
                    };
                    return TouchButton3D2;
                  }(_button3D__WEBPACK_IMPORTED_MODULE_2__.Button3D)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/controls/touchHolographicButton.js": (
              /*!*******************************************************************!*\
                !*** ../../../lts/gui/dist/3D/controls/touchHolographicButton.js ***!
                \*******************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "TouchHolographicButton": () => (
                    /* binding */
                    TouchHolographicButton
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Maths/math.scalar */
                  "core/Misc/perfCounter"
                );
                var core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__);
                var _materials_fluent_fluentMaterial__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ../materials/fluent/fluentMaterial */
                  "../../../lts/gui/dist/3D/materials/fluent/fluentMaterial.js"
                );
                var _materials_fluentButton_fluentButtonMaterial__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ../materials/fluentButton/fluentButtonMaterial */
                  "../../../lts/gui/dist/3D/materials/fluentButton/fluentButtonMaterial.js"
                );
                var _2D_controls_stackPanel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
                  /*! ../../2D/controls/stackPanel */
                  "../../../lts/gui/dist/2D/controls/stackPanel.js"
                );
                var _2D_controls_image__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
                  /*! ../../2D/controls/image */
                  "../../../lts/gui/dist/2D/controls/image.js"
                );
                var _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
                  /*! ../../2D/controls/textBlock */
                  "../../../lts/gui/dist/2D/controls/textBlock.js"
                );
                var _2D_advancedDynamicTexture__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
                  /*! ../../2D/advancedDynamicTexture */
                  "../../../lts/gui/dist/2D/advancedDynamicTexture.js"
                );
                var _touchButton3D__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__2(
                  /*! ./touchButton3D */
                  "../../../lts/gui/dist/3D/controls/touchButton3D.js"
                );
                var TouchHolographicButton = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(TouchHolographicButton2, _super);
                    function TouchHolographicButton2(name, shareMaterials) {
                      if (shareMaterials === void 0) {
                        shareMaterials = true;
                      }
                      var _this = _super.call(this, name) || this;
                      _this._shareMaterials = true;
                      _this._isBackplateVisible = true;
                      _this._frontPlateDepth = 0.5;
                      _this._backPlateDepth = 0.04;
                      _this._backplateColor = new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Color3(0.08, 0.15, 0.55);
                      _this._backplateToggledColor = new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Color3(0.25, 0.4, 0.95);
                      _this._shareMaterials = shareMaterials;
                      _this.pointerEnterAnimation = function() {
                        _this._frontMaterial.leftBlobEnable = true;
                        _this._frontMaterial.rightBlobEnable = true;
                      };
                      _this.pointerOutAnimation = function() {
                        _this._frontMaterial.leftBlobEnable = false;
                        _this._frontMaterial.rightBlobEnable = false;
                      };
                      _this.pointerDownAnimation = function() {
                        if (_this._frontPlate && !_this.isActiveNearInteraction) {
                          _this._frontPlate.scaling.z = _this._frontPlateDepth * 0.2;
                          _this._frontPlate.position = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.Forward(_this._frontPlate._scene.useRightHandedSystem).scale((_this._frontPlateDepth - 0.2 * _this._frontPlateDepth) / 2);
                          _this._textPlate.position = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.Forward(_this._textPlate._scene.useRightHandedSystem).scale(-(_this._backPlateDepth + 0.2 * _this._frontPlateDepth) / 2);
                        }
                      };
                      _this.pointerUpAnimation = function() {
                        if (_this._frontPlate) {
                          _this._frontPlate.scaling.z = _this._frontPlateDepth;
                          _this._frontPlate.position = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.Forward(_this._frontPlate._scene.useRightHandedSystem).scale((_this._frontPlateDepth - _this._frontPlateDepth) / 2);
                          _this._textPlate.position = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.Forward(_this._textPlate._scene.useRightHandedSystem).scale(-(_this._backPlateDepth + _this._frontPlateDepth) / 2);
                        }
                      };
                      _this.onPointerMoveObservable.add(function(position) {
                        if (_this._frontPlate && _this.isActiveNearInteraction) {
                          var scale = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.Zero();
                          if (_this._backPlate.getWorldMatrix().decompose(scale, void 0, void 0)) {
                            var interactionHeight = _this._getInteractionHeight(position, _this._backPlate.getAbsolutePosition()) / scale.z;
                            interactionHeight = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Scalar.Clamp(interactionHeight - _this._backPlateDepth / 2, 0.2 * _this._frontPlateDepth, _this._frontPlateDepth);
                            _this._frontPlate.scaling.z = interactionHeight;
                            _this._frontPlate.position = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.Forward(_this._frontPlate._scene.useRightHandedSystem).scale((_this._frontPlateDepth - interactionHeight) / 2);
                            _this._textPlate.position = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.Forward(_this._textPlate._scene.useRightHandedSystem).scale(-(_this._backPlateDepth + interactionHeight) / 2);
                          }
                        }
                      });
                      _this._pointerHoverObserver = _this.onPointerMoveObservable.add(function(hoverPosition) {
                        _this._frontMaterial.globalLeftIndexTipPosition = hoverPosition;
                      });
                      return _this;
                    }
                    TouchHolographicButton2.prototype._disposeTooltip = function() {
                      this._tooltipFade = null;
                      if (this._tooltipTextBlock) {
                        this._tooltipTextBlock.dispose();
                      }
                      if (this._tooltipTexture) {
                        this._tooltipTexture.dispose();
                      }
                      if (this._tooltipMesh) {
                        this._tooltipMesh.dispose();
                      }
                      this.onPointerEnterObservable.remove(this._tooltipHoverObserver);
                      this.onPointerOutObservable.remove(this._tooltipOutObserver);
                    };
                    Object.defineProperty(TouchHolographicButton2.prototype, "renderingGroupId", {
                      get: function() {
                        return this._backPlate.renderingGroupId;
                      },
                      /**
                       * Rendering ground id of all the mesh in the button
                       */
                      set: function(id) {
                        this._backPlate.renderingGroupId = id;
                        this._textPlate.renderingGroupId = id;
                        this._frontPlate.renderingGroupId = id;
                        if (this._tooltipMesh) {
                          this._tooltipMesh.renderingGroupId = id;
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TouchHolographicButton2.prototype, "mesh", {
                      /**
                       * Gets the mesh used to render this control
                       */
                      get: function() {
                        return this._backPlate;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TouchHolographicButton2.prototype, "tooltipText", {
                      get: function() {
                        if (this._tooltipTextBlock) {
                          return this._tooltipTextBlock.text;
                        }
                        return null;
                      },
                      /**
                       * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)
                       */
                      set: function(text) {
                        var _this = this;
                        if (!text) {
                          this._disposeTooltip();
                          return;
                        }
                        if (!this._tooltipFade) {
                          var rightHandedScene = this._backPlate._scene.useRightHandedSystem;
                          this._tooltipMesh = (0, core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.CreatePlane)("", { size: 1 }, this._backPlate._scene);
                          var tooltipBackground = (0, core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.CreatePlane)("", { size: 1, sideOrientation: core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Mesh.DOUBLESIDE }, this._backPlate._scene);
                          var mat = new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.StandardMaterial("", this._backPlate._scene);
                          mat.diffuseColor = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Color3.FromHexString("#212121");
                          tooltipBackground.material = mat;
                          tooltipBackground.isPickable = false;
                          this._tooltipMesh.addChild(tooltipBackground);
                          tooltipBackground.position = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.Forward(rightHandedScene).scale(0.05);
                          this._tooltipMesh.scaling.y = 1 / 3;
                          this._tooltipMesh.position = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.Up().scale(0.7).add(core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.Forward(rightHandedScene).scale(-0.15));
                          this._tooltipMesh.isPickable = false;
                          this._tooltipMesh.parent = this._backPlate;
                          this._tooltipTexture = _2D_advancedDynamicTexture__WEBPACK_IMPORTED_MODULE_7__.AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);
                          this._tooltipTextBlock = new _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_6__.TextBlock();
                          this._tooltipTextBlock.scaleY = 3;
                          this._tooltipTextBlock.color = "white";
                          this._tooltipTextBlock.fontSize = 130;
                          this._tooltipTexture.addControl(this._tooltipTextBlock);
                          this._tooltipFade = new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.FadeInOutBehavior();
                          this._tooltipFade.delay = 500;
                          this._tooltipMesh.addBehavior(this._tooltipFade);
                          this._tooltipHoverObserver = this.onPointerEnterObservable.add(function() {
                            if (_this._tooltipFade) {
                              _this._tooltipFade.fadeIn(true);
                            }
                          });
                          this._tooltipOutObserver = this.onPointerOutObservable.add(function() {
                            if (_this._tooltipFade) {
                              _this._tooltipFade.fadeIn(false);
                            }
                          });
                        }
                        if (this._tooltipTextBlock) {
                          this._tooltipTextBlock.text = text;
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TouchHolographicButton2.prototype, "text", {
                      /**
                       * Gets or sets text for the button
                       */
                      get: function() {
                        return this._text;
                      },
                      set: function(value) {
                        if (this._text === value) {
                          return;
                        }
                        this._text = value;
                        this._rebuildContent();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TouchHolographicButton2.prototype, "imageUrl", {
                      /**
                       * Gets or sets the image url for the button
                       */
                      get: function() {
                        return this._imageUrl;
                      },
                      set: function(value) {
                        if (this._imageUrl === value) {
                          return;
                        }
                        this._imageUrl = value;
                        this._rebuildContent();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TouchHolographicButton2.prototype, "backMaterial", {
                      /**
                       * Gets the back material used by this button
                       */
                      get: function() {
                        return this._backMaterial;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TouchHolographicButton2.prototype, "frontMaterial", {
                      /**
                       * Gets the front material used by this button
                       */
                      get: function() {
                        return this._frontMaterial;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TouchHolographicButton2.prototype, "plateMaterial", {
                      /**
                       * Gets the plate material used by this button
                       */
                      get: function() {
                        return this._plateMaterial;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TouchHolographicButton2.prototype, "shareMaterials", {
                      /**
                       * Gets a boolean indicating if this button shares its material with other HolographicButtons
                       */
                      get: function() {
                        return this._shareMaterials;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(TouchHolographicButton2.prototype, "isBackplateVisible", {
                      /**
                       * Sets whether the backplate is visible or hidden. Hiding the backplate is not recommended without some sort of replacement
                       */
                      set: function(isVisible) {
                        if (this.mesh && !!this._backMaterial) {
                          if (isVisible && !this._isBackplateVisible) {
                            this._backPlate.visibility = 1;
                          } else if (!isVisible && this._isBackplateVisible) {
                            this._backPlate.visibility = 0;
                          }
                        }
                        this._isBackplateVisible = isVisible;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    TouchHolographicButton2.prototype._getTypeName = function() {
                      return "TouchHolographicButton";
                    };
                    TouchHolographicButton2.prototype._rebuildContent = function() {
                      this._disposeFacadeTexture();
                      var panel = new _2D_controls_stackPanel__WEBPACK_IMPORTED_MODULE_4__.StackPanel();
                      panel.isVertical = true;
                      if (core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.DomManagement.IsDocumentAvailable() && !!document.createElement) {
                        if (this._imageUrl) {
                          var image = new _2D_controls_image__WEBPACK_IMPORTED_MODULE_5__.Image();
                          image.source = this._imageUrl;
                          image.paddingTop = "40px";
                          image.height = "180px";
                          image.width = "100px";
                          image.paddingBottom = "40px";
                          panel.addControl(image);
                        }
                      }
                      if (this._text) {
                        var text = new _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_6__.TextBlock();
                        text.text = this._text;
                        text.color = "white";
                        text.height = "30px";
                        text.fontSize = 24;
                        panel.addControl(text);
                      }
                      this.content = panel;
                    };
                    TouchHolographicButton2.prototype._createNode = function(scene) {
                      var _this = this;
                      var _a;
                      this.name = (_a = this.name) !== null && _a !== void 0 ? _a : "TouchHolographicButton";
                      var collisionMesh = (0, core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.CreateBox)("".concat(this.name, "_collisionMesh"), {
                        width: 1,
                        height: 1,
                        depth: this._frontPlateDepth
                      }, scene);
                      collisionMesh.isPickable = true;
                      collisionMesh.isNearPickable = true;
                      collisionMesh.visibility = 0;
                      collisionMesh.position = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.Forward(scene.useRightHandedSystem).scale(-this._frontPlateDepth / 2);
                      core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.SceneLoader.ImportMeshAsync(void 0, TouchHolographicButton2.MODEL_BASE_URL, TouchHolographicButton2.MODEL_FILENAME, scene).then(function(result) {
                        var alphaMesh = (0, core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.CreateBox)("${this.name}_alphaMesh", {
                          width: 1,
                          height: 1,
                          depth: 1
                        }, scene);
                        alphaMesh.isPickable = false;
                        alphaMesh.material = new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.StandardMaterial("${this.name}_alphaMesh_material", scene);
                        alphaMesh.material.alpha = 0.15;
                        var importedFrontPlate = result.meshes[1];
                        importedFrontPlate.name = "".concat(_this.name, "_frontPlate");
                        importedFrontPlate.isPickable = false;
                        importedFrontPlate.scaling.z = _this._frontPlateDepth;
                        alphaMesh.parent = importedFrontPlate;
                        importedFrontPlate.parent = collisionMesh;
                        if (_this._frontMaterial) {
                          importedFrontPlate.material = _this._frontMaterial;
                        }
                        _this._frontPlate = importedFrontPlate;
                      });
                      this._backPlate = (0, core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.CreateBox)("".concat(this.name, "_backPlate"), {
                        width: 1,
                        height: 1,
                        depth: this._backPlateDepth
                      }, scene);
                      this._backPlate.position = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.Forward(scene.useRightHandedSystem).scale(this._backPlateDepth / 2);
                      this._backPlate.isPickable = false;
                      this._textPlate = _super.prototype._createNode.call(this, scene);
                      this._textPlate.name = "".concat(this.name, "_textPlate");
                      this._textPlate.isPickable = false;
                      this._textPlate.position = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.Forward(scene.useRightHandedSystem).scale(-this._frontPlateDepth / 2);
                      this._backPlate.addChild(collisionMesh);
                      this._backPlate.addChild(this._textPlate);
                      var tn = new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.TransformNode("{this.name}_root", scene);
                      this._backPlate.setParent(tn);
                      this.collisionMesh = collisionMesh;
                      this.collidableFrontDirection = this._backPlate.forward.negate();
                      return tn;
                    };
                    TouchHolographicButton2.prototype._applyFacade = function(facadeTexture) {
                      this._plateMaterial.emissiveTexture = facadeTexture;
                      this._plateMaterial.opacityTexture = facadeTexture;
                      this._plateMaterial.diffuseColor = new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Color3(0.4, 0.4, 0.4);
                    };
                    TouchHolographicButton2.prototype._createBackMaterial = function(mesh) {
                      this._backMaterial = new _materials_fluent_fluentMaterial__WEBPACK_IMPORTED_MODULE_2__.FluentMaterial(this.name + "backPlateMaterial", mesh.getScene());
                      this._backMaterial.albedoColor = this._backplateColor;
                      this._backMaterial.renderBorders = true;
                      this._backMaterial.renderHoverLight = false;
                    };
                    TouchHolographicButton2.prototype._createFrontMaterial = function(mesh) {
                      this._frontMaterial = new _materials_fluentButton_fluentButtonMaterial__WEBPACK_IMPORTED_MODULE_3__.FluentButtonMaterial(this.name + "Front Material", mesh.getScene());
                    };
                    TouchHolographicButton2.prototype._createPlateMaterial = function(mesh) {
                      this._plateMaterial = new core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.StandardMaterial(this.name + "Plate Material", mesh.getScene());
                      this._plateMaterial.specularColor = core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Color3.Black();
                    };
                    TouchHolographicButton2.prototype._onToggle = function(newState) {
                      if (this._backMaterial) {
                        if (newState) {
                          this._backMaterial.albedoColor = this._backplateToggledColor;
                        } else {
                          this._backMaterial.albedoColor = this._backplateColor;
                        }
                      }
                      _super.prototype._onToggle.call(this, newState);
                    };
                    TouchHolographicButton2.prototype._affectMaterial = function(mesh) {
                      if (this._shareMaterials) {
                        if (!this._host._touchSharedMaterials["backFluentMaterial"]) {
                          this._createBackMaterial(mesh);
                          this._host._touchSharedMaterials["backFluentMaterial"] = this._backMaterial;
                        } else {
                          this._backMaterial = this._host._touchSharedMaterials["backFluentMaterial"];
                        }
                        if (!this._host._touchSharedMaterials["frontFluentMaterial"]) {
                          this._createFrontMaterial(mesh);
                          this._host._touchSharedMaterials["frontFluentMaterial"] = this._frontMaterial;
                        } else {
                          this._frontMaterial = this._host._touchSharedMaterials["frontFluentMaterial"];
                        }
                      } else {
                        this._createBackMaterial(mesh);
                        this._createFrontMaterial(mesh);
                      }
                      this._createPlateMaterial(mesh);
                      this._backPlate.material = this._backMaterial;
                      this._textPlate.material = this._plateMaterial;
                      if (!this._isBackplateVisible) {
                        this._backPlate.visibility = 0;
                      }
                      if (this._frontPlate) {
                        this._frontPlate.material = this._frontMaterial;
                      }
                      this._rebuildContent();
                    };
                    TouchHolographicButton2.prototype.dispose = function() {
                      _super.prototype.dispose.call(this);
                      this._disposeTooltip();
                      this.onPointerMoveObservable.remove(this._pointerHoverObserver);
                      if (!this.shareMaterials) {
                        this._backMaterial.dispose();
                        this._frontMaterial.dispose();
                        this._plateMaterial.dispose();
                        if (this._pickedPointObserver) {
                          this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);
                          this._pickedPointObserver = null;
                        }
                      }
                    };
                    TouchHolographicButton2.MODEL_BASE_URL = "https://assets.babylonjs.com/meshes/MRTK/";
                    TouchHolographicButton2.MODEL_FILENAME = "mrtk-fluent-button.glb";
                    return TouchHolographicButton2;
                  }(_touchButton3D__WEBPACK_IMPORTED_MODULE_8__.TouchButton3D)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/controls/touchHolographicMenu.js": (
              /*!*****************************************************************!*\
                !*** ../../../lts/gui/dist/3D/controls/touchHolographicMenu.js ***!
                \*****************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "TouchHolographicMenu": () => (
                    /* binding */
                    TouchHolographicMenu
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var _volumeBasedPanel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./volumeBasedPanel */
                  "../../../lts/gui/dist/3D/controls/volumeBasedPanel.js"
                );
                var core_Meshes_mesh__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! core/Misc/logger */
                  "core/Misc/perfCounter"
                );
                var core_Meshes_mesh__WEBPACK_IMPORTED_MODULE_2___default = __webpack_require__2.n(core_Meshes_mesh__WEBPACK_IMPORTED_MODULE_2__);
                var _materials_fluent_fluentMaterial__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ../materials/fluent/fluentMaterial */
                  "../../../lts/gui/dist/3D/materials/fluent/fluentMaterial.js"
                );
                var TouchHolographicMenu = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(TouchHolographicMenu2, _super);
                    function TouchHolographicMenu2(name) {
                      var _this = _super.call(this, name) || this;
                      _this._backPlateMargin = 1.25;
                      return _this;
                    }
                    Object.defineProperty(TouchHolographicMenu2.prototype, "backPlateMargin", {
                      /**
                       * Gets or sets the margin size of the backplate in button size units.
                       * Setting this to 1, will make the backPlate margin the size of 1 button
                       */
                      get: function() {
                        return this._backPlateMargin;
                      },
                      set: function(value) {
                        var _this = this;
                        this._backPlateMargin = value;
                        if (this._children.length >= 1) {
                          this.children.forEach(function(control) {
                            _this._updateCurrentMinMax(control.position);
                          });
                          this._updateMargins();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    TouchHolographicMenu2.prototype._createNode = function(scene) {
                      var node = new core_Meshes_mesh__WEBPACK_IMPORTED_MODULE_2__.Mesh("menu_".concat(this.name), scene);
                      this._backPlate = (0, core_Meshes_mesh__WEBPACK_IMPORTED_MODULE_2__.CreateBox)("backPlate" + this.name, { size: 1 }, scene);
                      this._backPlate.parent = node;
                      return node;
                    };
                    TouchHolographicMenu2.prototype._affectMaterial = function(mesh) {
                      var _this = this;
                      this._backPlateMaterial = new _materials_fluent_fluentMaterial__WEBPACK_IMPORTED_MODULE_3__.FluentMaterial(this.name + "backPlateMaterial", mesh.getScene());
                      this._backPlateMaterial.albedoColor = new core_Meshes_mesh__WEBPACK_IMPORTED_MODULE_2__.Color3(0.08, 0.15, 0.55);
                      this._backPlateMaterial.renderBorders = true;
                      this._backPlateMaterial.renderHoverLight = true;
                      this._pickedPointObserver = this._host.onPickedPointChangedObservable.add(function(pickedPoint) {
                        if (pickedPoint) {
                          _this._backPlateMaterial.hoverPosition = pickedPoint;
                          _this._backPlateMaterial.hoverColor.a = 1;
                        } else {
                          _this._backPlateMaterial.hoverColor.a = 0;
                        }
                      });
                      this._backPlate.material = this._backPlateMaterial;
                    };
                    TouchHolographicMenu2.prototype._mapGridNode = function(control, nodePosition) {
                      var mesh = control.mesh;
                      if (!mesh) {
                        return;
                      }
                      control.position = nodePosition.clone();
                      this._updateCurrentMinMax(nodePosition);
                    };
                    TouchHolographicMenu2.prototype._finalProcessing = function() {
                      this._updateMargins();
                    };
                    TouchHolographicMenu2.prototype._updateCurrentMinMax = function(nodePosition) {
                      if (!this._currentMin) {
                        this._currentMin = nodePosition.clone();
                        this._currentMax = nodePosition.clone();
                      }
                      this._currentMin.minimizeInPlace(nodePosition);
                      this._currentMax.maximizeInPlace(nodePosition);
                    };
                    TouchHolographicMenu2.prototype._updateMargins = function() {
                      if (this._children.length > 0) {
                        this._currentMin.addInPlaceFromFloats(-this._cellWidth / 2, -this._cellHeight / 2, 0);
                        this._currentMax.addInPlaceFromFloats(this._cellWidth / 2, this._cellHeight / 2, 0);
                        var extendSize = this._currentMax.subtract(this._currentMin);
                        this._backPlate.scaling.x = extendSize.x + this._cellWidth * this.backPlateMargin;
                        this._backPlate.scaling.y = extendSize.y + this._cellHeight * this.backPlateMargin;
                        this._backPlate.scaling.z = 1e-3;
                        for (var i = 0; i < this._children.length; i++) {
                          this._children[i].position.subtractInPlace(this._currentMin).subtractInPlace(extendSize.scale(0.5));
                          this._children[i].position.z -= 0.01;
                        }
                      }
                      this._currentMin = null;
                      this._currentMax = null;
                    };
                    TouchHolographicMenu2.prototype.addButton = function(button) {
                      var wasLayoutBlocked = this.blockLayout;
                      if (!wasLayoutBlocked) {
                        this.blockLayout = true;
                      }
                      _super.prototype.addControl.call(this, button);
                      button.isBackplateVisible = false;
                      button.scaling.scaleInPlace(TouchHolographicMenu2.MENU_BUTTON_SCALE);
                      if (!wasLayoutBlocked) {
                        this.blockLayout = false;
                      }
                      return this;
                    };
                    TouchHolographicMenu2.prototype.addControl = function(_control) {
                      core_Meshes_mesh__WEBPACK_IMPORTED_MODULE_2__.Logger.Warn("TouchHolographicMenu can only contain buttons. Please use the method `addButton` instead.");
                      return this;
                    };
                    TouchHolographicMenu2.prototype.dispose = function() {
                      _super.prototype.dispose.call(this);
                      this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);
                    };
                    TouchHolographicMenu2.MENU_BUTTON_SCALE = 1;
                    return TouchHolographicMenu2;
                  }(_volumeBasedPanel__WEBPACK_IMPORTED_MODULE_1__.VolumeBasedPanel)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/controls/touchMeshButton3D.js": (
              /*!**************************************************************!*\
                !*** ../../../lts/gui/dist/3D/controls/touchMeshButton3D.js ***!
                \**************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "TouchMeshButton3D": () => (
                    /* binding */
                    TouchMeshButton3D
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var _touchButton3D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./touchButton3D */
                  "../../../lts/gui/dist/3D/controls/touchButton3D.js"
                );
                var TouchMeshButton3D = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(TouchMeshButton3D2, _super);
                    function TouchMeshButton3D2(mesh, name) {
                      var _this = _super.call(this, name, mesh) || this;
                      _this._currentMesh = mesh;
                      _this.pointerEnterAnimation = function() {
                        if (!_this.mesh) {
                          return;
                        }
                        _this.mesh.scaling.scaleInPlace(1.1);
                      };
                      _this.pointerOutAnimation = function() {
                        if (!_this.mesh) {
                          return;
                        }
                        _this.mesh.scaling.scaleInPlace(1 / 1.1);
                      };
                      _this.pointerDownAnimation = function() {
                        if (!_this.mesh) {
                          return;
                        }
                        _this.mesh.scaling.scaleInPlace(0.95);
                      };
                      _this.pointerUpAnimation = function() {
                        if (!_this.mesh) {
                          return;
                        }
                        _this.mesh.scaling.scaleInPlace(1 / 0.95);
                      };
                      return _this;
                    }
                    TouchMeshButton3D2.prototype._getTypeName = function() {
                      return "TouchMeshButton3D";
                    };
                    TouchMeshButton3D2.prototype._createNode = function() {
                      var _this = this;
                      this._currentMesh.getChildMeshes().forEach(function(mesh) {
                        _this._injectGUI3DReservedDataStore(mesh).control = _this;
                      });
                      return this._currentMesh;
                    };
                    TouchMeshButton3D2.prototype._affectMaterial = function(mesh) {
                    };
                    return TouchMeshButton3D2;
                  }(_touchButton3D__WEBPACK_IMPORTED_MODULE_1__.TouchButton3D)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/controls/volumeBasedPanel.js": (
              /*!*************************************************************!*\
                !*** ../../../lts/gui/dist/3D/controls/volumeBasedPanel.js ***!
                \*************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "VolumeBasedPanel": () => (
                    /* binding */
                    VolumeBasedPanel
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Maths/math.vector */
                  "core/Misc/perfCounter"
                );
                var core_Misc_tools__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__);
                var _container3D__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./container3D */
                  "../../../lts/gui/dist/3D/controls/container3D.js"
                );
                var VolumeBasedPanel = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(VolumeBasedPanel2, _super);
                    function VolumeBasedPanel2(name) {
                      var _this = _super.call(this, name) || this;
                      _this._columns = 10;
                      _this._rows = 0;
                      _this._rowThenColum = true;
                      _this._orientation = _container3D__WEBPACK_IMPORTED_MODULE_2__.Container3D.FACEORIGIN_ORIENTATION;
                      _this.margin = 0;
                      return _this;
                    }
                    Object.defineProperty(VolumeBasedPanel2.prototype, "orientation", {
                      /**
                       * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)
                       * | Value | Type                                | Description |
                       * | ----- | ----------------------------------- | ----------- |
                       * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |
                       * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |
                       * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |
                       * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |
                       * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |
                       */
                      get: function() {
                        return this._orientation;
                      },
                      set: function(value) {
                        var _this = this;
                        if (this._orientation === value) {
                          return;
                        }
                        this._orientation = value;
                        core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Tools.SetImmediate(function() {
                          _this._arrangeChildren();
                        });
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(VolumeBasedPanel2.prototype, "columns", {
                      /**
                       * Gets or sets the number of columns requested (10 by default).
                       * The panel will automatically compute the number of rows based on number of child controls.
                       */
                      get: function() {
                        return this._columns;
                      },
                      set: function(value) {
                        var _this = this;
                        if (this._columns === value) {
                          return;
                        }
                        this._columns = value;
                        this._rowThenColum = true;
                        core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Tools.SetImmediate(function() {
                          _this._arrangeChildren();
                        });
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(VolumeBasedPanel2.prototype, "rows", {
                      /**
                       * Gets or sets a the number of rows requested.
                       * The panel will automatically compute the number of columns based on number of child controls.
                       */
                      get: function() {
                        return this._rows;
                      },
                      set: function(value) {
                        var _this = this;
                        if (this._rows === value) {
                          return;
                        }
                        this._rows = value;
                        this._rowThenColum = false;
                        core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Tools.SetImmediate(function() {
                          _this._arrangeChildren();
                        });
                      },
                      enumerable: false,
                      configurable: true
                    });
                    VolumeBasedPanel2.prototype._arrangeChildren = function() {
                      this._cellWidth = 0;
                      this._cellHeight = 0;
                      var rows = 0;
                      var columns = 0;
                      var controlCount = 0;
                      var currentInverseWorld = core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Matrix.Invert(this.node.computeWorldMatrix(true));
                      for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
                        var child = _a[_i];
                        if (!child.mesh) {
                          continue;
                        }
                        controlCount++;
                        child.mesh.computeWorldMatrix(true);
                        var boundingBox = child.mesh.getHierarchyBoundingVectors();
                        var extendSize = core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Vector3[0];
                        var diff = core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Vector3[1];
                        boundingBox.max.subtractToRef(boundingBox.min, diff);
                        diff.scaleInPlace(0.5);
                        core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);
                        this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);
                        this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);
                      }
                      this._cellWidth += this.margin * 2;
                      this._cellHeight += this.margin * 2;
                      if (this._rowThenColum) {
                        columns = this._columns;
                        rows = Math.ceil(controlCount / this._columns);
                      } else {
                        rows = this._rows;
                        columns = Math.ceil(controlCount / this._rows);
                      }
                      var startOffsetX = columns * 0.5 * this._cellWidth;
                      var startOffsetY = rows * 0.5 * this._cellHeight;
                      var nodeGrid = [];
                      var cellCounter = 0;
                      if (this._rowThenColum) {
                        for (var r = 0; r < rows; r++) {
                          for (var c = 0; c < columns; c++) {
                            nodeGrid.push(new core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Vector3(c * this._cellWidth - startOffsetX + this._cellWidth / 2, r * this._cellHeight - startOffsetY + this._cellHeight / 2, 0));
                            cellCounter++;
                            if (cellCounter > controlCount) {
                              break;
                            }
                          }
                        }
                      } else {
                        for (var c = 0; c < columns; c++) {
                          for (var r = 0; r < rows; r++) {
                            nodeGrid.push(new core_Misc_tools__WEBPACK_IMPORTED_MODULE_1__.Vector3(c * this._cellWidth - startOffsetX + this._cellWidth / 2, r * this._cellHeight - startOffsetY + this._cellHeight / 2, 0));
                            cellCounter++;
                            if (cellCounter > controlCount) {
                              break;
                            }
                          }
                        }
                      }
                      cellCounter = 0;
                      for (var _b = 0, _c = this._children; _b < _c.length; _b++) {
                        var child = _c[_b];
                        if (!child.mesh) {
                          continue;
                        }
                        this._mapGridNode(child, nodeGrid[cellCounter]);
                        cellCounter++;
                      }
                      this._finalProcessing();
                    };
                    VolumeBasedPanel2.prototype._finalProcessing = function() {
                    };
                    return VolumeBasedPanel2;
                  }(_container3D__WEBPACK_IMPORTED_MODULE_2__.Container3D)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/gizmos/gizmoHandle.js": (
              /*!******************************************************!*\
                !*** ../../../lts/gui/dist/3D/gizmos/gizmoHandle.js ***!
                \******************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "CornerHandle": () => (
                    /* binding */
                    CornerHandle
                  ),
                  /* harmony export */
                  "GizmoHandle": () => (
                    /* binding */
                    GizmoHandle
                  ),
                  /* harmony export */
                  "HandleState": () => (
                    /* binding */
                    HandleState
                  ),
                  /* harmony export */
                  "SideHandle": () => (
                    /* binding */
                    SideHandle
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Behaviors/Meshes/baseSixDofDragBehavior */
                  "core/Misc/perfCounter"
                );
                var core_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_1__);
                var _materials_handle_handleMaterial__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ../materials/handle/handleMaterial */
                  "../../../lts/gui/dist/3D/materials/handle/handleMaterial.js"
                );
                var HandleState;
                (function(HandleState2) {
                  HandleState2[HandleState2["IDLE"] = 0] = "IDLE";
                  HandleState2[HandleState2["HOVER"] = 1] = "HOVER";
                  HandleState2[HandleState2["DRAG"] = 2] = "DRAG";
                })(HandleState || (HandleState = {}));
                var GizmoHandle = (
                  /** @class */
                  function() {
                    function GizmoHandle2(gizmo, scene) {
                      this._state = HandleState.IDLE;
                      this._materials = [];
                      this._scene = scene;
                      this._gizmo = gizmo;
                      this.node = this.createNode();
                      this.node.reservedDataStore = {
                        handle: this
                      };
                    }
                    Object.defineProperty(GizmoHandle2.prototype, "state", {
                      /**
                       * The current state of the handle
                       */
                      get: function() {
                        return this._state;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(GizmoHandle2.prototype, "gizmo", {
                      /**
                       * Returns the gizmo carrying this handle
                       */
                      get: function() {
                        return this._gizmo;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(GizmoHandle2.prototype, "hover", {
                      /**
                       * Sets hover state
                       */
                      set: function(value) {
                        if (value) {
                          this._state |= HandleState.HOVER;
                        } else {
                          this._state &= ~HandleState.HOVER;
                        }
                        this._updateMaterial();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(GizmoHandle2.prototype, "drag", {
                      /**
                       * Sets drag state
                       */
                      set: function(value) {
                        if (value) {
                          this._state |= HandleState.DRAG;
                        } else {
                          this._state &= ~HandleState.DRAG;
                        }
                        this._updateMaterial();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    GizmoHandle2.prototype._createMaterial = function(positionOffset) {
                      var mat = new _materials_handle_handleMaterial__WEBPACK_IMPORTED_MODULE_2__.HandleMaterial("handle", this._scene);
                      if (positionOffset) {
                        mat._positionOffset = positionOffset;
                      }
                      return mat;
                    };
                    GizmoHandle2.prototype._updateMaterial = function() {
                      var state = this._state;
                      for (var _i = 0, _a = this._materials; _i < _a.length; _i++) {
                        var mat = _a[_i];
                        mat.hover = false;
                        mat.drag = false;
                      }
                      if (state & HandleState.DRAG) {
                        for (var _b = 0, _c = this._materials; _b < _c.length; _b++) {
                          var mat = _c[_b];
                          mat.drag = true;
                        }
                      } else if (state & HandleState.HOVER) {
                        for (var _d = 0, _e = this._materials; _d < _e.length; _d++) {
                          var mat = _e[_d];
                          mat.hover = true;
                        }
                      }
                    };
                    GizmoHandle2.prototype.setDragBehavior = function(dragStartFn, dragFn, dragEndFn) {
                      var dragBehavior = new core_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_1__.BaseSixDofDragBehavior();
                      this._dragBehavior = dragBehavior;
                      this._dragStartObserver = dragBehavior.onDragStartObservable.add(dragStartFn);
                      this._draggingObserver = dragBehavior.onDragObservable.add(dragFn);
                      this._dragEndObserver = dragBehavior.onDragEndObservable.add(dragEndFn);
                      this._dragBehavior.attach(this.node);
                    };
                    GizmoHandle2.prototype.dispose = function() {
                      this._dragBehavior.onDragStartObservable.remove(this._dragStartObserver);
                      this._dragBehavior.onDragObservable.remove(this._draggingObserver);
                      this._dragBehavior.onDragEndObservable.remove(this._dragEndObserver);
                      this._dragBehavior.detach();
                      for (var _i = 0, _a = this._materials; _i < _a.length; _i++) {
                        var material = _a[_i];
                        material.dispose();
                      }
                      this.node.dispose();
                    };
                    return GizmoHandle2;
                  }()
                );
                var SideHandle = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(SideHandle2, _super);
                    function SideHandle2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    SideHandle2.prototype.createNode = function() {
                      var verticalBox = (0, core_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_1__.CreateBox)("sideVert", { width: 1, height: 10, depth: 0.1 }, this._scene);
                      var sideNode = new core_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_1__.TransformNode("side", this._scene);
                      verticalBox.parent = sideNode;
                      var mat = this._createMaterial();
                      verticalBox.material = mat;
                      verticalBox.isNearGrabbable = true;
                      this._materials.push(mat);
                      return sideNode;
                    };
                    return SideHandle2;
                  }(GizmoHandle)
                );
                var CornerHandle = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(CornerHandle2, _super);
                    function CornerHandle2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    CornerHandle2.prototype.createNode = function() {
                      var horizontalBox = (0, core_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_1__.CreateBox)("angleHor", { width: 3, height: 1, depth: 0.1 }, this._scene);
                      var verticalBox = (0, core_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_1__.CreateBox)("angleVert", { width: 1, height: 3, depth: 0.1 }, this._scene);
                      var angleNode = new core_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_1__.TransformNode("angle", this._scene);
                      horizontalBox.parent = angleNode;
                      verticalBox.parent = angleNode;
                      horizontalBox.material = this._createMaterial(new core_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_1__.Vector3(1, 0, 0));
                      verticalBox.material = this._createMaterial(new core_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 1, 0));
                      verticalBox.isNearGrabbable = true;
                      horizontalBox.isNearGrabbable = true;
                      this._materials.push(horizontalBox.material);
                      this._materials.push(verticalBox.material);
                      return angleNode;
                    };
                    return CornerHandle2;
                  }(GizmoHandle)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/gizmos/index.js": (
              /*!************************************************!*\
                !*** ../../../lts/gui/dist/3D/gizmos/index.js ***!
                \************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "CornerHandle": () => (
                    /* reexport safe */
                    _gizmoHandle__WEBPACK_IMPORTED_MODULE_1__.CornerHandle
                  ),
                  /* harmony export */
                  "GizmoHandle": () => (
                    /* reexport safe */
                    _gizmoHandle__WEBPACK_IMPORTED_MODULE_1__.GizmoHandle
                  ),
                  /* harmony export */
                  "HandleState": () => (
                    /* reexport safe */
                    _gizmoHandle__WEBPACK_IMPORTED_MODULE_1__.HandleState
                  ),
                  /* harmony export */
                  "SideHandle": () => (
                    /* reexport safe */
                    _gizmoHandle__WEBPACK_IMPORTED_MODULE_1__.SideHandle
                  ),
                  /* harmony export */
                  "SlateGizmo": () => (
                    /* reexport safe */
                    _slateGizmo__WEBPACK_IMPORTED_MODULE_0__.SlateGizmo
                  )
                  /* harmony export */
                });
                var _slateGizmo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! ./slateGizmo */
                  "../../../lts/gui/dist/3D/gizmos/slateGizmo.js"
                );
                var _gizmoHandle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./gizmoHandle */
                  "../../../lts/gui/dist/3D/gizmos/gizmoHandle.js"
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/gizmos/slateGizmo.js": (
              /*!*****************************************************!*\
                !*** ../../../lts/gui/dist/3D/gizmos/slateGizmo.js ***!
                \*****************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "SlateGizmo": () => (
                    /* binding */
                    SlateGizmo
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Misc/pivotTools */
                  "core/Misc/perfCounter"
                );
                var core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__);
                var _gizmoHandle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./gizmoHandle */
                  "../../../lts/gui/dist/3D/gizmos/gizmoHandle.js"
                );
                var SlateGizmo = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(SlateGizmo2, _super);
                    function SlateGizmo2(utilityLayer) {
                      var _this = _super.call(this, utilityLayer) || this;
                      _this._boundingDimensions = new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0);
                      _this._renderObserver = null;
                      _this._tmpQuaternion = new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Quaternion();
                      _this._tmpVector = new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0);
                      _this._corners = [];
                      _this._sides = [];
                      _this._boundingBoxGizmo = {
                        min: new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3(),
                        max: new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3()
                      };
                      _this._margin = 0.35;
                      _this._handleSize = 0.075;
                      _this._attachedSlate = null;
                      _this._existingSlateScale = new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3();
                      _this.fixedScreenSize = false;
                      _this.fixedScreenSizeDistanceFactor = 10;
                      _this._createNode();
                      _this.updateScale = false;
                      _this._renderObserver = _this.gizmoLayer.originalScene.onBeforeRenderObservable.add(function() {
                        if (_this.attachedMesh && !_this._existingSlateScale.equals(_this.attachedMesh.scaling)) {
                          _this.updateBoundingBox();
                        }
                      });
                      return _this;
                    }
                    Object.defineProperty(SlateGizmo2.prototype, "attachedSlate", {
                      get: function() {
                        return this._attachedSlate;
                      },
                      /**
                       * The slate attached to this gizmo
                       */
                      set: function(control) {
                        var _this = this;
                        if (control) {
                          this.attachedMesh = control.mesh;
                          this.updateBoundingBox();
                          this._pickedPointObserver = control._host.onPickingObservable.add(function(pickedMesh) {
                            if (_this._handleHovered && (!pickedMesh || pickedMesh.parent !== _this._handleHovered.node)) {
                              _this._handleHovered.hover = false;
                              _this._handleHovered = null;
                            }
                            if (pickedMesh && pickedMesh.parent && pickedMesh.parent.reservedDataStore && pickedMesh.parent.reservedDataStore.handle) {
                              var handle = pickedMesh.parent.reservedDataStore.handle;
                              if (handle.gizmo === _this) {
                                _this._handleHovered = handle;
                                _this._handleHovered.hover = true;
                              }
                            }
                          });
                        } else if (this._attachedSlate) {
                          this._attachedSlate._host.onPickingObservable.remove(this._pickedPointObserver);
                        }
                        this._attachedSlate = control;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    SlateGizmo2.prototype._createNode = function() {
                      var _this = this;
                      this._handlesParent = new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.TransformNode("handlesParent", this.gizmoLayer.utilityLayerScene);
                      this._handlesParent.rotationQuaternion = core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Quaternion.Identity();
                      var masksCorners = [
                        {
                          dimensions: new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3(-1, -1, 0),
                          origin: new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3(1, 0, 0)
                        },
                        {
                          dimensions: new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3(1, -1, 0),
                          origin: new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0)
                        },
                        {
                          dimensions: new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3(1, 1, 0),
                          origin: new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 1, 0)
                        },
                        {
                          dimensions: new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3(-1, 1, 0),
                          origin: new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3(1, 1, 0)
                        }
                      ];
                      for (var i = 0; i < 4; i++) {
                        var corner = new _gizmoHandle__WEBPACK_IMPORTED_MODULE_2__.CornerHandle(this, this.gizmoLayer.utilityLayerScene);
                        this._corners.push(corner);
                        corner.node.rotation.z = Math.PI / 2 * i;
                        corner.node.parent = this._handlesParent;
                        this._assignDragBehaviorCorners(corner, function(originStart, dimensionsStart, offset, masks) {
                          return _this._moveHandle(originStart, dimensionsStart, offset, masks, true);
                        }, masksCorners[i]);
                      }
                      for (var i = 0; i < 4; i++) {
                        var side = new _gizmoHandle__WEBPACK_IMPORTED_MODULE_2__.SideHandle(this, this.gizmoLayer.utilityLayerScene);
                        this._sides.push(side);
                        side.node.rotation.z = Math.PI / 2 * i;
                        side.node.parent = this._handlesParent;
                        this._assignDragBehaviorSides(side, i % 2 === 0 ? new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 1, 0) : new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3(1, 0, 0));
                      }
                      this._handlesParent.parent = this._rootMesh;
                    };
                    SlateGizmo2.prototype._keepAspectRatio = function(vector, aspectRatio, invertDiagonal) {
                      if (invertDiagonal === void 0) {
                        invertDiagonal = false;
                      }
                      var axis = core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Vector3[0];
                      axis.copyFromFloats(aspectRatio, 1, 0).normalize();
                      if (invertDiagonal) {
                        axis.y *= -1;
                      }
                      var dot = core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3.Dot(vector, axis);
                      vector.copyFrom(axis).scaleInPlace(dot);
                    };
                    SlateGizmo2.prototype._clampDimensions = function(vector, dimensions, mask, keepAspectRatio) {
                      if (keepAspectRatio === void 0) {
                        keepAspectRatio = false;
                      }
                      var impact = core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Vector3[0];
                      impact.copyFrom(vector).multiplyInPlace(mask);
                      var clampedDimensions = core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Vector3[1];
                      clampedDimensions.copyFromFloats(Math.max(this._attachedSlate.minDimensions.x, impact.x + dimensions.x), Math.max(this._attachedSlate.minDimensions.y, impact.y + dimensions.y), 0);
                      if (keepAspectRatio) {
                        var ratio = dimensions.x / dimensions.y;
                        clampedDimensions.x = Math.max(clampedDimensions.x, clampedDimensions.y * ratio);
                        clampedDimensions.y = Math.max(clampedDimensions.y, clampedDimensions.x / ratio);
                      }
                      impact.copyFrom(clampedDimensions).subtractInPlace(dimensions);
                      vector.x = Math.sign(vector.x) * Math.abs(impact.x);
                      vector.y = Math.sign(vector.y) * Math.abs(impact.y);
                    };
                    SlateGizmo2.prototype._moveHandle = function(originStart, dimensionsStart, offset, masks, isCorner) {
                      if (!this._attachedSlate) {
                        return;
                      }
                      if (isCorner) {
                        var aspectRatio = dimensionsStart.x / dimensionsStart.y;
                        this._keepAspectRatio(offset, aspectRatio, masks.dimensions.x * masks.dimensions.y < 0);
                      }
                      this._clampDimensions(offset, dimensionsStart, masks.dimensions, isCorner);
                      var offsetOriginMasked = core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Vector3[0];
                      var offsetDimensionsMasked = core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Vector3[1];
                      offsetOriginMasked.copyFrom(offset).multiplyInPlace(masks.origin);
                      offsetDimensionsMasked.copyFrom(offset).multiplyInPlace(masks.dimensions);
                      this._attachedSlate.origin.copyFrom(originStart).addInPlace(offsetOriginMasked);
                      this._attachedSlate.dimensions.set(dimensionsStart.x + offsetDimensionsMasked.x, dimensionsStart.y + offsetDimensionsMasked.y);
                    };
                    SlateGizmo2.prototype._assignDragBehaviorCorners = function(handle, moveFn, masks) {
                      var _this = this;
                      var dimensionsStart = new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3();
                      var originStart = new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3();
                      var dragOrigin = new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3();
                      var toObjectFrame = new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Matrix();
                      var dragPlaneNormal = new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3();
                      var projectToRef = function(position, normal, origin, ref) {
                        position.subtractToRef(origin, core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Vector3[0]);
                        var dot = core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3.Dot(core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Vector3[0], normal);
                        core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Vector3[1].copyFrom(normal).scaleInPlace(dot);
                        core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Vector3[0].subtractInPlace(core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Vector3[1]);
                        core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Vector3[0].addToRef(origin, ref);
                      };
                      var dragStart = function(event) {
                        if (_this.attachedSlate && _this.attachedMesh) {
                          dimensionsStart.set(_this.attachedSlate.dimensions.x, _this.attachedSlate.dimensions.y, core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Epsilon);
                          originStart.copyFrom(_this.attachedSlate.origin);
                          dragOrigin.copyFrom(event.position);
                          toObjectFrame.copyFrom(_this.attachedMesh.computeWorldMatrix(true));
                          toObjectFrame.invert();
                          _this.attachedSlate._followButton.isToggled = false;
                          core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3.TransformNormalToRef(core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3.Forward(), _this.attachedMesh.getWorldMatrix(), dragPlaneNormal);
                          dragPlaneNormal.normalize();
                          if (_this._handleHovered) {
                            _this._handleDragged = _this._handleHovered;
                            _this._handleDragged.drag = true;
                          }
                        }
                      };
                      var dragging = function(event) {
                        if (_this.attachedSlate && _this.attachedMesh) {
                          projectToRef(event.position, dragPlaneNormal, dragOrigin, _this._tmpVector);
                          _this._tmpVector.subtractInPlace(dragOrigin);
                          core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3.TransformNormalToRef(_this._tmpVector, toObjectFrame, _this._tmpVector);
                          moveFn(originStart, dimensionsStart, _this._tmpVector, masks);
                          _this.attachedSlate._positionElements();
                          _this.updateBoundingBox();
                        }
                      };
                      var dragEnd = function() {
                        if (_this.attachedSlate && _this.attachedNode) {
                          _this.attachedSlate._updatePivot();
                          if (_this._handleDragged) {
                            _this._handleDragged.drag = false;
                            _this._handleDragged = null;
                          }
                        }
                      };
                      handle.setDragBehavior(dragStart, dragging, dragEnd);
                    };
                    SlateGizmo2.prototype._assignDragBehaviorSides = function(handle, dragPlaneNormal) {
                      var _this = this;
                      var quaternionOrigin = new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Quaternion();
                      var dragOrigin = new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3();
                      var directionOrigin = new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3();
                      var worldPivot = new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3();
                      var worldPlaneNormal = new core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3();
                      var dragStart = function(event) {
                        if (_this.attachedSlate && _this.attachedMesh) {
                          quaternionOrigin.copyFrom(_this.attachedMesh.rotationQuaternion);
                          dragOrigin.copyFrom(event.position);
                          worldPivot.copyFrom(_this.attachedMesh.getAbsolutePivotPoint());
                          directionOrigin.copyFrom(dragOrigin).subtractInPlace(worldPivot).normalize();
                          _this.attachedSlate._followButton.isToggled = false;
                          core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3.TransformNormalToRef(dragPlaneNormal, _this.attachedMesh.getWorldMatrix(), worldPlaneNormal);
                          worldPlaneNormal.normalize();
                          if (_this._handleHovered) {
                            _this._handleDragged = _this._handleHovered;
                            _this._handleDragged.drag = true;
                          }
                        }
                      };
                      var dragging = function(event) {
                        if (_this.attachedSlate && _this.attachedMesh) {
                          _this._tmpVector.copyFrom(event.position);
                          _this._tmpVector.subtractInPlace(worldPivot);
                          _this._tmpVector.normalize();
                          var angle = -core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Vector3.GetAngleBetweenVectorsOnPlane(_this._tmpVector, directionOrigin, worldPlaneNormal);
                          core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Quaternion.RotationAxisToRef(dragPlaneNormal, angle, _this._tmpQuaternion);
                          quaternionOrigin.multiplyToRef(_this._tmpQuaternion, _this.attachedMesh.rotationQuaternion);
                        }
                      };
                      var dragEnd = function() {
                        if (_this.attachedSlate && _this.attachedNode) {
                          _this.attachedSlate._updatePivot();
                          if (_this._handleDragged) {
                            _this._handleDragged.drag = false;
                            _this._handleDragged = null;
                          }
                        }
                      };
                      handle.setDragBehavior(dragStart, dragging, dragEnd);
                    };
                    SlateGizmo2.prototype._attachedNodeChanged = function(value) {
                      if (value) {
                        this.updateBoundingBox();
                      }
                    };
                    SlateGizmo2.prototype.updateBoundingBox = function() {
                      if (this.attachedMesh) {
                        core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.PivotTools._RemoveAndStorePivotPoint(this.attachedMesh);
                        var originalParent = this.attachedMesh.parent;
                        this.attachedMesh.setParent(null);
                        this._update();
                        if (!this.attachedMesh.rotationQuaternion) {
                          this.attachedMesh.rotationQuaternion = core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Quaternion.RotationYawPitchRoll(this.attachedMesh.rotation.y, this.attachedMesh.rotation.x, this.attachedMesh.rotation.z);
                        }
                        this._tmpQuaternion.copyFrom(this.attachedMesh.rotationQuaternion);
                        this._tmpVector.copyFrom(this.attachedMesh.position);
                        this.attachedMesh.rotationQuaternion.set(0, 0, 0, 1);
                        this.attachedMesh.position.set(0, 0, 0);
                        var boundingMinMax = this.attachedMesh.getHierarchyBoundingVectors();
                        boundingMinMax.max.subtractToRef(boundingMinMax.min, this._boundingDimensions);
                        this._boundingBoxGizmo.min = boundingMinMax.min;
                        this._boundingBoxGizmo.max = boundingMinMax.max;
                        this._updateHandlesPosition();
                        this._updateHandlesScaling();
                        this.attachedMesh.rotationQuaternion.copyFrom(this._tmpQuaternion);
                        this.attachedMesh.position.copyFrom(this._tmpVector);
                        core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.PivotTools._RestorePivotPoint(this.attachedMesh);
                        this.attachedMesh.setParent(originalParent);
                        this.attachedMesh.computeWorldMatrix(true);
                        this._existingSlateScale.copyFrom(this.attachedMesh.scaling);
                      }
                    };
                    SlateGizmo2.prototype._updateHandlesPosition = function() {
                      var min = this._boundingBoxGizmo.min.clone();
                      var max = this._boundingBoxGizmo.max.clone();
                      var handleScaling = this._corners[0].node.scaling.length();
                      min.x -= this._margin * handleScaling;
                      min.y -= this._margin * handleScaling;
                      max.x += this._margin * handleScaling;
                      max.y += this._margin * handleScaling;
                      var center = min.add(max).scaleInPlace(0.5);
                      this._corners[0].node.position.copyFromFloats(min.x, min.y, 0);
                      this._corners[1].node.position.copyFromFloats(max.x, min.y, 0);
                      this._corners[2].node.position.copyFromFloats(max.x, max.y, 0);
                      this._corners[3].node.position.copyFromFloats(min.x, max.y, 0);
                      this._sides[0].node.position.copyFromFloats(min.x, center.y, 0);
                      this._sides[1].node.position.copyFromFloats(center.x, min.y, 0);
                      this._sides[2].node.position.copyFromFloats(max.x, center.y, 0);
                      this._sides[3].node.position.copyFromFloats(center.x, max.y, 0);
                    };
                    SlateGizmo2.prototype._updateHandlesScaling = function() {
                      if (this._attachedSlate && this._attachedSlate.mesh) {
                        var scaledWidth = this._attachedSlate.mesh.scaling.x * this._attachedSlate.dimensions.x;
                        var scaledHeight = this._attachedSlate.mesh.scaling.y * this._attachedSlate.dimensions.y;
                        var scale = Math.min(scaledWidth, scaledHeight) * this._handleSize;
                        for (var index = 0; index < this._corners.length; index++) {
                          this._corners[index].node.scaling.setAll(scale);
                        }
                        for (var index = 0; index < this._sides.length; index++) {
                          this._sides[index].node.scaling.setAll(scale);
                        }
                      }
                    };
                    SlateGizmo2.prototype._update = function() {
                      _super.prototype._update.call(this);
                      if (!this.gizmoLayer.utilityLayerScene.activeCamera) {
                        return;
                      }
                      if (this._attachedSlate && this._attachedSlate.mesh) {
                        if (this.fixedScreenSize) {
                          this._attachedSlate.mesh.absolutePosition.subtractToRef(this.gizmoLayer.utilityLayerScene.activeCamera.position, this._tmpVector);
                          var distanceFromCamera = this._handleSize * this._tmpVector.length() / this.fixedScreenSizeDistanceFactor;
                          for (var i = 0; i < this._corners.length; i++) {
                            this._corners[i].node.scaling.set(distanceFromCamera, distanceFromCamera, distanceFromCamera);
                          }
                          for (var i = 0; i < this._sides.length; i++) {
                            this._sides[i].node.scaling.set(distanceFromCamera, distanceFromCamera, distanceFromCamera);
                          }
                        }
                        this._updateHandlesPosition();
                      }
                    };
                    SlateGizmo2.prototype.dispose = function() {
                      this.gizmoLayer.originalScene.onBeforeRenderObservable.remove(this._renderObserver);
                      _super.prototype.dispose.call(this);
                      for (var _i = 0, _a = this._corners; _i < _a.length; _i++) {
                        var corner = _a[_i];
                        corner.dispose();
                      }
                      for (var _b = 0, _c = this._sides; _b < _c.length; _b++) {
                        var side = _c[_b];
                        side.dispose();
                      }
                    };
                    return SlateGizmo2;
                  }(core_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_1__.Gizmo)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/gui3DManager.js": (
              /*!************************************************!*\
                !*** ../../../lts/gui/dist/3D/gui3DManager.js ***!
                \************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "GUI3DManager": () => (
                    /* binding */
                    GUI3DManager
                  )
                  /* harmony export */
                });
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Engines/engineStore */
                  "core/Misc/perfCounter"
                );
                var core_Misc_observable__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__);
                var _controls_container3D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./controls/container3D */
                  "../../../lts/gui/dist/3D/controls/container3D.js"
                );
                var GUI3DManager = (
                  /** @class */
                  function() {
                    function GUI3DManager2(scene) {
                      var _this = this;
                      this._customControlScaling = 1;
                      this._lastControlOver = {};
                      this._lastControlDown = {};
                      this.onPickedPointChangedObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
                      this.onPickingObservable = new core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
                      this._sharedMaterials = {};
                      this._touchSharedMaterials = {};
                      this._scene = scene || core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.EngineStore.LastCreatedScene;
                      this._sceneDisposeObserver = this._scene.onDisposeObservable.add(function() {
                        _this._sceneDisposeObserver = null;
                        _this._utilityLayer = null;
                        _this.dispose();
                      });
                      this._utilityLayer = core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.UtilityLayerRenderer._CreateDefaultUtilityLayerFromScene(this._scene);
                      this._utilityLayer.onlyCheckPointerDownEvents = false;
                      this._utilityLayer.pickUtilitySceneFirst = false;
                      this._utilityLayer.mainSceneTrackerPredicate = function(mesh) {
                        var _a, _b, _c;
                        return mesh && ((_c = (_b = (_a = mesh.reservedDataStore) === null || _a === void 0 ? void 0 : _a.GUI3D) === null || _b === void 0 ? void 0 : _b.control) === null || _c === void 0 ? void 0 : _c._node);
                      };
                      this._rootContainer = new _controls_container3D__WEBPACK_IMPORTED_MODULE_1__.Container3D("RootContainer");
                      this._rootContainer._host = this;
                      var utilityLayerScene = this._utilityLayer.utilityLayerScene;
                      this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add(function(pointerId) {
                        _this._handlePointerOut(pointerId, true);
                      });
                      this._pointerObserver = utilityLayerScene.onPointerObservable.add(function(pi) {
                        _this._doPicking(pi);
                      });
                      this._utilityLayer.utilityLayerScene.autoClear = false;
                      this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;
                      new core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.HemisphericLight("hemi", core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector3.Up(), this._utilityLayer.utilityLayerScene);
                    }
                    Object.defineProperty(GUI3DManager2.prototype, "scene", {
                      /** Gets the hosting scene */
                      get: function() {
                        return this._scene;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(GUI3DManager2.prototype, "utilityLayer", {
                      /** Gets associated utility layer */
                      get: function() {
                        return this._utilityLayer;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(GUI3DManager2.prototype, "controlScaling", {
                      /** Gets the scaling for all UI elements owned by this manager */
                      get: function() {
                        return this._customControlScaling;
                      },
                      /** Sets the scaling adjustment for all UI elements owned by this manager */
                      set: function(newScale) {
                        if (this._customControlScaling !== newScale && newScale > 0) {
                          var scaleRatio_1 = newScale / this._customControlScaling;
                          this._customControlScaling = newScale;
                          this._rootContainer.children.forEach(function(control) {
                            control.scaling.scaleInPlace(scaleRatio_1);
                            if (newScale !== 1) {
                              control._isScaledByManager = true;
                            }
                          });
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(GUI3DManager2.prototype, "useRealisticScaling", {
                      /** Gets if controls attached to this manager are realistically sized, based on the fact that 1 unit length is 1 meter */
                      get: function() {
                        return this.controlScaling === GUI3DManager2.MRTK_REALISTIC_SCALING;
                      },
                      /** Sets if controls attached to this manager are realistically sized, based on the fact that 1 unit length is 1 meter */
                      set: function(newValue) {
                        this.controlScaling = newValue ? GUI3DManager2.MRTK_REALISTIC_SCALING : 1;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    GUI3DManager2.prototype._handlePointerOut = function(pointerId, isPointerUp) {
                      var previousControlOver = this._lastControlOver[pointerId];
                      if (previousControlOver) {
                        previousControlOver._onPointerOut(previousControlOver);
                        delete this._lastControlOver[pointerId];
                      }
                      if (isPointerUp) {
                        if (this._lastControlDown[pointerId]) {
                          this._lastControlDown[pointerId].forcePointerUp();
                          delete this._lastControlDown[pointerId];
                        }
                      }
                      this.onPickedPointChangedObservable.notifyObservers(null);
                    };
                    GUI3DManager2.prototype._doPicking = function(pi) {
                      var _a, _b, _c;
                      if (!this._utilityLayer || !this._utilityLayer.shouldRender || !this._utilityLayer.utilityLayerScene.activeCamera) {
                        return false;
                      }
                      var pointerEvent = pi.event;
                      var pointerId = pointerEvent.pointerId || 0;
                      var buttonIndex = pointerEvent.button;
                      var pickingInfo = pi.pickInfo;
                      if (pickingInfo) {
                        this.onPickingObservable.notifyObservers(pickingInfo.pickedMesh);
                      }
                      if (!pickingInfo || !pickingInfo.hit) {
                        this._handlePointerOut(pointerId, pi.type === core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERUP);
                        return false;
                      }
                      if (pickingInfo.pickedPoint) {
                        this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);
                      }
                      var control = (_b = (_a = pickingInfo.pickedMesh.reservedDataStore) === null || _a === void 0 ? void 0 : _a.GUI3D) === null || _b === void 0 ? void 0 : _b.control;
                      if (!!control && !control._processObservables(pi.type, pickingInfo.pickedPoint, ((_c = pickingInfo.originMesh) === null || _c === void 0 ? void 0 : _c.position) || null, pointerId, buttonIndex)) {
                        if (pi.type === core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERMOVE) {
                          if (this._lastControlOver[pointerId]) {
                            this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);
                          }
                          delete this._lastControlOver[pointerId];
                        }
                      }
                      if (pi.type === core_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERUP) {
                        if (this._lastControlDown[pointerEvent.pointerId]) {
                          this._lastControlDown[pointerEvent.pointerId].forcePointerUp();
                          delete this._lastControlDown[pointerEvent.pointerId];
                        }
                        if (pointerEvent.pointerType === "touch" || pointerEvent.pointerType === "xr" && this._scene.getEngine().hostInformation.isMobile) {
                          this._handlePointerOut(pointerId, false);
                        }
                      }
                      return true;
                    };
                    Object.defineProperty(GUI3DManager2.prototype, "rootContainer", {
                      /**
                       * Gets the root container
                       */
                      get: function() {
                        return this._rootContainer;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    GUI3DManager2.prototype.containsControl = function(control) {
                      return this._rootContainer.containsControl(control);
                    };
                    GUI3DManager2.prototype.addControl = function(control) {
                      this._rootContainer.addControl(control);
                      if (this._customControlScaling !== 1) {
                        control.scaling.scaleInPlace(this._customControlScaling);
                        control._isScaledByManager = true;
                      }
                      return this;
                    };
                    GUI3DManager2.prototype.removeControl = function(control) {
                      this._rootContainer.removeControl(control);
                      if (control._isScaledByManager) {
                        control.scaling.scaleInPlace(1 / this._customControlScaling);
                        control._isScaledByManager = false;
                      }
                      return this;
                    };
                    GUI3DManager2.prototype.dispose = function() {
                      this._rootContainer.dispose();
                      for (var materialName in this._sharedMaterials) {
                        if (!Object.prototype.hasOwnProperty.call(this._sharedMaterials, materialName)) {
                          continue;
                        }
                        this._sharedMaterials[materialName].dispose();
                      }
                      this._sharedMaterials = {};
                      for (var materialName in this._touchSharedMaterials) {
                        if (!Object.prototype.hasOwnProperty.call(this._touchSharedMaterials, materialName)) {
                          continue;
                        }
                        this._touchSharedMaterials[materialName].dispose();
                      }
                      this._touchSharedMaterials = {};
                      if (this._pointerOutObserver && this._utilityLayer) {
                        this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);
                        this._pointerOutObserver = null;
                      }
                      this.onPickedPointChangedObservable.clear();
                      this.onPickingObservable.clear();
                      var utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;
                      if (utilityLayerScene) {
                        if (this._pointerObserver) {
                          utilityLayerScene.onPointerObservable.remove(this._pointerObserver);
                          this._pointerObserver = null;
                        }
                      }
                      if (this._scene) {
                        if (this._sceneDisposeObserver) {
                          this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);
                          this._sceneDisposeObserver = null;
                        }
                      }
                      if (this._utilityLayer) {
                        this._utilityLayer.dispose();
                      }
                    };
                    GUI3DManager2.MRTK_REALISTIC_SCALING = 0.032;
                    return GUI3DManager2;
                  }()
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/index.js": (
              /*!*****************************************!*\
                !*** ../../../lts/gui/dist/3D/index.js ***!
                \*****************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "AbstractButton3D": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.AbstractButton3D
                  ),
                  /* harmony export */
                  "Button3D": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.Button3D
                  ),
                  /* harmony export */
                  "Container3D": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.Container3D
                  ),
                  /* harmony export */
                  "Control3D": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.Control3D
                  ),
                  /* harmony export */
                  "CornerHandle": () => (
                    /* reexport safe */
                    _gizmos_index__WEBPACK_IMPORTED_MODULE_2__.CornerHandle
                  ),
                  /* harmony export */
                  "CylinderPanel": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.CylinderPanel
                  ),
                  /* harmony export */
                  "FluentBackplateMaterial": () => (
                    /* reexport safe */
                    _materials_index__WEBPACK_IMPORTED_MODULE_1__.FluentBackplateMaterial
                  ),
                  /* harmony export */
                  "FluentButtonMaterial": () => (
                    /* reexport safe */
                    _materials_index__WEBPACK_IMPORTED_MODULE_1__.FluentButtonMaterial
                  ),
                  /* harmony export */
                  "FluentMaterial": () => (
                    /* reexport safe */
                    _materials_index__WEBPACK_IMPORTED_MODULE_1__.FluentMaterial
                  ),
                  /* harmony export */
                  "FluentMaterialDefines": () => (
                    /* reexport safe */
                    _materials_index__WEBPACK_IMPORTED_MODULE_1__.FluentMaterialDefines
                  ),
                  /* harmony export */
                  "GUI3DManager": () => (
                    /* reexport safe */
                    _gui3DManager__WEBPACK_IMPORTED_MODULE_3__.GUI3DManager
                  ),
                  /* harmony export */
                  "GizmoHandle": () => (
                    /* reexport safe */
                    _gizmos_index__WEBPACK_IMPORTED_MODULE_2__.GizmoHandle
                  ),
                  /* harmony export */
                  "HandMenu": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.HandMenu
                  ),
                  /* harmony export */
                  "HandleMaterial": () => (
                    /* reexport safe */
                    _materials_index__WEBPACK_IMPORTED_MODULE_1__.HandleMaterial
                  ),
                  /* harmony export */
                  "HandleState": () => (
                    /* reexport safe */
                    _gizmos_index__WEBPACK_IMPORTED_MODULE_2__.HandleState
                  ),
                  /* harmony export */
                  "HolographicBackplate": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.HolographicBackplate
                  ),
                  /* harmony export */
                  "HolographicButton": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.HolographicButton
                  ),
                  /* harmony export */
                  "HolographicSlate": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.HolographicSlate
                  ),
                  /* harmony export */
                  "MRDLBackplateMaterial": () => (
                    /* reexport safe */
                    _materials_index__WEBPACK_IMPORTED_MODULE_1__.MRDLBackplateMaterial
                  ),
                  /* harmony export */
                  "MRDLSliderBarMaterial": () => (
                    /* reexport safe */
                    _materials_index__WEBPACK_IMPORTED_MODULE_1__.MRDLSliderBarMaterial
                  ),
                  /* harmony export */
                  "MRDLSliderThumbMaterial": () => (
                    /* reexport safe */
                    _materials_index__WEBPACK_IMPORTED_MODULE_1__.MRDLSliderThumbMaterial
                  ),
                  /* harmony export */
                  "MeshButton3D": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.MeshButton3D
                  ),
                  /* harmony export */
                  "NearMenu": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.NearMenu
                  ),
                  /* harmony export */
                  "PlanePanel": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.PlanePanel
                  ),
                  /* harmony export */
                  "ScatterPanel": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.ScatterPanel
                  ),
                  /* harmony export */
                  "SideHandle": () => (
                    /* reexport safe */
                    _gizmos_index__WEBPACK_IMPORTED_MODULE_2__.SideHandle
                  ),
                  /* harmony export */
                  "SlateGizmo": () => (
                    /* reexport safe */
                    _gizmos_index__WEBPACK_IMPORTED_MODULE_2__.SlateGizmo
                  ),
                  /* harmony export */
                  "Slider3D": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.Slider3D
                  ),
                  /* harmony export */
                  "SpherePanel": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.SpherePanel
                  ),
                  /* harmony export */
                  "StackPanel3D": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.StackPanel3D
                  ),
                  /* harmony export */
                  "TouchButton3D": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.TouchButton3D
                  ),
                  /* harmony export */
                  "TouchHolographicButton": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.TouchHolographicButton
                  ),
                  /* harmony export */
                  "TouchHolographicButtonV3": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.TouchHolographicButtonV3
                  ),
                  /* harmony export */
                  "TouchHolographicMenu": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.TouchHolographicMenu
                  ),
                  /* harmony export */
                  "TouchMeshButton3D": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.TouchMeshButton3D
                  ),
                  /* harmony export */
                  "Vector3WithInfo": () => (
                    /* reexport safe */
                    _vector3WithInfo__WEBPACK_IMPORTED_MODULE_4__.Vector3WithInfo
                  ),
                  /* harmony export */
                  "VolumeBasedPanel": () => (
                    /* reexport safe */
                    _controls_index__WEBPACK_IMPORTED_MODULE_0__.VolumeBasedPanel
                  )
                  /* harmony export */
                });
                var _controls_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! ./controls/index */
                  "../../../lts/gui/dist/3D/controls/index.js"
                );
                var _materials_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./materials/index */
                  "../../../lts/gui/dist/3D/materials/index.js"
                );
                var _gizmos_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./gizmos/index */
                  "../../../lts/gui/dist/3D/gizmos/index.js"
                );
                var _gui3DManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./gui3DManager */
                  "../../../lts/gui/dist/3D/gui3DManager.js"
                );
                var _vector3WithInfo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
                  /*! ./vector3WithInfo */
                  "../../../lts/gui/dist/3D/vector3WithInfo.js"
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/fluent/fluentMaterial.js": (
              /*!*******************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/fluent/fluentMaterial.js ***!
                \*******************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "FluentMaterial": () => (
                    /* binding */
                    FluentMaterial
                  ),
                  /* harmony export */
                  "FluentMaterialDefines": () => (
                    /* binding */
                    FluentMaterialDefines
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Maths/math.color */
                  "core/Misc/perfCounter"
                );
                var core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__);
                var _shaders_fluent_vertex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./shaders/fluent.vertex */
                  "../../../lts/gui/dist/3D/materials/fluent/shaders/fluent.vertex.js"
                );
                var _shaders_fluent_fragment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./shaders/fluent.fragment */
                  "../../../lts/gui/dist/3D/materials/fluent/shaders/fluent.fragment.js"
                );
                var FluentMaterialDefines = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(FluentMaterialDefines2, _super);
                    function FluentMaterialDefines2() {
                      var _this = _super.call(this) || this;
                      _this.INNERGLOW = false;
                      _this.BORDER = false;
                      _this.HOVERLIGHT = false;
                      _this.TEXTURE = false;
                      _this.rebuild();
                      return _this;
                    }
                    return FluentMaterialDefines2;
                  }(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialDefines)
                );
                var FluentMaterial = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(FluentMaterial2, _super);
                    function FluentMaterial2(name, scene) {
                      var _this = _super.call(this, name, scene) || this;
                      _this.innerGlowColorIntensity = 0.5;
                      _this.innerGlowColor = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color3(1, 1, 1);
                      _this.albedoColor = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color3(0.3, 0.35, 0.4);
                      _this.renderBorders = false;
                      _this.borderWidth = 0.5;
                      _this.edgeSmoothingValue = 0.02;
                      _this.borderMinValue = 0.1;
                      _this.renderHoverLight = false;
                      _this.hoverRadius = 0.01;
                      _this.hoverColor = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color4(0.3, 0.3, 0.3, 1);
                      _this.hoverPosition = core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector3.Zero();
                      return _this;
                    }
                    FluentMaterial2.prototype.needAlphaBlending = function() {
                      return this.alpha !== 1;
                    };
                    FluentMaterial2.prototype.needAlphaTesting = function() {
                      return false;
                    };
                    FluentMaterial2.prototype.getAlphaTestTexture = function() {
                      return null;
                    };
                    FluentMaterial2.prototype.isReadyForSubMesh = function(mesh, subMesh) {
                      if (this.isFrozen) {
                        if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {
                          return true;
                        }
                      }
                      if (!subMesh.materialDefines) {
                        subMesh.materialDefines = new FluentMaterialDefines();
                      }
                      var scene = this.getScene();
                      var defines = subMesh.materialDefines;
                      if (!this.checkReadyOnEveryCall && subMesh.effect) {
                        if (defines._renderId === scene.getRenderId()) {
                          return true;
                        }
                      }
                      if (defines._areTexturesDirty) {
                        defines.INNERGLOW = this.innerGlowColorIntensity > 0;
                        defines.BORDER = this.renderBorders;
                        defines.HOVERLIGHT = this.renderHoverLight;
                        if (this._albedoTexture) {
                          if (!this._albedoTexture.isReadyOrNotBlocking()) {
                            return false;
                          } else {
                            defines.TEXTURE = true;
                          }
                        } else {
                          defines.TEXTURE = false;
                        }
                      }
                      var engine = scene.getEngine();
                      if (defines.isDirty) {
                        defines.markAsProcessed();
                        scene.resetCachedMaterial();
                        var attribs = [core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.PositionKind];
                        attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.NormalKind);
                        attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.UVKind);
                        var shaderName = "fluent";
                        var uniforms = [
                          "world",
                          "viewProjection",
                          "innerGlowColor",
                          "albedoColor",
                          "borderWidth",
                          "edgeSmoothingValue",
                          "scaleFactor",
                          "borderMinValue",
                          "hoverColor",
                          "hoverPosition",
                          "hoverRadius",
                          "textureMatrix"
                        ];
                        var samplers = ["albedoSampler"];
                        var uniformBuffers = new Array();
                        core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.PrepareUniformsAndSamplersList({
                          uniformsNames: uniforms,
                          uniformBuffersNames: uniformBuffers,
                          samplers,
                          defines,
                          maxSimultaneousLights: 4
                        });
                        var join = defines.toString();
                        subMesh.setEffect(scene.getEngine().createEffect(shaderName, {
                          attributes: attribs,
                          uniformsNames: uniforms,
                          uniformBuffersNames: uniformBuffers,
                          samplers,
                          defines: join,
                          fallbacks: null,
                          onCompiled: this.onCompiled,
                          onError: this.onError,
                          indexParameters: { maxSimultaneousLights: 4 }
                        }, engine), defines, this._materialContext);
                      }
                      if (!subMesh.effect || !subMesh.effect.isReady()) {
                        return false;
                      }
                      defines._renderId = scene.getRenderId();
                      subMesh.effect._wasPreviouslyReady = true;
                      return true;
                    };
                    FluentMaterial2.prototype.bindForSubMesh = function(world, mesh, subMesh) {
                      var scene = this.getScene();
                      var defines = subMesh.materialDefines;
                      if (!defines) {
                        return;
                      }
                      var effect = subMesh.effect;
                      if (!effect) {
                        return;
                      }
                      this._activeEffect = effect;
                      this.bindOnlyWorldMatrix(world);
                      this._activeEffect.setMatrix("viewProjection", scene.getTransformMatrix());
                      if (this._mustRebind(scene, effect)) {
                        this._activeEffect.setColor4("albedoColor", this.albedoColor, this.alpha);
                        if (defines.INNERGLOW) {
                          this._activeEffect.setColor4("innerGlowColor", this.innerGlowColor, this.innerGlowColorIntensity);
                        }
                        if (defines.BORDER) {
                          this._activeEffect.setFloat("borderWidth", this.borderWidth);
                          this._activeEffect.setFloat("edgeSmoothingValue", this.edgeSmoothingValue);
                          this._activeEffect.setFloat("borderMinValue", this.borderMinValue);
                          mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Vector3[0]);
                          this._activeEffect.setVector3("scaleFactor", core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.TmpVectors.Vector3[0]);
                        }
                        if (defines.HOVERLIGHT) {
                          this._activeEffect.setDirectColor4("hoverColor", this.hoverColor);
                          this._activeEffect.setFloat("hoverRadius", this.hoverRadius);
                          this._activeEffect.setVector3("hoverPosition", this.hoverPosition);
                        }
                        if (defines.TEXTURE && this._albedoTexture) {
                          this._activeEffect.setTexture("albedoSampler", this._albedoTexture);
                          var matrix = this._albedoTexture.getTextureMatrix();
                          this._activeEffect.setMatrix("textureMatrix", matrix);
                        }
                      }
                      this._afterBind(mesh, this._activeEffect);
                    };
                    FluentMaterial2.prototype.getActiveTextures = function() {
                      var activeTextures = _super.prototype.getActiveTextures.call(this);
                      return activeTextures;
                    };
                    FluentMaterial2.prototype.hasTexture = function(texture) {
                      if (_super.prototype.hasTexture.call(this, texture)) {
                        return true;
                      }
                      return false;
                    };
                    FluentMaterial2.prototype.dispose = function(forceDisposeEffect) {
                      _super.prototype.dispose.call(this, forceDisposeEffect);
                    };
                    FluentMaterial2.prototype.clone = function(name) {
                      var _this = this;
                      return core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.SerializationHelper.Clone(function() {
                        return new FluentMaterial2(name, _this.getScene());
                      }, this);
                    };
                    FluentMaterial2.prototype.serialize = function() {
                      var serializationObject = _super.prototype.serialize.call(this);
                      serializationObject.customType = "BABYLON.GUI.FluentMaterial";
                      return serializationObject;
                    };
                    FluentMaterial2.prototype.getClassName = function() {
                      return "FluentMaterial";
                    };
                    FluentMaterial2.Parse = function(source, scene, rootUrl) {
                      return core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.SerializationHelper.Parse(function() {
                        return new FluentMaterial2(source.name, scene);
                      }, source, scene, rootUrl);
                    };
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)(),
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.expandToProperty)("_markAllSubMeshesAsTexturesDirty")
                    ], FluentMaterial2.prototype, "innerGlowColorIntensity", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serializeAsColor3)()
                    ], FluentMaterial2.prototype, "innerGlowColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serializeAsColor3)()
                    ], FluentMaterial2.prototype, "albedoColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)(),
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.expandToProperty)("_markAllSubMeshesAsTexturesDirty")
                    ], FluentMaterial2.prototype, "renderBorders", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentMaterial2.prototype, "borderWidth", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentMaterial2.prototype, "edgeSmoothingValue", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentMaterial2.prototype, "borderMinValue", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)(),
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.expandToProperty)("_markAllSubMeshesAsTexturesDirty")
                    ], FluentMaterial2.prototype, "renderHoverLight", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentMaterial2.prototype, "hoverRadius", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serializeAsColor4)()
                    ], FluentMaterial2.prototype, "hoverColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serializeAsVector3)()
                    ], FluentMaterial2.prototype, "hoverPosition", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serializeAsTexture)("albedoTexture")
                    ], FluentMaterial2.prototype, "_albedoTexture", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.expandToProperty)("_markAllSubMeshesAsTexturesAndMiscDirty")
                    ], FluentMaterial2.prototype, "albedoTexture", void 0);
                    return FluentMaterial2;
                  }(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.PushMaterial)
                );
                (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.FluentMaterial", FluentMaterial);
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/fluent/index.js": (
              /*!**********************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/fluent/index.js ***!
                \**********************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "FluentMaterial": () => (
                    /* reexport safe */
                    _fluentMaterial__WEBPACK_IMPORTED_MODULE_0__.FluentMaterial
                  ),
                  /* harmony export */
                  "FluentMaterialDefines": () => (
                    /* reexport safe */
                    _fluentMaterial__WEBPACK_IMPORTED_MODULE_0__.FluentMaterialDefines
                  )
                  /* harmony export */
                });
                var _fluentMaterial__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! ./fluentMaterial */
                  "../../../lts/gui/dist/3D/materials/fluent/fluentMaterial.js"
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/fluent/shaders/fluent.fragment.js": (
              /*!****************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/fluent/shaders/fluent.fragment.js ***!
                \****************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "fluentPixelShader": () => (
                    /* binding */
                    fluentPixelShader
                  )
                  /* harmony export */
                });
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Engines/shaderStore */
                  "core/Misc/perfCounter"
                );
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
                var name = "fluentPixelShader";
                var shader = "precision highp float;\nvarying vec2 vUV;\nuniform vec4 albedoColor;\n#ifdef INNERGLOW\nuniform vec4 innerGlowColor;\n#endif\n#ifdef BORDER\nvarying vec2 scaleInfo;\nuniform float edgeSmoothingValue;\nuniform float borderMinValue;\n#endif\n#ifdef HOVERLIGHT\nvarying vec3 worldPosition;\nuniform vec3 hoverPosition;\nuniform vec4 hoverColor;\nuniform float hoverRadius;\n#endif\n#ifdef TEXTURE\nuniform sampler2D albedoSampler;\nuniform mat4 textureMatrix;\nvec2 finalUV;\n#endif\nvoid main(void) {\nvec3 albedo=albedoColor.rgb;\nfloat alpha=albedoColor.a;\n#ifdef TEXTURE\nfinalUV=vec2(textureMatrix*vec4(vUV,1.0,0.0));\nalbedo=texture2D(albedoSampler,finalUV).rgb;\n#endif\n#ifdef HOVERLIGHT\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\n#else\nfloat pointToHover=1.0;\n#endif\n#ifdef BORDER \nfloat borderPower=10.0;\nfloat inverseBorderPower=1.0/borderPower;\nvec3 borderColor=albedo*borderPower;\nvec2 distanceToEdge;\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \nalbedo+=borderColor;\nalpha=max(alpha,borderValue);\n#endif\n#ifdef INNERGLOW\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\nuvGlow=uvGlow*uvGlow;\nuvGlow=uvGlow*uvGlow;\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \n#endif\ngl_FragColor=vec4(albedo,alpha);\n}";
                core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
                var fluentPixelShader = { name, shader };
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/fluent/shaders/fluent.vertex.js": (
              /*!**************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/fluent/shaders/fluent.vertex.js ***!
                \**************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "fluentVertexShader": () => (
                    /* binding */
                    fluentVertexShader
                  )
                  /* harmony export */
                });
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Engines/shaderStore */
                  "core/Misc/perfCounter"
                );
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
                var name = "fluentVertexShader";
                var shader = "precision highp float;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nuniform mat4 world;\nuniform mat4 viewProjection;\nvarying vec2 vUV;\n#ifdef BORDER\nvarying vec2 scaleInfo;\nuniform float borderWidth;\nuniform vec3 scaleFactor;\n#endif\n#ifdef HOVERLIGHT\nvarying vec3 worldPosition;\n#endif\nvoid main(void) {\nvUV=uv;\n#ifdef BORDER\nvec3 scale=scaleFactor;\nfloat minScale=min(min(scale.x,scale.y),scale.z);\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\nfloat areaYZ=scale.y*scale.z;\nfloat areaXZ=scale.x*scale.z;\nfloat areaXY=scale.x*scale.y;\nfloat scaledBorderWidth=borderWidth; \nif (abs(normal.x)==1.0) \n{\nscale.x=scale.y;\nscale.y=scale.z;\nif (areaYZ>areaXZ && areaYZ>areaXY)\n{\nscaledBorderWidth*=minOverMiddleScale;\n}\n}\nelse if (abs(normal.y)==1.0) \n{\nscale.x=scale.z;\nif (areaXZ>areaXY && areaXZ>areaYZ)\n{\nscaledBorderWidth*=minOverMiddleScale;\n}\n}\nelse \n{\nif (areaXY>areaYZ && areaXY>areaXZ)\n{\nscaledBorderWidth*=minOverMiddleScale;\n}\n}\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\nif (scale.x>scale.y)\n{\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\nscaleInfo.y=1.0-scaledBorderWidth;\n}\nelse\n{\nscaleInfo.x=1.0-scaledBorderWidth;\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\n} \n#endif \nvec4 worldPos=world*vec4(position,1.0);\n#ifdef HOVERLIGHT\nworldPosition=worldPos.xyz;\n#endif\ngl_Position=viewProjection*worldPos;\n}\n";
                core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
                var fluentVertexShader = { name, shader };
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/fluentBackplate/fluentBackplateMaterial.js": (
              /*!*************************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/fluentBackplate/fluentBackplateMaterial.js ***!
                \*************************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "FluentBackplateMaterial": () => (
                    /* binding */
                    FluentBackplateMaterial
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Engines/constants */
                  "core/Misc/perfCounter"
                );
                var core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__);
                var _shaders_fluentBackplate_fragment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./shaders/fluentBackplate.fragment */
                  "../../../lts/gui/dist/3D/materials/fluentBackplate/shaders/fluentBackplate.fragment.js"
                );
                var _shaders_fluentBackplate_vertex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./shaders/fluentBackplate.vertex */
                  "../../../lts/gui/dist/3D/materials/fluentBackplate/shaders/fluentBackplate.vertex.js"
                );
                var FluentBackplateMaterialDefines = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(FluentBackplateMaterialDefines2, _super);
                    function FluentBackplateMaterialDefines2() {
                      var _this = _super.call(this) || this;
                      _this.BLOB_ENABLE = true;
                      _this.BLOB_ENABLE_2 = true;
                      _this.SMOOTH_EDGES = true;
                      _this.IRIDESCENT_MAP_ENABLE = true;
                      _this._needNormals = true;
                      _this.rebuild();
                      return _this;
                    }
                    return FluentBackplateMaterialDefines2;
                  }(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialDefines)
                );
                var FluentBackplateMaterial = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(FluentBackplateMaterial2, _super);
                    function FluentBackplateMaterial2(name, scene) {
                      var _this = _super.call(this, name, scene) || this;
                      _this.radius = 0.03;
                      _this.lineWidth = 0.01;
                      _this.absoluteSizes = false;
                      _this._filterWidth = 1;
                      _this.baseColor = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color4(0.0392157, 0.0666667, 0.207843, 1);
                      _this.lineColor = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color4(0.14902, 0.133333, 0.384314, 1);
                      _this.blobIntensity = 0.98;
                      _this.blobFarSize = 0.04;
                      _this.blobNearDistance = 0;
                      _this.blobFarDistance = 0.08;
                      _this.blobFadeLength = 0.08;
                      _this.blobNearSize = 0.22;
                      _this.blobPulse = 0;
                      _this.blobFade = 0;
                      _this.blobNearSize2 = 0.22;
                      _this.blobPulse2 = 0;
                      _this.blobFade2 = 0;
                      _this._rate = 0.135;
                      _this.highlightColor = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color4(0.98, 0.98, 0.98, 1);
                      _this.highlightWidth = 0.25;
                      _this._highlightTransform = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector4(1, 1, 0, 0);
                      _this._highlight = 1;
                      _this.iridescenceIntensity = 0;
                      _this.iridescenceEdgeIntensity = 1;
                      _this._angle = -45;
                      _this.fadeOut = 1;
                      _this._reflected = true;
                      _this._frequency = 1;
                      _this._verticalOffset = 0;
                      _this.globalLeftIndexTipPosition = core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector3.Zero();
                      _this._globalLeftIndexTipPosition4 = core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector4.Zero();
                      _this.globalRightIndexTipPosition = core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector3.Zero();
                      _this._globalRightIndexTipPosition4 = core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector4.Zero();
                      _this.alphaMode = core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Constants.ALPHA_DISABLE;
                      _this.backFaceCulling = false;
                      _this._blobTexture = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Texture(FluentBackplateMaterial2.BLOB_TEXTURE_URL, _this.getScene(), true, false, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Texture.NEAREST_SAMPLINGMODE);
                      _this._iridescentMap = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Texture(FluentBackplateMaterial2.IM_TEXTURE_URL, _this.getScene(), true, false, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Texture.NEAREST_SAMPLINGMODE);
                      return _this;
                    }
                    FluentBackplateMaterial2.prototype.needAlphaBlending = function() {
                      return false;
                    };
                    FluentBackplateMaterial2.prototype.needAlphaTesting = function() {
                      return false;
                    };
                    FluentBackplateMaterial2.prototype.getAlphaTestTexture = function() {
                      return null;
                    };
                    FluentBackplateMaterial2.prototype.isReadyForSubMesh = function(mesh, subMesh) {
                      if (this.isFrozen) {
                        if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {
                          return true;
                        }
                      }
                      if (!subMesh.materialDefines) {
                        subMesh.materialDefines = new FluentBackplateMaterialDefines();
                      }
                      var defines = subMesh.materialDefines;
                      var scene = this.getScene();
                      if (this._isReadyForSubMesh(subMesh)) {
                        return true;
                      }
                      var engine = scene.getEngine();
                      core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);
                      if (defines.isDirty) {
                        defines.markAsProcessed();
                        scene.resetCachedMaterial();
                        var fallbacks = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.EffectFallbacks();
                        if (defines.FOG) {
                          fallbacks.addFallback(1, "FOG");
                        }
                        core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);
                        defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;
                        var attribs = [core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.PositionKind];
                        if (defines.NORMAL) {
                          attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.NormalKind);
                        }
                        if (defines.UV1) {
                          attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.UVKind);
                        }
                        if (defines.UV2) {
                          attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.UV2Kind);
                        }
                        if (defines.VERTEXCOLOR) {
                          attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.ColorKind);
                        }
                        if (defines.TANGENT) {
                          attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.TangentKind);
                        }
                        core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.PrepareAttributesForInstances(attribs, defines);
                        var shaderName = "fluentBackplate";
                        var join = defines.toString();
                        var uniforms = [
                          "world",
                          "viewProjection",
                          "cameraPosition",
                          "_Radius_",
                          "_Line_Width_",
                          "_Absolute_Sizes_",
                          "_Filter_Width_",
                          "_Base_Color_",
                          "_Line_Color_",
                          "_Radius_Top_Left_",
                          "_Radius_Top_Right_",
                          "_Radius_Bottom_Left_",
                          "_Radius_Bottom_Right_",
                          "_Blob_Position_",
                          "_Blob_Intensity_",
                          "_Blob_Near_Size_",
                          "_Blob_Far_Size_",
                          "_Blob_Near_Distance_",
                          "_Blob_Far_Distance_",
                          "_Blob_Fade_Length_",
                          "_Blob_Pulse_",
                          "_Blob_Fade_",
                          "_Blob_Texture_",
                          "_Blob_Position_2_",
                          "_Blob_Near_Size_2_",
                          "_Blob_Pulse_2_",
                          "_Blob_Fade_2_",
                          "_Rate_",
                          "_Highlight_Color_",
                          "_Highlight_Width_",
                          "_Highlight_Transform_",
                          "_Highlight_",
                          "_Iridescence_Intensity_",
                          "_Iridescence_Edge_Intensity_",
                          "_Angle_",
                          "_Fade_Out_",
                          "_Reflected_",
                          "_Frequency_",
                          "_Vertical_Offset_",
                          "_Iridescent_Map_",
                          "_Use_Global_Left_Index_",
                          "_Use_Global_Right_Index_",
                          "Global_Left_Index_Tip_Position",
                          "Global_Right_Index_Tip_Position"
                        ];
                        var samplers = ["_Blob_Texture_", "_Iridescent_Map_"];
                        var uniformBuffers = new Array();
                        core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.PrepareUniformsAndSamplersList({
                          uniformsNames: uniforms,
                          uniformBuffersNames: uniformBuffers,
                          samplers,
                          defines,
                          maxSimultaneousLights: 4
                        });
                        subMesh.setEffect(scene.getEngine().createEffect(shaderName, {
                          attributes: attribs,
                          uniformsNames: uniforms,
                          uniformBuffersNames: uniformBuffers,
                          samplers,
                          defines: join,
                          fallbacks,
                          onCompiled: this.onCompiled,
                          onError: this.onError,
                          indexParameters: { maxSimultaneousLights: 4 }
                        }, engine), defines, this._materialContext);
                      }
                      if (!subMesh.effect || !subMesh.effect.isReady()) {
                        return false;
                      }
                      defines._renderId = scene.getRenderId();
                      subMesh.effect._wasPreviouslyReady = true;
                      return true;
                    };
                    FluentBackplateMaterial2.prototype.bindForSubMesh = function(world, mesh, subMesh) {
                      var _a, _b;
                      var defines = subMesh.materialDefines;
                      if (!defines) {
                        return;
                      }
                      var effect = subMesh.effect;
                      if (!effect) {
                        return;
                      }
                      this._activeEffect = effect;
                      this.bindOnlyWorldMatrix(world);
                      this._activeEffect.setMatrix("viewProjection", this.getScene().getTransformMatrix());
                      this._activeEffect.setVector3("cameraPosition", (_b = (_a = this.getScene().activeCamera) === null || _a === void 0 ? void 0 : _a.position) !== null && _b !== void 0 ? _b : core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector3.ZeroReadOnly);
                      this._activeEffect.setFloat("_Radius_", this.radius);
                      this._activeEffect.setFloat("_Line_Width_", this.lineWidth);
                      this._activeEffect.setFloat("_Absolute_Sizes_", this.absoluteSizes ? 1 : 0);
                      this._activeEffect.setFloat("_Filter_Width_", this._filterWidth);
                      this._activeEffect.setDirectColor4("_Base_Color_", this.baseColor);
                      this._activeEffect.setDirectColor4("_Line_Color_", this.lineColor);
                      this._activeEffect.setFloat("_Radius_Top_Left_", 1);
                      this._activeEffect.setFloat("_Radius_Top_Right_", 1);
                      this._activeEffect.setFloat("_Radius_Bottom_Left_", 1);
                      this._activeEffect.setFloat("_Radius_Bottom_Right_", 1);
                      this._activeEffect.setFloat("_Blob_Intensity_", this.blobIntensity);
                      this._activeEffect.setFloat("_Blob_Near_Size_", this.blobNearSize);
                      this._activeEffect.setFloat("_Blob_Far_Size_", this.blobFarSize);
                      this._activeEffect.setFloat("_Blob_Near_Distance_", this.blobNearDistance);
                      this._activeEffect.setFloat("_Blob_Far_Distance_", this.blobFarDistance);
                      this._activeEffect.setFloat("_Blob_Fade_Length_", this.blobFadeLength);
                      this._activeEffect.setFloat("_Blob_Pulse_", this.blobPulse);
                      this._activeEffect.setFloat("_Blob_Fade_", this.blobFade);
                      this._activeEffect.setTexture("_Blob_Texture_", this._blobTexture);
                      this._activeEffect.setFloat("_Blob_Near_Size_2_", this.blobNearSize2);
                      this._activeEffect.setFloat("_Blob_Pulse_2_", this.blobPulse2);
                      this._activeEffect.setFloat("_Blob_Fade_2_", this.blobFade2);
                      this._activeEffect.setFloat("_Rate_", this._rate);
                      this._activeEffect.setDirectColor4("_Highlight_Color_", this.highlightColor);
                      this._activeEffect.setFloat("_Highlight_Width_", this.highlightWidth);
                      this._activeEffect.setVector4("_Highlight_Transform_", this._highlightTransform);
                      this._activeEffect.setFloat("_Highlight_", this._highlight);
                      this._activeEffect.setFloat("_Iridescence_Intensity_", this.iridescenceIntensity);
                      this._activeEffect.setFloat("_Iridescence_Edge_Intensity_", this.iridescenceEdgeIntensity);
                      this._activeEffect.setFloat("_Angle_", this._angle);
                      this._activeEffect.setFloat("_Fade_Out_", this.fadeOut);
                      this._activeEffect.setFloat("_Reflected_", this._reflected ? 1 : 0);
                      this._activeEffect.setFloat("_Frequency_", this._frequency);
                      this._activeEffect.setFloat("_Vertical_Offset_", this._verticalOffset);
                      this._activeEffect.setTexture("_Iridescent_Map_", this._iridescentMap);
                      this._activeEffect.setFloat("_Use_Global_Left_Index_", 1);
                      this._activeEffect.setFloat("_Use_Global_Right_Index_", 1);
                      this._globalLeftIndexTipPosition4.set(this.globalLeftIndexTipPosition.x, this.globalLeftIndexTipPosition.y, this.globalLeftIndexTipPosition.z, 1);
                      this._activeEffect.setVector4("Global_Left_Index_Tip_Position", this._globalLeftIndexTipPosition4);
                      this._globalRightIndexTipPosition4.set(this.globalRightIndexTipPosition.x, this.globalRightIndexTipPosition.y, this.globalRightIndexTipPosition.z, 1);
                      this._activeEffect.setVector4("Global_Right_Index_Tip_Position", this._globalRightIndexTipPosition4);
                      this._afterBind(mesh, this._activeEffect);
                    };
                    FluentBackplateMaterial2.prototype.getAnimatables = function() {
                      return [];
                    };
                    FluentBackplateMaterial2.prototype.dispose = function(forceDisposeEffect) {
                      _super.prototype.dispose.call(this, forceDisposeEffect);
                      this._blobTexture.dispose();
                      this._iridescentMap.dispose();
                    };
                    FluentBackplateMaterial2.prototype.clone = function(name) {
                      var _this = this;
                      return core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.SerializationHelper.Clone(function() {
                        return new FluentBackplateMaterial2(name, _this.getScene());
                      }, this);
                    };
                    FluentBackplateMaterial2.prototype.serialize = function() {
                      var serializationObject = _super.prototype.serialize.call(this);
                      serializationObject.customType = "BABYLON.FluentBackplateMaterial";
                      return serializationObject;
                    };
                    FluentBackplateMaterial2.prototype.getClassName = function() {
                      return "FluentBackplateMaterial";
                    };
                    FluentBackplateMaterial2.Parse = function(source, scene, rootUrl) {
                      return core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.SerializationHelper.Parse(function() {
                        return new FluentBackplateMaterial2(source.name, scene);
                      }, source, scene, rootUrl);
                    };
                    FluentBackplateMaterial2.BLOB_TEXTURE_URL = "https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-backplate-blob.png";
                    FluentBackplateMaterial2.IM_TEXTURE_URL = "https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-backplate-iridescence.png";
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentBackplateMaterial2.prototype, "radius", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentBackplateMaterial2.prototype, "lineWidth", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentBackplateMaterial2.prototype, "absoluteSizes", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentBackplateMaterial2.prototype, "baseColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentBackplateMaterial2.prototype, "lineColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentBackplateMaterial2.prototype, "blobIntensity", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentBackplateMaterial2.prototype, "blobFarSize", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentBackplateMaterial2.prototype, "blobNearDistance", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentBackplateMaterial2.prototype, "blobFarDistance", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentBackplateMaterial2.prototype, "blobFadeLength", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentBackplateMaterial2.prototype, "blobNearSize", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentBackplateMaterial2.prototype, "blobPulse", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentBackplateMaterial2.prototype, "blobFade", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentBackplateMaterial2.prototype, "blobNearSize2", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentBackplateMaterial2.prototype, "blobPulse2", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentBackplateMaterial2.prototype, "blobFade2", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentBackplateMaterial2.prototype, "highlightColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentBackplateMaterial2.prototype, "highlightWidth", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentBackplateMaterial2.prototype, "iridescenceIntensity", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentBackplateMaterial2.prototype, "iridescenceEdgeIntensity", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentBackplateMaterial2.prototype, "fadeOut", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serializeAsVector3)()
                    ], FluentBackplateMaterial2.prototype, "globalLeftIndexTipPosition", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serializeAsVector3)()
                    ], FluentBackplateMaterial2.prototype, "globalRightIndexTipPosition", void 0);
                    return FluentBackplateMaterial2;
                  }(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.PushMaterial)
                );
                (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.FluentBackplateMaterial", FluentBackplateMaterial);
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/fluentBackplate/index.js": (
              /*!*******************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/fluentBackplate/index.js ***!
                \*******************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "FluentBackplateMaterial": () => (
                    /* reexport safe */
                    _fluentBackplateMaterial__WEBPACK_IMPORTED_MODULE_0__.FluentBackplateMaterial
                  )
                  /* harmony export */
                });
                var _fluentBackplateMaterial__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! ./fluentBackplateMaterial */
                  "../../../lts/gui/dist/3D/materials/fluentBackplate/fluentBackplateMaterial.js"
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/fluentBackplate/shaders/fluentBackplate.fragment.js": (
              /*!**********************************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/fluentBackplate/shaders/fluentBackplate.fragment.js ***!
                \**********************************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "fluentBackplatePixelShader": () => (
                    /* binding */
                    fluentBackplatePixelShader
                  )
                  /* harmony export */
                });
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Engines/shaderStore */
                  "core/Misc/perfCounter"
                );
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
                var name = "fluentBackplatePixelShader";
                var shader = "uniform vec3 cameraPosition;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUV;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec4 vColor;\nvarying vec4 vExtra1;\nvarying vec4 vExtra2;\nvarying vec4 vExtra3;\nuniform float _Radius_;\nuniform float _Line_Width_;\nuniform bool _Absolute_Sizes_;\nuniform float _Filter_Width_;\nuniform vec4 _Base_Color_;\nuniform vec4 _Line_Color_;\nuniform float _Radius_Top_Left_;\nuniform float _Radius_Top_Right_;\nuniform float _Radius_Bottom_Left_;\nuniform float _Radius_Bottom_Right_;\nuniform vec3 _Blob_Position_;\nuniform float _Blob_Intensity_;\nuniform float _Blob_Near_Size_;\nuniform float _Blob_Far_Size_;\nuniform float _Blob_Near_Distance_;\nuniform float _Blob_Far_Distance_;\nuniform float _Blob_Fade_Length_;\nuniform float _Blob_Pulse_;\nuniform float _Blob_Fade_;\nuniform sampler2D _Blob_Texture_;\nuniform vec3 _Blob_Position_2_;\nuniform float _Blob_Near_Size_2_;\nuniform float _Blob_Pulse_2_;\nuniform float _Blob_Fade_2_;\nuniform float _Rate_;\nuniform vec4 _Highlight_Color_;\nuniform float _Highlight_Width_;\nuniform vec4 _Highlight_Transform_;\nuniform float _Highlight_;\nuniform float _Iridescence_Intensity_;\nuniform float _Iridescence_Edge_Intensity_;\nuniform float _Angle_;\nuniform float _Fade_Out_;\nuniform bool _Reflected_;\nuniform float _Frequency_;\nuniform float _Vertical_Offset_;\nuniform sampler2D _Iridescent_Map_;\nuniform bool _Use_Global_Left_Index_;\nuniform bool _Use_Global_Right_Index_;\nuniform vec4 Global_Left_Index_Tip_Position;\nuniform vec4 Global_Right_Index_Tip_Position;\nvoid Round_Rect_Fragment_B31(\nfloat Radius,\nfloat Line_Width,\nvec4 Line_Color,\nfloat Filter_Width,\nvec2 UV,\nfloat Line_Visibility,\nvec4 Rect_Parms,\nvec4 Fill_Color,\nout vec4 Color)\n{\nfloat d=length(max(abs(UV)-Rect_Parms.xy,0.0));\nfloat dx=max(fwidth(d)*Filter_Width,0.00001);\nfloat g=min(Rect_Parms.z,Rect_Parms.w);\nfloat dgrad=max(fwidth(g)*Filter_Width,0.00001);\nfloat Inside_Rect=clamp(g/dgrad,0.0,1.0);\nfloat inner=clamp((d+dx*0.5-max(Radius-Line_Width,d-dx*0.5))/dx,0.0,1.0);\nColor=clamp(mix(Fill_Color,Line_Color,inner),0.0,1.0)*Inside_Rect;\n}\nvoid Blob_Fragment_B71(\nsampler2D Blob_Texture,\nvec4 Blob_Info1,\nvec4 Blob_Info2,\nout vec4 Blob_Color)\n{\nfloat k1=dot(Blob_Info1.xy,Blob_Info1.xy);\nfloat k2=dot(Blob_Info2.xy,Blob_Info2.xy);\nvec3 closer=k1<k2 ? vec3(k1,Blob_Info1.z,Blob_Info1.w) : vec3(k2,Blob_Info2.z,Blob_Info2.w);\nBlob_Color=closer.z*texture(Blob_Texture,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);\n}\nvoid Line_Fragment_B48(\nvec4 Base_Color,\nvec4 Highlight_Color,\nfloat Highlight_Width,\nvec3 Line_Vertex,\nfloat Highlight,\nout vec4 Line_Color)\n{\nfloat k2=1.0-clamp(abs(Line_Vertex.y/Highlight_Width),0.0,1.0);\nLine_Color=mix(Base_Color,Highlight_Color,Highlight*k2);\n}\nvoid Scale_RGB_B54(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{\nResult=vec4(Scalar,Scalar,Scalar,1)*Color;\n}\nvoid Conditional_Float_B38(\nbool Which,\nfloat If_True,\nfloat If_False,\nout float Result)\n{\nResult=Which ? If_True : If_False;\n}\nvoid main()\n{\nfloat R_Q72;\nfloat G_Q72;\nfloat B_Q72;\nfloat A_Q72;\nR_Q72=vColor.r; G_Q72=vColor.g; B_Q72=vColor.b; A_Q72=vColor.a;\nvec4 Blob_Color_Q71;\n#if BLOB_ENABLE\nfloat k1=dot(vExtra2.xy,vExtra2.xy);\nfloat k2=dot(vExtra3.xy,vExtra3.xy);\nvec3 closer=k1<k2 ? vec3(k1,vExtra2.z,vExtra2.w) : vec3(k2,vExtra3.z,vExtra3.w);\nBlob_Color_Q71=closer.z*texture(_Blob_Texture_,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);\n#else\nBlob_Color_Q71=vec4(0,0,0,0);\n#endif\nvec4 Line_Color_Q48;\nLine_Fragment_B48(_Line_Color_,_Highlight_Color_,_Highlight_Width_,vTangent,_Highlight_,Line_Color_Q48);\nfloat X_Q67;\nfloat Y_Q67;\nX_Q67=vUV.x;\nY_Q67=vUV.y;\nvec3 Incident_Q66=normalize(vPosition-cameraPosition);\nvec3 Reflected_Q60=reflect(Incident_Q66,vBinormal);\nfloat Product_Q63=Y_Q67*_Vertical_Offset_;\nfloat Dot_Q68=dot(Incident_Q66, Reflected_Q60);\nfloat Dot_Q57=dot(vNormal, Incident_Q66);\nfloat Result_Q38;\nConditional_Float_B38(_Reflected_,Dot_Q68,Dot_Q57,Result_Q38);\nfloat Product_Q64=Result_Q38*_Frequency_;\nfloat Sum_Q69=Product_Q64+1.0;\nfloat Product_Q70=Sum_Q69*0.5;\nfloat Sum_Q62=Product_Q63+Product_Q70;\nfloat FractF_Q59=fract(Sum_Q62);\nvec2 Vec2_Q65=vec2(FractF_Q59,0.5);\nvec4 Color_Q58;\n#if IRIDESCENT_MAP_ENABLE\nColor_Q58=texture(_Iridescent_Map_,Vec2_Q65);\n#else\nColor_Q58=vec4(0,0,0,0);\n#endif\nvec4 Result_Q54;\nScale_RGB_B54(Color_Q58,_Iridescence_Edge_Intensity_,Result_Q54);\nvec4 Result_Q55;\nScale_RGB_B54(Color_Q58,_Iridescence_Intensity_,Result_Q55);\nvec4 Base_And_Iridescent_Q53;\nBase_And_Iridescent_Q53=Line_Color_Q48+vec4(Result_Q54.rgb,0.0);\nvec4 Base_And_Iridescent_Q56;\nBase_And_Iridescent_Q56=_Base_Color_+vec4(Result_Q55.rgb,0.0);\nvec4 Result_Q52=Base_And_Iridescent_Q53; Result_Q52.a=1.0;\nvec4 Result_Q35=Blob_Color_Q71+(1.0-Blob_Color_Q71.a)*Base_And_Iridescent_Q56;\nvec4 Color_Q31;\nRound_Rect_Fragment_B31(R_Q72,G_Q72,Result_Q52,_Filter_Width_,vUV,1.0,vExtra1,Result_Q35,Color_Q31);\nvec4 Result_Q47=_Fade_Out_*Color_Q31;\nvec4 Out_Color=Result_Q47;\nfloat Clip_Threshold=0.001;\nbool To_sRGB=false;\ngl_FragColor=Out_Color;\n}";
                core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
                var fluentBackplatePixelShader = { name, shader };
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/fluentBackplate/shaders/fluentBackplate.vertex.js": (
              /*!********************************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/fluentBackplate/shaders/fluentBackplate.vertex.js ***!
                \********************************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "fluentBackplateVertexShader": () => (
                    /* binding */
                    fluentBackplateVertexShader
                  )
                  /* harmony export */
                });
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Engines/shaderStore */
                  "core/Misc/perfCounter"
                );
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
                var name = "fluentBackplateVertexShader";
                var shader = "uniform mat4 world;\nuniform mat4 viewProjection;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\n#ifdef TANGENT\nattribute vec3 tangent;\n#else\nconst vec3 tangent=vec3(0.);\n#endif\nuniform float _Radius_;\nuniform float _Line_Width_;\nuniform bool _Absolute_Sizes_;\nuniform float _Filter_Width_;\nuniform vec4 _Base_Color_;\nuniform vec4 _Line_Color_;\nuniform float _Radius_Top_Left_;\nuniform float _Radius_Top_Right_;\nuniform float _Radius_Bottom_Left_;\nuniform float _Radius_Bottom_Right_;\nuniform vec3 _Blob_Position_;\nuniform float _Blob_Intensity_;\nuniform float _Blob_Near_Size_;\nuniform float _Blob_Far_Size_;\nuniform float _Blob_Near_Distance_;\nuniform float _Blob_Far_Distance_;\nuniform float _Blob_Fade_Length_;\nuniform float _Blob_Pulse_;\nuniform float _Blob_Fade_;\nuniform sampler2D _Blob_Texture_;\nuniform vec3 _Blob_Position_2_;\nuniform float _Blob_Near_Size_2_;\nuniform float _Blob_Pulse_2_;\nuniform float _Blob_Fade_2_;\nuniform float _Rate_;\nuniform vec4 _Highlight_Color_;\nuniform float _Highlight_Width_;\nuniform vec4 _Highlight_Transform_;\nuniform float _Highlight_;\nuniform float _Iridescence_Intensity_;\nuniform float _Iridescence_Edge_Intensity_;\nuniform float _Angle_;\nuniform float _Fade_Out_;\nuniform bool _Reflected_;\nuniform float _Frequency_;\nuniform float _Vertical_Offset_;\nuniform sampler2D _Iridescent_Map_;\nuniform bool _Use_Global_Left_Index_;\nuniform bool _Use_Global_Right_Index_;\nuniform vec4 Global_Left_Index_Tip_Position;\nuniform vec4 Global_Right_Index_Tip_Position;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUV;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec4 vColor;\nvarying vec4 vExtra1;\nvarying vec4 vExtra2;\nvarying vec4 vExtra3;\nvoid Object_To_World_Pos_B115(\nvec3 Pos_Object,\nout vec3 Pos_World)\n{\nPos_World=(world*vec4(Pos_Object,1.0)).xyz;\n}\nvoid PickDir_B140(\nfloat Degrees,\nvec3 DirX,\nvec3 DirY,\nout vec3 Dir)\n{\nfloat a=Degrees*3.14159/180.0;\nDir=cos(a)*DirX+sin(a)*DirY;\n}\nvoid Round_Rect_Vertex_B139(\nvec2 UV,\nfloat Radius,\nfloat Margin,\nfloat Anisotropy,\nfloat Gradient1,\nfloat Gradient2,\nout vec2 Rect_UV,\nout vec4 Rect_Parms,\nout vec2 Scale_XY,\nout vec2 Line_UV)\n{\nScale_XY=vec2(Anisotropy,1.0);\nLine_UV=(UV-vec2(0.5,0.5));\nRect_UV=Line_UV*Scale_XY;\nRect_Parms.xy=Scale_XY*0.5-vec2(Radius,Radius)-vec2(Margin,Margin);\nRect_Parms.z=Gradient1; \nRect_Parms.w=Gradient2;\n}\nvoid Line_Vertex_B135(\nvec2 Scale_XY,\nvec2 UV,\nfloat Time,\nfloat Rate,\nvec4 Highlight_Transform,\nout vec3 Line_Vertex)\n{\nfloat angle2=(Rate*Time)*2.0*3.1416;\nfloat sinAngle2=sin(angle2);\nfloat cosAngle2=cos(angle2);\nvec2 xformUV=UV*Highlight_Transform.xy+Highlight_Transform.zw;\nLine_Vertex.x=0.0;\nLine_Vertex.y=cosAngle2*xformUV.x-sinAngle2*xformUV.y;\nLine_Vertex.z=0.0; \n}\nvoid Blob_Vertex_B180(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nfloat Blob_Fade_Length,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nout vec4 Blob_Info)\n{\nvec3 blob=Blob_Position;\nvec3 delta=blob-Position;\nfloat dist=dot(Normal,delta);\nfloat lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);\nfloat fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);\nfloat size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;\nvec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);\nfloat Fade=fadeValue*Intensity*Blob_Fade;\nfloat Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);\nBlob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);\n}\nvoid Move_Verts_B129(\nfloat Anisotropy,\nvec3 P,\nfloat Radius,\nout vec3 New_P,\nout vec2 New_UV,\nout float Radial_Gradient,\nout vec3 Radial_Dir)\n{\nvec2 UV=P.xy*2.0+0.5;\nvec2 center=clamp(UV,0.0,1.0);\nvec2 delta=UV-center;\nvec2 r2=2.0*vec2(Radius/Anisotropy,Radius);\nNew_UV=center+r2*(UV-2.0*center+0.5);\nNew_P=vec3(New_UV-0.5,P.z);\nRadial_Gradient=1.0-length(delta)*2.0;\nRadial_Dir=vec3(delta*r2,0.0);\n}\nvoid Object_To_World_Dir_B132(\nvec3 Dir_Object,\nout vec3 Binormal_World,\nout vec3 Binormal_World_N,\nout float Binormal_Length)\n{\nBinormal_World=(world*vec4(Dir_Object,0.0)).xyz;\nBinormal_Length=length(Binormal_World);\nBinormal_World_N=Binormal_World/Binormal_Length;\n}\nvoid RelativeOrAbsoluteDetail_B147(\nfloat Nominal_Radius,\nfloat Nominal_LineWidth,\nbool Absolute_Measurements,\nfloat Height,\nout float Radius,\nout float Line_Width)\n{\nfloat scale=Absolute_Measurements ? 1.0/Height : 1.0;\nRadius=Nominal_Radius*scale;\nLine_Width=Nominal_LineWidth*scale;\n}\nvoid Edge_AA_Vertex_B130(\nvec3 Position_World,\nvec3 Position_Object,\nvec3 Normal_Object,\nvec3 Eye,\nfloat Radial_Gradient,\nvec3 Radial_Dir,\nvec3 Tangent,\nout float Gradient1,\nout float Gradient2)\n{\nvec3 I=(Eye-Position_World);\nvec3 T=(world* vec4(Tangent,0.0)).xyz;\nfloat g=(dot(T,I)<0.0) ? 0.0 : 1.0;\nif (Normal_Object.z==0.0) { \nGradient1=Position_Object.z>0.0 ? g : 1.0;\nGradient2=Position_Object.z>0.0 ? 1.0 : g;\n} else {\nGradient1=g+(1.0-g)*(Radial_Gradient);\nGradient2=1.0;\n}\n}\nvoid Pick_Radius_B144(\nfloat Radius,\nfloat Radius_Top_Left,\nfloat Radius_Top_Right,\nfloat Radius_Bottom_Left,\nfloat Radius_Bottom_Right,\nvec3 Position,\nout float Result)\n{\nbool whichY=Position.y>0.0;\nResult=Position.x<0.0 ? (whichY ? Radius_Top_Left : Radius_Bottom_Left) : (whichY ? Radius_Top_Right : Radius_Bottom_Right);\nResult*=Radius;\n}\nvoid main()\n{\nvec3 Nrm_World_Q128;\nNrm_World_Q128=normalize((world*vec4(normal,0.0)).xyz);\nvec3 Tangent_World_Q131;\nvec3 Tangent_World_N_Q131;\nfloat Tangent_Length_Q131;\nTangent_World_Q131=(world*vec4(vec3(1,0,0),0.0)).xyz;\nTangent_Length_Q131=length(Tangent_World_Q131);\nTangent_World_N_Q131=Tangent_World_Q131/Tangent_Length_Q131;\nvec3 Binormal_World_Q132;\nvec3 Binormal_World_N_Q132;\nfloat Binormal_Length_Q132;\nObject_To_World_Dir_B132(vec3(0,1,0),Binormal_World_Q132,Binormal_World_N_Q132,Binormal_Length_Q132);\nfloat Anisotropy_Q133=Tangent_Length_Q131/Binormal_Length_Q132;\nvec3 Result_Q177;\nResult_Q177=mix(_Blob_Position_,Global_Left_Index_Tip_Position.xyz,float(_Use_Global_Left_Index_));\nvec3 Result_Q178;\nResult_Q178=mix(_Blob_Position_2_,Global_Right_Index_Tip_Position.xyz,float(_Use_Global_Right_Index_));\nfloat Result_Q144;\nPick_Radius_B144(_Radius_,_Radius_Top_Left_,_Radius_Top_Right_,_Radius_Bottom_Left_,_Radius_Bottom_Right_,position,Result_Q144);\nvec3 Dir_Q140;\nPickDir_B140(_Angle_,Tangent_World_N_Q131,Binormal_World_N_Q132,Dir_Q140);\nfloat Radius_Q147;\nfloat Line_Width_Q147;\nRelativeOrAbsoluteDetail_B147(Result_Q144,_Line_Width_,_Absolute_Sizes_,Binormal_Length_Q132,Radius_Q147,Line_Width_Q147);\nvec4 Out_Color_Q145=vec4(Radius_Q147,Line_Width_Q147,0,1);\nvec3 New_P_Q129;\nvec2 New_UV_Q129;\nfloat Radial_Gradient_Q129;\nvec3 Radial_Dir_Q129;\nMove_Verts_B129(Anisotropy_Q133,position,Radius_Q147,New_P_Q129,New_UV_Q129,Radial_Gradient_Q129,Radial_Dir_Q129);\nvec3 Pos_World_Q115;\nObject_To_World_Pos_B115(New_P_Q129,Pos_World_Q115);\nvec4 Blob_Info_Q180;\n#if BLOB_ENABLE\nBlob_Vertex_B180(Pos_World_Q115,Nrm_World_Q128,Tangent_World_N_Q131,Binormal_World_N_Q132,Result_Q177,_Blob_Intensity_,_Blob_Near_Size_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_,_Blob_Fade_,Blob_Info_Q180);\n#else\nBlob_Info_Q180=vec4(0,0,0,0);\n#endif\nvec4 Blob_Info_Q181;\n#if BLOB_ENABLE_2\nBlob_Vertex_B180(Pos_World_Q115,Nrm_World_Q128,Tangent_World_N_Q131,Binormal_World_N_Q132,Result_Q178,_Blob_Intensity_,_Blob_Near_Size_2_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_2_,_Blob_Fade_2_,Blob_Info_Q181);\n#else\nBlob_Info_Q181=vec4(0,0,0,0);\n#endif\nfloat Gradient1_Q130;\nfloat Gradient2_Q130;\n#if SMOOTH_EDGES\nEdge_AA_Vertex_B130(Pos_World_Q115,position,normal,cameraPosition,Radial_Gradient_Q129,Radial_Dir_Q129,tangent,Gradient1_Q130,Gradient2_Q130);\n#else\nGradient1_Q130=1.0;\nGradient2_Q130=1.0;\n#endif\nvec2 Rect_UV_Q139;\nvec4 Rect_Parms_Q139;\nvec2 Scale_XY_Q139;\nvec2 Line_UV_Q139;\nRound_Rect_Vertex_B139(New_UV_Q129,Radius_Q147,0.0,Anisotropy_Q133,Gradient1_Q130,Gradient2_Q130,Rect_UV_Q139,Rect_Parms_Q139,Scale_XY_Q139,Line_UV_Q139);\nvec3 Line_Vertex_Q135;\nLine_Vertex_B135(Scale_XY_Q139,Line_UV_Q139,0.0,_Rate_,_Highlight_Transform_,Line_Vertex_Q135);\nvec3 Position=Pos_World_Q115;\nvec3 Normal=Dir_Q140;\nvec2 UV=Rect_UV_Q139;\nvec3 Tangent=Line_Vertex_Q135;\nvec3 Binormal=Nrm_World_Q128;\nvec4 Color=Out_Color_Q145;\nvec4 Extra1=Rect_Parms_Q139;\nvec4 Extra2=Blob_Info_Q180;\nvec4 Extra3=Blob_Info_Q181;\ngl_Position=viewProjection*vec4(Position,1);\nvPosition=Position;\nvNormal=Normal;\nvUV=UV;\nvTangent=Tangent;\nvBinormal=Binormal;\nvColor=Color;\nvExtra1=Extra1;\nvExtra2=Extra2;\nvExtra3=Extra3;\n}";
                core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
                var fluentBackplateVertexShader = { name, shader };
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/fluentButton/fluentButtonMaterial.js": (
              /*!*******************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/fluentButton/fluentButtonMaterial.js ***!
                \*******************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "FluentButtonMaterial": () => (
                    /* binding */
                    FluentButtonMaterial
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Engines/constants */
                  "core/Misc/perfCounter"
                );
                var core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__);
                var _shaders_fluentButton_fragment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./shaders/fluentButton.fragment */
                  "../../../lts/gui/dist/3D/materials/fluentButton/shaders/fluentButton.fragment.js"
                );
                var _shaders_fluentButton_vertex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./shaders/fluentButton.vertex */
                  "../../../lts/gui/dist/3D/materials/fluentButton/shaders/fluentButton.vertex.js"
                );
                var FluentButtonMaterialDefines = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(FluentButtonMaterialDefines2, _super);
                    function FluentButtonMaterialDefines2() {
                      var _this = _super.call(this) || this;
                      _this.RELATIVE_WIDTH = true;
                      _this.ENABLE_FADE = true;
                      _this._needNormals = true;
                      _this._needUVs = true;
                      _this.rebuild();
                      return _this;
                    }
                    return FluentButtonMaterialDefines2;
                  }(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialDefines)
                );
                var FluentButtonMaterial = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(FluentButtonMaterial2, _super);
                    function FluentButtonMaterial2(name, scene) {
                      var _this = _super.call(this, name, scene) || this;
                      _this.edgeWidth = 0.04;
                      _this.edgeColor = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color4(0.592157, 0.592157, 0.592157, 1);
                      _this.proximityMaxIntensity = 0.45;
                      _this.proximityFarDistance = 0.16;
                      _this.proximityNearRadius = 1.5;
                      _this.proximityAnisotropy = 1;
                      _this.selectionFuzz = 0.5;
                      _this.selected = 0;
                      _this.selectionFade = 0;
                      _this.selectionFadeSize = 0.3;
                      _this.selectedDistance = 0.08;
                      _this.selectedFadeLength = 0.08;
                      _this.blobIntensity = 0.5;
                      _this.blobFarSize = 0.05;
                      _this.blobNearDistance = 0;
                      _this.blobFarDistance = 0.08;
                      _this.blobFadeLength = 0.08;
                      _this.leftBlobEnable = true;
                      _this.leftBlobNearSize = 0.025;
                      _this.leftBlobPulse = 0;
                      _this.leftBlobFade = 1;
                      _this.leftBlobInnerFade = 0.01;
                      _this.rightBlobEnable = true;
                      _this.rightBlobNearSize = 0.025;
                      _this.rightBlobPulse = 0;
                      _this.rightBlobFade = 1;
                      _this.rightBlobInnerFade = 0.01;
                      _this.activeFaceDir = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, -1);
                      _this.activeFaceUp = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 1, 0);
                      _this.enableFade = true;
                      _this.fadeWidth = 1.5;
                      _this.smoothActiveFace = true;
                      _this.showFrame = false;
                      _this.useBlobTexture = true;
                      _this.globalLeftIndexTipPosition = core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector3.Zero();
                      _this.globalRightIndexTipPosition = core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector3.Zero();
                      _this.alphaMode = core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Constants.ALPHA_ADD;
                      _this.disableDepthWrite = true;
                      _this.backFaceCulling = false;
                      _this._blobTexture = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Texture(FluentButtonMaterial2.BLOB_TEXTURE_URL, _this.getScene(), true, false, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Texture.NEAREST_SAMPLINGMODE);
                      return _this;
                    }
                    FluentButtonMaterial2.prototype.needAlphaBlending = function() {
                      return true;
                    };
                    FluentButtonMaterial2.prototype.needAlphaTesting = function() {
                      return true;
                    };
                    FluentButtonMaterial2.prototype.getAlphaTestTexture = function() {
                      return null;
                    };
                    FluentButtonMaterial2.prototype.isReadyForSubMesh = function(mesh, subMesh) {
                      if (this.isFrozen) {
                        if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {
                          return true;
                        }
                      }
                      if (!subMesh.materialDefines) {
                        subMesh.materialDefines = new FluentButtonMaterialDefines();
                      }
                      var defines = subMesh.materialDefines;
                      var scene = this.getScene();
                      if (this._isReadyForSubMesh(subMesh)) {
                        return true;
                      }
                      var engine = scene.getEngine();
                      core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, false);
                      if (defines.isDirty) {
                        defines.markAsProcessed();
                        scene.resetCachedMaterial();
                        var fallbacks = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.EffectFallbacks();
                        if (defines.FOG) {
                          fallbacks.addFallback(1, "FOG");
                        }
                        core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);
                        defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;
                        var attribs = [core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.PositionKind];
                        if (defines.NORMAL) {
                          attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.NormalKind);
                        }
                        if (defines.UV1) {
                          attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.UVKind);
                        }
                        if (defines.UV2) {
                          attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.UV2Kind);
                        }
                        if (defines.VERTEXCOLOR) {
                          attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.ColorKind);
                        }
                        if (defines.TANGENT) {
                          attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.TangentKind);
                        }
                        core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.PrepareAttributesForInstances(attribs, defines);
                        var shaderName = "fluentButton";
                        var join = defines.toString();
                        var uniforms = [
                          "world",
                          "viewProjection",
                          "cameraPosition",
                          "_Edge_Width_",
                          "_Edge_Color_",
                          "_Relative_Width_",
                          "_Proximity_Max_Intensity_",
                          "_Proximity_Far_Distance_",
                          "_Proximity_Near_Radius_",
                          "_Proximity_Anisotropy_",
                          "_Selection_Fuzz_",
                          "_Selected_",
                          "_Selection_Fade_",
                          "_Selection_Fade_Size_",
                          "_Selected_Distance_",
                          "_Selected_Fade_Length_",
                          "_Blob_Enable_",
                          "_Blob_Position_",
                          "_Blob_Intensity_",
                          "_Blob_Near_Size_",
                          "_Blob_Far_Size_",
                          "_Blob_Near_Distance_",
                          "_Blob_Far_Distance_",
                          "_Blob_Fade_Length_",
                          "_Blob_Inner_Fade_",
                          "_Blob_Pulse_",
                          "_Blob_Fade_",
                          "_Blob_Texture_",
                          "_Blob_Enable_2_",
                          "_Blob_Position_2_",
                          "_Blob_Near_Size_2_",
                          "_Blob_Inner_Fade_2_",
                          "_Blob_Pulse_2_",
                          "_Blob_Fade_2_",
                          "_Active_Face_Dir_",
                          "_Active_Face_Up_",
                          "_Enable_Fade_",
                          "_Fade_Width_",
                          "_Smooth_Active_Face_",
                          "_Show_Frame_",
                          "_Use_Blob_Texture_",
                          "Use_Global_Left_Index",
                          "Use_Global_Right_Index",
                          "Global_Left_Index_Tip_Position",
                          "Global_Right_Index_Tip_Position",
                          "Global_Left_Thumb_Tip_Position",
                          "Global_Right_Thumb_Tip_Position",
                          "Global_Left_Index_Tip_Proximity",
                          "Global_Right_Index_Tip_Proximity"
                        ];
                        var samplers = ["_Blob_Texture_"];
                        var uniformBuffers = new Array();
                        core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.PrepareUniformsAndSamplersList({
                          uniformsNames: uniforms,
                          uniformBuffersNames: uniformBuffers,
                          samplers,
                          defines,
                          maxSimultaneousLights: 4
                        });
                        subMesh.setEffect(scene.getEngine().createEffect(shaderName, {
                          attributes: attribs,
                          uniformsNames: uniforms,
                          uniformBuffersNames: uniformBuffers,
                          samplers,
                          defines: join,
                          fallbacks,
                          onCompiled: this.onCompiled,
                          onError: this.onError,
                          indexParameters: { maxSimultaneousLights: 4 }
                        }, engine), defines, this._materialContext);
                      }
                      if (!subMesh.effect || !subMesh.effect.isReady()) {
                        return false;
                      }
                      defines._renderId = scene.getRenderId();
                      subMesh.effect._wasPreviouslyReady = true;
                      return true;
                    };
                    FluentButtonMaterial2.prototype.bindForSubMesh = function(world, mesh, subMesh) {
                      var scene = this.getScene();
                      var defines = subMesh.materialDefines;
                      if (!defines) {
                        return;
                      }
                      var effect = subMesh.effect;
                      if (!effect) {
                        return;
                      }
                      this._activeEffect = effect;
                      this.bindOnlyWorldMatrix(world);
                      this._activeEffect.setMatrix("viewProjection", scene.getTransformMatrix());
                      this._activeEffect.setVector3("cameraPosition", scene.activeCamera.position);
                      this._activeEffect.setTexture("_Blob_Texture_", this._blobTexture);
                      this._activeEffect.setFloat("_Edge_Width_", this.edgeWidth);
                      this._activeEffect.setColor4("_Edge_Color_", new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color3(this.edgeColor.r, this.edgeColor.g, this.edgeColor.b), this.edgeColor.a);
                      this._activeEffect.setFloat("_Proximity_Max_Intensity_", this.proximityMaxIntensity);
                      this._activeEffect.setFloat("_Proximity_Far_Distance_", this.proximityFarDistance);
                      this._activeEffect.setFloat("_Proximity_Near_Radius_", this.proximityNearRadius);
                      this._activeEffect.setFloat("_Proximity_Anisotropy_", this.proximityAnisotropy);
                      this._activeEffect.setFloat("_Selection_Fuzz_", this.selectionFuzz);
                      this._activeEffect.setFloat("_Selected_", this.selected);
                      this._activeEffect.setFloat("_Selection_Fade_", this.selectionFade);
                      this._activeEffect.setFloat("_Selection_Fade_Size_", this.selectionFadeSize);
                      this._activeEffect.setFloat("_Selected_Distance_", this.selectedDistance);
                      this._activeEffect.setFloat("_Selected_Fade_Length_", this.selectedFadeLength);
                      this._activeEffect.setFloat("_Blob_Enable_", this.leftBlobEnable ? 1 : 0);
                      this._activeEffect.setFloat("_Blob_Intensity_", this.blobIntensity);
                      this._activeEffect.setFloat("_Blob_Near_Size_", this.leftBlobNearSize);
                      this._activeEffect.setFloat("_Blob_Far_Size_", this.blobFarSize);
                      this._activeEffect.setFloat("_Blob_Near_Distance_", this.blobNearDistance);
                      this._activeEffect.setFloat("_Blob_Far_Distance_", this.blobFarDistance);
                      this._activeEffect.setFloat("_Blob_Fade_Length_", this.blobFadeLength);
                      this._activeEffect.setFloat("_Blob_Inner_Fade_", this.leftBlobInnerFade);
                      this._activeEffect.setFloat("_Blob_Pulse_", this.leftBlobPulse);
                      this._activeEffect.setFloat("_Blob_Fade_", this.leftBlobFade);
                      this._activeEffect.setFloat("_Blob_Enable_2_", this.rightBlobEnable ? 1 : 0);
                      this._activeEffect.setFloat("_Blob_Near_Size_2_", this.rightBlobNearSize);
                      this._activeEffect.setFloat("_Blob_Inner_Fade_2_", this.rightBlobInnerFade);
                      this._activeEffect.setFloat("_Blob_Pulse_2_", this.rightBlobPulse);
                      this._activeEffect.setFloat("_Blob_Fade_2_", this.rightBlobFade);
                      this._activeEffect.setVector3("_Active_Face_Dir_", this.activeFaceDir);
                      this._activeEffect.setVector3("_Active_Face_Up_", this.activeFaceUp);
                      this._activeEffect.setFloat("_Fade_Width_", this.fadeWidth);
                      this._activeEffect.setFloat("_Smooth_Active_Face_", this.smoothActiveFace ? 1 : 0);
                      this._activeEffect.setFloat("_Show_Frame_", this.showFrame ? 1 : 0);
                      this._activeEffect.setFloat("_Use_Blob_Texture_", this.useBlobTexture ? 1 : 0);
                      this._activeEffect.setFloat("Use_Global_Left_Index", 1);
                      this._activeEffect.setFloat("Use_Global_Right_Index", 1);
                      this._activeEffect.setVector4("Global_Left_Index_Tip_Position", new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector4(this.globalLeftIndexTipPosition.x, this.globalLeftIndexTipPosition.y, this.globalLeftIndexTipPosition.z, 1));
                      this._activeEffect.setVector4("Global_Right_Index_Tip_Position", new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector4(this.globalRightIndexTipPosition.x, this.globalRightIndexTipPosition.y, this.globalRightIndexTipPosition.z, 1));
                      this._afterBind(mesh, this._activeEffect);
                    };
                    FluentButtonMaterial2.prototype.getAnimatables = function() {
                      return [];
                    };
                    FluentButtonMaterial2.prototype.dispose = function(forceDisposeEffect) {
                      _super.prototype.dispose.call(this, forceDisposeEffect);
                    };
                    FluentButtonMaterial2.prototype.clone = function(name) {
                      var _this = this;
                      return core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.SerializationHelper.Clone(function() {
                        return new FluentButtonMaterial2(name, _this.getScene());
                      }, this);
                    };
                    FluentButtonMaterial2.prototype.serialize = function() {
                      var serializationObject = _super.prototype.serialize.call(this);
                      serializationObject.customType = "BABYLON.FluentButtonMaterial";
                      return serializationObject;
                    };
                    FluentButtonMaterial2.prototype.getClassName = function() {
                      return "FluentButtonMaterial";
                    };
                    FluentButtonMaterial2.Parse = function(source, scene, rootUrl) {
                      return core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.SerializationHelper.Parse(function() {
                        return new FluentButtonMaterial2(source.name, scene);
                      }, source, scene, rootUrl);
                    };
                    FluentButtonMaterial2.BLOB_TEXTURE_URL = "https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-button-blob.png";
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "edgeWidth", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serializeAsColor4)()
                    ], FluentButtonMaterial2.prototype, "edgeColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "proximityMaxIntensity", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "proximityFarDistance", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "proximityNearRadius", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "proximityAnisotropy", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "selectionFuzz", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "selected", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "selectionFade", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "selectionFadeSize", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "selectedDistance", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "selectedFadeLength", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "blobIntensity", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "blobFarSize", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "blobNearDistance", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "blobFarDistance", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "blobFadeLength", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "leftBlobEnable", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "leftBlobNearSize", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "leftBlobPulse", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "leftBlobFade", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "leftBlobInnerFade", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "rightBlobEnable", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "rightBlobNearSize", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "rightBlobPulse", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "rightBlobFade", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "rightBlobInnerFade", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serializeAsVector3)()
                    ], FluentButtonMaterial2.prototype, "activeFaceDir", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serializeAsVector3)()
                    ], FluentButtonMaterial2.prototype, "activeFaceUp", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "enableFade", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "fadeWidth", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "smoothActiveFace", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "showFrame", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], FluentButtonMaterial2.prototype, "useBlobTexture", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serializeAsVector3)()
                    ], FluentButtonMaterial2.prototype, "globalLeftIndexTipPosition", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serializeAsVector3)()
                    ], FluentButtonMaterial2.prototype, "globalRightIndexTipPosition", void 0);
                    return FluentButtonMaterial2;
                  }(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.PushMaterial)
                );
                (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.FluentButtonMaterial", FluentButtonMaterial);
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/fluentButton/index.js": (
              /*!****************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/fluentButton/index.js ***!
                \****************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "FluentButtonMaterial": () => (
                    /* reexport safe */
                    _fluentButtonMaterial__WEBPACK_IMPORTED_MODULE_0__.FluentButtonMaterial
                  )
                  /* harmony export */
                });
                var _fluentButtonMaterial__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! ./fluentButtonMaterial */
                  "../../../lts/gui/dist/3D/materials/fluentButton/fluentButtonMaterial.js"
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/fluentButton/shaders/fluentButton.fragment.js": (
              /*!****************************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/fluentButton/shaders/fluentButton.fragment.js ***!
                \****************************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "fluentButtonPixelShader": () => (
                    /* binding */
                    fluentButtonPixelShader
                  )
                  /* harmony export */
                });
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Engines/shaderStore */
                  "core/Misc/perfCounter"
                );
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
                var name = "fluentButtonPixelShader";
                var shader = "uniform vec3 cameraPosition;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUV;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec4 vColor;\nvarying vec4 vExtra1;\nuniform float _Edge_Width_;\nuniform vec4 _Edge_Color_;\nuniform bool _Relative_Width_;\nuniform float _Proximity_Max_Intensity_;\nuniform float _Proximity_Far_Distance_;\nuniform float _Proximity_Near_Radius_;\nuniform float _Proximity_Anisotropy_;\nuniform float _Selection_Fuzz_;\nuniform float _Selected_;\nuniform float _Selection_Fade_;\nuniform float _Selection_Fade_Size_;\nuniform float _Selected_Distance_;\nuniform float _Selected_Fade_Length_;\nuniform bool _Blob_Enable_;\nuniform vec3 _Blob_Position_;\nuniform float _Blob_Intensity_;\nuniform float _Blob_Near_Size_;\nuniform float _Blob_Far_Size_;\nuniform float _Blob_Near_Distance_;\nuniform float _Blob_Far_Distance_;\nuniform float _Blob_Fade_Length_;\nuniform float _Blob_Inner_Fade_;\nuniform float _Blob_Pulse_;\nuniform float _Blob_Fade_;\nuniform sampler2D _Blob_Texture_;\nuniform bool _Blob_Enable_2_;\nuniform vec3 _Blob_Position_2_;\nuniform float _Blob_Near_Size_2_;\nuniform float _Blob_Inner_Fade_2_;\nuniform float _Blob_Pulse_2_;\nuniform float _Blob_Fade_2_;\nuniform vec3 _Active_Face_Dir_;\nuniform vec3 _Active_Face_Up_;\nuniform bool Enable_Fade;\nuniform float _Fade_Width_;\nuniform bool _Smooth_Active_Face_;\nuniform bool _Show_Frame_;\nuniform bool _Use_Blob_Texture_;\nuniform bool Use_Global_Left_Index;\nuniform bool Use_Global_Right_Index;\nuniform vec4 Global_Left_Index_Tip_Position;\nuniform vec4 Global_Right_Index_Tip_Position;\nuniform vec4 Global_Left_Thumb_Tip_Position;\nuniform vec4 Global_Right_Thumb_Tip_Position;\nuniform float Global_Left_Index_Tip_Proximity;\nuniform float Global_Right_Index_Tip_Proximity;\nvoid Holo_Edge_Fragment_B35(\nvec4 Edges,\nfloat Edge_Width,\nout float NotEdge)\n{\nvec2 c=vec2(min(Edges.r,Edges.g),min(Edges.b,Edges.a));\nvec2 df=fwidth(c)*Edge_Width;\nvec2 g=clamp(c/df,0.0,1.0);\nNotEdge=g.x*g.y;\n}\nvoid Blob_Fragment_B39(\nvec2 UV,\nvec3 Blob_Info,\nsampler2D Blob_Texture,\nout vec4 Blob_Color)\n{\nfloat k=dot(UV,UV);\nBlob_Color=Blob_Info.y*texture(Blob_Texture,vec2(vec2(sqrt(k),Blob_Info.x).x,1.0-vec2(sqrt(k),Blob_Info.x).y))*(1.0-clamp(k,0.0,1.0));\n}\nvec2 FilterStep(vec2 Edge,vec2 X)\n{\nvec2 dX=max(fwidth(X),vec2(0.00001,0.00001));\nreturn clamp( (X+dX-max(Edge,X-dX))/(dX*2.0),0.0,1.0);\n}\nvoid Wireframe_Fragment_B59(\nvec3 Widths,\nvec2 UV,\nfloat Proximity,\nvec4 Edge_Color,\nout vec4 Wireframe)\n{\nvec2 c=min(UV,vec2(1.0,1.0)-UV);\nvec2 g=FilterStep(Widths.xy*0.5,c); \nWireframe=(1.0-min(g.x,g.y))*Proximity*Edge_Color;\n}\nvoid Proximity_B53(\nvec3 Proximity_Center,\nvec3 Proximity_Center_2,\nfloat Proximity_Max_Intensity,\nfloat Proximity_Near_Radius,\nvec3 Position,\nvec3 Show_Selection,\nvec4 Extra1,\nfloat Dist_To_Face,\nfloat Intensity,\nout float Proximity)\n{\nvec2 delta1=Extra1.xy;\nvec2 delta2=Extra1.zw;\nfloat d2=sqrt(min(dot(delta1,delta1),dot(delta2,delta2))+Dist_To_Face*Dist_To_Face);\nProximity=Intensity*Proximity_Max_Intensity*(1.0-clamp(d2/Proximity_Near_Radius,0.0,1.0))*(1.0-Show_Selection.x)+Show_Selection.x;\n}\nvoid To_XYZ_B46(\nvec3 Vec3,\nout float X,\nout float Y,\nout float Z)\n{\nX=Vec3.x;\nY=Vec3.y;\nZ=Vec3.z;\n}\nvoid main()\n{\nfloat NotEdge_Q35;\n#if ENABLE_FADE\nHolo_Edge_Fragment_B35(vColor,_Fade_Width_,NotEdge_Q35);\n#else\nNotEdge_Q35=1.0;\n#endif\nvec4 Blob_Color_Q39;\nfloat k=dot(vUV,vUV);\nvec2 blobTextureCoord=vec2(vec2(sqrt(k),vTangent.x).x,1.0-vec2(sqrt(k),vTangent.x).y);\nvec4 blobColor=mix(vec4(1.0,1.0,1.0,1.0)*step(1.0-vTangent.x,clamp(sqrt(k)+0.1,0.0,1.0)),texture(_Blob_Texture_,blobTextureCoord),float(_Use_Blob_Texture_));\nBlob_Color_Q39=vTangent.y*blobColor*(1.0-clamp(k,0.0,1.0));\nfloat Is_Quad_Q24;\nIs_Quad_Q24=vNormal.z;\nvec3 Blob_Position_Q41= mix(_Blob_Position_,Global_Left_Index_Tip_Position.xyz,float(Use_Global_Left_Index));\nvec3 Blob_Position_Q42= mix(_Blob_Position_2_,Global_Right_Index_Tip_Position.xyz,float(Use_Global_Right_Index));\nfloat X_Q46;\nfloat Y_Q46;\nfloat Z_Q46;\nTo_XYZ_B46(vBinormal,X_Q46,Y_Q46,Z_Q46);\nfloat Proximity_Q53;\nProximity_B53(Blob_Position_Q41,Blob_Position_Q42,_Proximity_Max_Intensity_,_Proximity_Near_Radius_,vPosition,vBinormal,vExtra1,Y_Q46,Z_Q46,Proximity_Q53);\nvec4 Wireframe_Q59;\nWireframe_Fragment_B59(vNormal,vUV,Proximity_Q53,_Edge_Color_,Wireframe_Q59);\nvec4 Wire_Or_Blob_Q23=mix(Wireframe_Q59,Blob_Color_Q39,Is_Quad_Q24);\nvec4 Result_Q22;\nResult_Q22=mix(Wire_Or_Blob_Q23,vec4(0.3,0.3,0.3,0.3),float(_Show_Frame_));\nvec4 Final_Color_Q37=NotEdge_Q35*Result_Q22;\nvec4 Out_Color=Final_Color_Q37;\nfloat Clip_Threshold=0.0;\nbool To_sRGB=false;\ngl_FragColor=Out_Color;\n}";
                core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
                var fluentButtonPixelShader = { name, shader };
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/fluentButton/shaders/fluentButton.vertex.js": (
              /*!**************************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/fluentButton/shaders/fluentButton.vertex.js ***!
                \**************************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "fluentButtonVertexShader": () => (
                    /* binding */
                    fluentButtonVertexShader
                  )
                  /* harmony export */
                });
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Engines/shaderStore */
                  "core/Misc/perfCounter"
                );
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
                var name = "fluentButtonVertexShader";
                var shader = "uniform mat4 world;\nuniform mat4 viewProjection;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec3 tangent;\nattribute vec4 color;\nuniform float _Edge_Width_;\nuniform vec4 _Edge_Color_;\nuniform float _Proximity_Max_Intensity_;\nuniform float _Proximity_Far_Distance_;\nuniform float _Proximity_Near_Radius_;\nuniform float _Proximity_Anisotropy_;\nuniform float _Selection_Fuzz_;\nuniform float _Selected_;\nuniform float _Selection_Fade_;\nuniform float _Selection_Fade_Size_;\nuniform float _Selected_Distance_;\nuniform float _Selected_Fade_Length_;\nuniform bool _Blob_Enable_;\nuniform vec3 _Blob_Position_;\nuniform float _Blob_Intensity_;\nuniform float _Blob_Near_Size_;\nuniform float _Blob_Far_Size_;\nuniform float _Blob_Near_Distance_;\nuniform float _Blob_Far_Distance_;\nuniform float _Blob_Fade_Length_;\nuniform float _Blob_Inner_Fade_;\nuniform float _Blob_Pulse_;\nuniform float _Blob_Fade_;\nuniform sampler2D _Blob_Texture_;\nuniform bool _Blob_Enable_2_;\nuniform vec3 _Blob_Position_2_;\nuniform float _Blob_Near_Size_2_;\nuniform float _Blob_Inner_Fade_2_;\nuniform float _Blob_Pulse_2_;\nuniform float _Blob_Fade_2_;\nuniform vec3 _Active_Face_Dir_;\nuniform vec3 _Active_Face_Up_;\nuniform bool _Enable_Fade_;\nuniform float _Fade_Width_;\nuniform bool _Smooth_Active_Face_;\nuniform bool _Show_Frame_;\nuniform bool Use_Global_Left_Index;\nuniform bool Use_Global_Right_Index;\nuniform vec4 Global_Left_Index_Tip_Position;\nuniform vec4 Global_Right_Index_Tip_Position;\nuniform vec4 Global_Left_Thumb_Tip_Position;\nuniform vec4 Global_Right_Thumb_Tip_Position;\nuniform float Global_Left_Index_Tip_Proximity;\nuniform float Global_Right_Index_Tip_Proximity;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUV;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec4 vColor;\nvarying vec4 vExtra1;\nvoid Blob_Vertex_B47(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nvec4 Vx_Color,\nvec2 UV,\nvec3 Face_Center,\nvec2 Face_Size,\nvec2 In_UV,\nfloat Blob_Fade_Length,\nfloat Selection_Fade,\nfloat Selection_Fade_Size,\nfloat Inner_Fade,\nvec3 Active_Face_Center,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nfloat Blob_Enabled,\nout vec3 Out_Position,\nout vec2 Out_UV,\nout vec3 Blob_Info)\n{\nfloat blobSize,fadeIn;\nvec3 Hit_Position;\nBlob_Info=vec3(0.0,0.0,0.0);\nfloat Hit_Distance=dot(Blob_Position-Face_Center,Normal);\nHit_Position=Blob_Position-Hit_Distance*Normal;\nfloat absD=abs(Hit_Distance);\nfloat lerpVal=clamp((absD-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);\nfadeIn=1.0-clamp((absD-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);\nfloat innerFade=1.0-clamp(-Hit_Distance/Inner_Fade,0.0,1.0);\nfloat farClip=clamp(1.0-step(Blob_Far_Distance+Blob_Fade_Length,absD),0.0,1.0);\nfloat size=mix(Blob_Near_Size,Blob_Far_Size,lerpVal)*farClip;\nblobSize=mix(size,Selection_Fade_Size,Selection_Fade)*innerFade*Blob_Enabled;\nBlob_Info.x=lerpVal*0.5+0.5;\nBlob_Info.y=fadeIn*Intensity*(1.0-Selection_Fade)*Blob_Fade;\nBlob_Info.x*=(1.0-Blob_Pulse);\nvec3 delta=Hit_Position-Face_Center;\nvec2 blobCenterXY=vec2(dot(delta,Tangent),dot(delta,Bitangent));\nvec2 quadUVin=2.0*UV-1.0; \nvec2 blobXY=blobCenterXY+quadUVin*blobSize;\nvec2 blobClipped=clamp(blobXY,-Face_Size*0.5,Face_Size*0.5);\nvec2 blobUV=(blobClipped-blobCenterXY)/max(blobSize,0.0001)*2.0;\nvec3 blobCorner=Face_Center+blobClipped.x*Tangent+blobClipped.y*Bitangent;\nOut_Position=mix(Position,blobCorner,Vx_Color.rrr);\nOut_UV=mix(In_UV,blobUV,Vx_Color.rr);\n}\nvec2 ProjectProximity(\nvec3 blobPosition,\nvec3 position,\nvec3 center,\nvec3 dir,\nvec3 xdir,\nvec3 ydir,\nout float vdistance\n)\n{\nvec3 delta=blobPosition-position;\nvec2 xy=vec2(dot(delta,xdir),dot(delta,ydir));\nvdistance=abs(dot(delta,dir));\nreturn xy;\n}\nvoid Proximity_Vertex_B66(\nvec3 Blob_Position,\nvec3 Blob_Position_2,\nvec3 Active_Face_Center,\nvec3 Active_Face_Dir,\nvec3 Position,\nfloat Proximity_Far_Distance,\nfloat Relative_Scale,\nfloat Proximity_Anisotropy,\nvec3 Up,\nout vec4 Extra1,\nout float Distance_To_Face,\nout float Intensity)\n{\nvec3 Active_Face_Dir_X=normalize(cross(Active_Face_Dir,Up));\nvec3 Active_Face_Dir_Y=cross(Active_Face_Dir,Active_Face_Dir_X);\nfloat distz1,distz2;\nExtra1.xy=ProjectProximity(Blob_Position,Position,Active_Face_Center,Active_Face_Dir,Active_Face_Dir_X*Proximity_Anisotropy,Active_Face_Dir_Y,distz1)/Relative_Scale;\nExtra1.zw=ProjectProximity(Blob_Position_2,Position,Active_Face_Center,Active_Face_Dir,Active_Face_Dir_X*Proximity_Anisotropy,Active_Face_Dir_Y,distz2)/Relative_Scale;\nDistance_To_Face=dot(Active_Face_Dir,Position-Active_Face_Center);\nIntensity=1.0-clamp(min(distz1,distz2)/Proximity_Far_Distance,0.0,1.0);\n}\nvoid Holo_Edge_Vertex_B44(\nvec3 Incident,\nvec3 Normal,\nvec2 UV,\nvec3 Tangent,\nvec3 Bitangent,\nbool Smooth_Active_Face,\nfloat Active,\nout vec4 Holo_Edges)\n{\nfloat NdotI=dot(Incident,Normal);\nvec2 flip=(UV-vec2(0.5,0.5));\nfloat udot=dot(Incident,Tangent)*flip.x*NdotI;\nfloat uval=1.0-float(udot>0.0);\nfloat vdot=-dot(Incident,Bitangent)*flip.y*NdotI;\nfloat vval=1.0-float(vdot>0.0);\nfloat Smooth_And_Active=step(1.0,float(Smooth_Active_Face && Active>0.0));\nuval=mix(uval,max(1.0,uval),Smooth_And_Active); \nvval=mix(vval,max(1.0,vval),Smooth_And_Active);\nHolo_Edges=vec4(1.0,1.0,1.0,1.0)-vec4(uval*UV.x,uval*(1.0-UV.x),vval*UV.y,vval*(1.0-UV.y));\n}\nvoid Object_To_World_Pos_B13(\nvec3 Pos_Object,\nout vec3 Pos_World)\n{\nPos_World=(world*vec4(Pos_Object,1.0)).xyz;\n}\nvoid Choose_Blob_B38(\nvec4 Vx_Color,\nvec3 Position1,\nvec3 Position2,\nbool Blob_Enable_1,\nbool Blob_Enable_2,\nfloat Near_Size_1,\nfloat Near_Size_2,\nfloat Blob_Inner_Fade_1,\nfloat Blob_Inner_Fade_2,\nfloat Blob_Pulse_1,\nfloat Blob_Pulse_2,\nfloat Blob_Fade_1,\nfloat Blob_Fade_2,\nout vec3 Position,\nout float Near_Size,\nout float Inner_Fade,\nout float Blob_Enable,\nout float Fade,\nout float Pulse)\n{\nPosition=Position1*(1.0-Vx_Color.g)+Vx_Color.g*Position2;\nfloat b1=float(Blob_Enable_1);\nfloat b2=float(Blob_Enable_2);\nBlob_Enable=b1+(b2-b1)*Vx_Color.g;\nPulse=Blob_Pulse_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Pulse_2;\nFade=Blob_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Fade_2;\nNear_Size=Near_Size_1*(1.0-Vx_Color.g)+Vx_Color.g*Near_Size_2;\nInner_Fade=Blob_Inner_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Inner_Fade_2;\n}\nvoid Wireframe_Vertex_B51(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nfloat Edge_Width,\nvec2 Face_Size,\nout vec3 Wire_Vx_Pos,\nout vec2 UV,\nout vec2 Widths)\n{\nWidths.xy=Edge_Width/Face_Size;\nfloat x=dot(Position,Tangent);\nfloat y=dot(Position,Bitangent);\nfloat dx=0.5-abs(x);\nfloat newx=(0.5-dx*Widths.x*2.0)*sign(x);\nfloat dy=0.5-abs(y);\nfloat newy=(0.5-dy*Widths.y*2.0)*sign(y);\nWire_Vx_Pos=Normal*0.5+newx*Tangent+newy*Bitangent;\nUV.x=dot(Wire_Vx_Pos,Tangent)+0.5;\nUV.y=dot(Wire_Vx_Pos,Bitangent)+0.5;\n}\nvec2 ramp2(vec2 start,vec2 end,vec2 x)\n{\nreturn clamp((x-start)/(end-start),vec2(0.0,0.0),vec2(1.0,1.0));\n}\nfloat computeSelection(\nvec3 blobPosition,\nvec3 normal,\nvec3 tangent,\nvec3 bitangent,\nvec3 faceCenter,\nvec2 faceSize,\nfloat selectionFuzz,\nfloat farDistance,\nfloat fadeLength\n)\n{\nvec3 delta=blobPosition-faceCenter;\nfloat absD=abs(dot(delta,normal));\nfloat fadeIn=1.0-clamp((absD-farDistance)/fadeLength,0.0,1.0);\nvec2 blobCenterXY=vec2(dot(delta,tangent),dot(delta,bitangent));\nvec2 innerFace=faceSize*(1.0-selectionFuzz)*0.5;\nvec2 selectPulse=ramp2(-faceSize*0.5,-innerFace,blobCenterXY)-ramp2(innerFace,faceSize*0.5,blobCenterXY);\nreturn selectPulse.x*selectPulse.y*fadeIn;\n}\nvoid Selection_Vertex_B48(\nvec3 Blob_Position,\nvec3 Blob_Position_2,\nvec3 Face_Center,\nvec2 Face_Size,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nfloat Selection_Fuzz,\nfloat Selected,\nfloat Far_Distance,\nfloat Fade_Length,\nvec3 Active_Face_Dir,\nout float Show_Selection)\n{\nfloat select1=computeSelection(Blob_Position,Normal,Tangent,Bitangent,Face_Center,Face_Size,Selection_Fuzz,Far_Distance,Fade_Length);\nfloat select2=computeSelection(Blob_Position_2,Normal,Tangent,Bitangent,Face_Center,Face_Size,Selection_Fuzz,Far_Distance,Fade_Length);\nfloat Active=max(0.0,dot(Active_Face_Dir,Normal));\nShow_Selection=mix(max(select1,select2),1.0,Selected)*Active;\n}\nvoid Proximity_Visibility_B54(\nfloat Selection,\nvec3 Proximity_Center,\nvec3 Proximity_Center_2,\nfloat Input_Width,\nfloat Proximity_Far_Distance,\nfloat Proximity_Radius,\nvec3 Active_Face_Center,\nvec3 Active_Face_Dir,\nout float Width)\n{\nvec3 boxEdges=(world*vec4(vec3(0.5,0.5,0.5),0.0)).xyz;\nfloat boxMaxSize=length(boxEdges);\nfloat d1=dot(Proximity_Center-Active_Face_Center,Active_Face_Dir);\nvec3 blob1=Proximity_Center-d1*Active_Face_Dir;\nfloat d2=dot(Proximity_Center_2-Active_Face_Center,Active_Face_Dir);\nvec3 blob2=Proximity_Center_2-d2*Active_Face_Dir;\nvec3 delta1=blob1-Active_Face_Center;\nvec3 delta2=blob2-Active_Face_Center;\nfloat dist1=dot(delta1,delta1);\nfloat dist2=dot(delta2,delta2);\nfloat nearestProxDist=sqrt(min(dist1,dist2));\nWidth=Input_Width*(1.0-step(boxMaxSize+Proximity_Radius,nearestProxDist))*(1.0-step(Proximity_Far_Distance,min(d1,d2))*(1.0-step(0.0001,Selection)));\n}\nvoid Object_To_World_Dir_B67(\nvec3 Dir_Object,\nout vec3 Dir_World)\n{\nDir_World=(world*vec4(Dir_Object,0.0)).xyz;\n}\nvoid main()\n{\nvec3 Active_Face_Center_Q49;\nActive_Face_Center_Q49=(world*vec4(_Active_Face_Dir_*0.5,1.0)).xyz;\nvec3 Blob_Position_Q41= mix(_Blob_Position_,Global_Left_Index_Tip_Position.xyz,float(Use_Global_Left_Index));\nvec3 Blob_Position_Q42= mix(_Blob_Position_2_,Global_Right_Index_Tip_Position.xyz,float(Use_Global_Right_Index));\nvec3 Active_Face_Dir_Q64=normalize((world*vec4(_Active_Face_Dir_,0.0)).xyz);\nfloat Relative_Scale_Q57;\n#if RELATIVE_WIDTH\nRelative_Scale_Q57=length((world*vec4(vec3(0,1,0),0.0)).xyz);\n#else\nRelative_Scale_Q57=1.0;\n#endif\nvec3 Tangent_World_Q30;\nTangent_World_Q30=(world*vec4(tangent,0.0)).xyz;\nvec3 Binormal_World_Q31;\nBinormal_World_Q31=(world*vec4((cross(normal,tangent)),0.0)).xyz;\nvec3 Normal_World_Q60;\nNormal_World_Q60=(world*vec4(normal,0.0)).xyz;\nvec3 Result_Q18=0.5*normal;\nvec3 Dir_World_Q67;\nObject_To_World_Dir_B67(_Active_Face_Up_,Dir_World_Q67);\nfloat Product_Q56=_Edge_Width_*Relative_Scale_Q57;\nvec3 Normal_World_N_Q29=normalize(Normal_World_Q60);\nvec3 Tangent_World_N_Q28=normalize(Tangent_World_Q30);\nvec3 Binormal_World_N_Q32=normalize(Binormal_World_Q31);\nvec3 Position_Q38;\nfloat Near_Size_Q38;\nfloat Inner_Fade_Q38;\nfloat Blob_Enable_Q38;\nfloat Fade_Q38;\nfloat Pulse_Q38;\nChoose_Blob_B38(color,Blob_Position_Q41,Blob_Position_Q42,_Blob_Enable_,_Blob_Enable_2_,_Blob_Near_Size_,_Blob_Near_Size_2_,_Blob_Inner_Fade_,_Blob_Inner_Fade_2_,_Blob_Pulse_,_Blob_Pulse_2_,_Blob_Fade_,_Blob_Fade_2_,Position_Q38,Near_Size_Q38,Inner_Fade_Q38,Blob_Enable_Q38,Fade_Q38,Pulse_Q38);\nvec3 Face_Center_Q33;\nFace_Center_Q33=(world*vec4(Result_Q18,1.0)).xyz;\nvec2 Face_Size_Q50=vec2(length(Tangent_World_Q30),length(Binormal_World_Q31));\nfloat Show_Selection_Q48;\nSelection_Vertex_B48(Blob_Position_Q41,Blob_Position_Q42,Face_Center_Q33,Face_Size_Q50,Normal_World_N_Q29,Tangent_World_N_Q28,Binormal_World_N_Q32,_Selection_Fuzz_,_Selected_,_Selected_Distance_,_Selected_Fade_Length_,Active_Face_Dir_Q64,Show_Selection_Q48);\nvec3 Normalized_Q72=normalize(Dir_World_Q67);\nfloat Active_Q34=max(0.0,dot(Active_Face_Dir_Q64,Normal_World_N_Q29));\nfloat Width_Q54;\nProximity_Visibility_B54(Show_Selection_Q48,Blob_Position_Q41,Blob_Position_Q42,Product_Q56,_Proximity_Far_Distance_,_Proximity_Near_Radius_,Active_Face_Center_Q49,Active_Face_Dir_Q64,Width_Q54);\nvec3 Wire_Vx_Pos_Q51;\nvec2 UV_Q51;\nvec2 Widths_Q51;\nWireframe_Vertex_B51(position,normal,tangent,(cross(normal,tangent)),Width_Q54,Face_Size_Q50,Wire_Vx_Pos_Q51,UV_Q51,Widths_Q51);\nvec3 Vec3_Q27=vec3(Widths_Q51.x,Widths_Q51.y,color.r);\nvec3 Pos_World_Q13;\nObject_To_World_Pos_B13(Wire_Vx_Pos_Q51,Pos_World_Q13);\nvec3 Incident_Q36=normalize(Pos_World_Q13-cameraPosition);\nvec3 Out_Position_Q47;\nvec2 Out_UV_Q47;\nvec3 Blob_Info_Q47;\nBlob_Vertex_B47(Pos_World_Q13,Normal_World_N_Q29,Tangent_World_N_Q28,Binormal_World_N_Q32,Position_Q38,_Blob_Intensity_,Near_Size_Q38,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,color,uv,Face_Center_Q33,Face_Size_Q50,UV_Q51,_Blob_Fade_Length_,_Selection_Fade_,_Selection_Fade_Size_,Inner_Fade_Q38,Active_Face_Center_Q49,Pulse_Q38,Fade_Q38,Blob_Enable_Q38,Out_Position_Q47,Out_UV_Q47,Blob_Info_Q47);\nvec4 Extra1_Q66;\nfloat Distance_To_Face_Q66;\nfloat Intensity_Q66;\nProximity_Vertex_B66(Blob_Position_Q41,Blob_Position_Q42,Active_Face_Center_Q49,Active_Face_Dir_Q64,Pos_World_Q13,_Proximity_Far_Distance_,Relative_Scale_Q57,_Proximity_Anisotropy_,Normalized_Q72,Extra1_Q66,Distance_To_Face_Q66,Intensity_Q66);\nvec4 Holo_Edges_Q44;\nHolo_Edge_Vertex_B44(Incident_Q36,Normal_World_N_Q29,uv,Tangent_World_Q30,Binormal_World_Q31,_Smooth_Active_Face_,Active_Q34,Holo_Edges_Q44);\nvec3 Vec3_Q19=vec3(Show_Selection_Q48,Distance_To_Face_Q66,Intensity_Q66);\nvec3 Position=Out_Position_Q47;\nvec2 UV=Out_UV_Q47;\nvec3 Tangent=Blob_Info_Q47;\nvec3 Binormal=Vec3_Q19;\nvec3 Normal=Vec3_Q27;\nvec4 Extra1=Extra1_Q66;\nvec4 Color=Holo_Edges_Q44;\ngl_Position=viewProjection*vec4(Position,1);\nvPosition=Position;\nvNormal=Normal;\nvUV=UV;\nvTangent=Tangent;\nvBinormal=Binormal;\nvColor=Color;\nvExtra1=Extra1;\n}";
                core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
                var fluentButtonVertexShader = { name, shader };
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/handle/handleMaterial.js": (
              /*!*******************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/handle/handleMaterial.js ***!
                \*******************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "HandleMaterial": () => (
                    /* binding */
                    HandleMaterial
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Materials_shaderMaterial__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Maths/math.vector */
                  "core/Misc/perfCounter"
                );
                var core_Materials_shaderMaterial__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Materials_shaderMaterial__WEBPACK_IMPORTED_MODULE_1__);
                var _shaders_handle_vertex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./shaders/handle.vertex */
                  "../../../lts/gui/dist/3D/materials/handle/shaders/handle.vertex.js"
                );
                var _shaders_handle_fragment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./shaders/handle.fragment */
                  "../../../lts/gui/dist/3D/materials/handle/shaders/handle.fragment.js"
                );
                var HandleMaterial = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(HandleMaterial2, _super);
                    function HandleMaterial2(name, scene) {
                      var _this = _super.call(this, name, scene, "handle", {
                        attributes: ["position"],
                        uniforms: ["worldViewProjection", "color", "scale", "positionOffset"],
                        needAlphaBlending: false,
                        needAlphaTesting: false
                      }) || this;
                      _this._hover = false;
                      _this._drag = false;
                      _this._color = new core_Materials_shaderMaterial__WEBPACK_IMPORTED_MODULE_1__.Color3();
                      _this._scale = 1;
                      _this._lastTick = -1;
                      _this.animationLength = 100;
                      _this.hoverColor = new core_Materials_shaderMaterial__WEBPACK_IMPORTED_MODULE_1__.Color3(0, 0.467, 0.84);
                      _this.baseColor = new core_Materials_shaderMaterial__WEBPACK_IMPORTED_MODULE_1__.Color3(1, 1, 1);
                      _this.hoverScale = 0.75;
                      _this.baseScale = 0.35;
                      _this.dragScale = 0.55;
                      _this._positionOffset = core_Materials_shaderMaterial__WEBPACK_IMPORTED_MODULE_1__.Vector3.Zero();
                      _this._updateInterpolationTarget();
                      _this._lastTick = Date.now();
                      _this._onBeforeRender = _this.getScene().onBeforeRenderObservable.add(function() {
                        var tick = Date.now();
                        var delta = tick - _this._lastTick;
                        var scaleDiff = _this._targetScale - _this._scale;
                        var colorDiff = core_Materials_shaderMaterial__WEBPACK_IMPORTED_MODULE_1__.TmpColors.Color3[0].copyFrom(_this._targetColor).subtractToRef(_this._color, core_Materials_shaderMaterial__WEBPACK_IMPORTED_MODULE_1__.TmpColors.Color3[0]);
                        _this._scale = _this._scale + scaleDiff * delta / _this.animationLength;
                        colorDiff.scaleToRef(delta / _this.animationLength, colorDiff);
                        _this._color.addToRef(colorDiff, _this._color);
                        _this.setColor3("color", _this._color);
                        _this.setFloat("scale", _this._scale);
                        _this.setVector3("positionOffset", _this._positionOffset);
                        _this._lastTick = tick;
                      });
                      return _this;
                    }
                    Object.defineProperty(HandleMaterial2.prototype, "hover", {
                      /**
                       * Is the material indicating hovering state
                       */
                      get: function() {
                        return this._hover;
                      },
                      set: function(b) {
                        this._hover = b;
                        this._updateInterpolationTarget();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(HandleMaterial2.prototype, "drag", {
                      /**
                       * Is the material indicating drag state
                       */
                      get: function() {
                        return this._drag;
                      },
                      set: function(b) {
                        this._drag = b;
                        this._updateInterpolationTarget();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    HandleMaterial2.prototype._updateInterpolationTarget = function() {
                      if (this.drag) {
                        this._targetColor = this.hoverColor;
                        this._targetScale = this.dragScale;
                      } else if (this.hover) {
                        this._targetColor = this.hoverColor;
                        this._targetScale = this.hoverScale;
                      } else {
                        this._targetColor = this.baseColor;
                        this._targetScale = this.baseScale;
                      }
                    };
                    HandleMaterial2.prototype.dispose = function() {
                      _super.prototype.dispose.call(this);
                      this.getScene().onBeforeRenderObservable.remove(this._onBeforeRender);
                    };
                    return HandleMaterial2;
                  }(core_Materials_shaderMaterial__WEBPACK_IMPORTED_MODULE_1__.ShaderMaterial)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/handle/index.js": (
              /*!**********************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/handle/index.js ***!
                \**********************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "HandleMaterial": () => (
                    /* reexport safe */
                    _handleMaterial__WEBPACK_IMPORTED_MODULE_0__.HandleMaterial
                  )
                  /* harmony export */
                });
                var _handleMaterial__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! ./handleMaterial */
                  "../../../lts/gui/dist/3D/materials/handle/handleMaterial.js"
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/handle/shaders/handle.fragment.js": (
              /*!****************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/handle/shaders/handle.fragment.js ***!
                \****************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "handlePixelShader": () => (
                    /* binding */
                    handlePixelShader
                  )
                  /* harmony export */
                });
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Engines/shaderStore */
                  "core/Misc/perfCounter"
                );
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
                var name = "handlePixelShader";
                var shader = "uniform vec3 color;\nvoid main(void) {\ngl_FragColor=vec4(color,1.0);\n}";
                core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
                var handlePixelShader = { name, shader };
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/handle/shaders/handle.vertex.js": (
              /*!**************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/handle/shaders/handle.vertex.js ***!
                \**************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "handleVertexShader": () => (
                    /* binding */
                    handleVertexShader
                  )
                  /* harmony export */
                });
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Engines/shaderStore */
                  "core/Misc/perfCounter"
                );
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
                var name = "handleVertexShader";
                var shader = "precision highp float;\nattribute vec3 position;\nuniform vec3 positionOffset;\nuniform mat4 worldViewProjection;\nuniform float scale;\nvoid main(void) {\nvec4 vPos=vec4((vec3(position)+positionOffset)*scale,1.0);\ngl_Position=worldViewProjection*vPos;\n}";
                core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
                var handleVertexShader = { name, shader };
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/index.js": (
              /*!***************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/index.js ***!
                \***************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "FluentBackplateMaterial": () => (
                    /* reexport safe */
                    _fluentBackplate_index__WEBPACK_IMPORTED_MODULE_2__.FluentBackplateMaterial
                  ),
                  /* harmony export */
                  "FluentButtonMaterial": () => (
                    /* reexport safe */
                    _fluentButton_index__WEBPACK_IMPORTED_MODULE_1__.FluentButtonMaterial
                  ),
                  /* harmony export */
                  "FluentMaterial": () => (
                    /* reexport safe */
                    _fluent_index__WEBPACK_IMPORTED_MODULE_0__.FluentMaterial
                  ),
                  /* harmony export */
                  "FluentMaterialDefines": () => (
                    /* reexport safe */
                    _fluent_index__WEBPACK_IMPORTED_MODULE_0__.FluentMaterialDefines
                  ),
                  /* harmony export */
                  "HandleMaterial": () => (
                    /* reexport safe */
                    _handle_index__WEBPACK_IMPORTED_MODULE_3__.HandleMaterial
                  ),
                  /* harmony export */
                  "MRDLBackplateMaterial": () => (
                    /* reexport safe */
                    _mrdl_index__WEBPACK_IMPORTED_MODULE_4__.MRDLBackplateMaterial
                  ),
                  /* harmony export */
                  "MRDLSliderBarMaterial": () => (
                    /* reexport safe */
                    _mrdl_index__WEBPACK_IMPORTED_MODULE_4__.MRDLSliderBarMaterial
                  ),
                  /* harmony export */
                  "MRDLSliderThumbMaterial": () => (
                    /* reexport safe */
                    _mrdl_index__WEBPACK_IMPORTED_MODULE_4__.MRDLSliderThumbMaterial
                  )
                  /* harmony export */
                });
                var _fluent_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! ./fluent/index */
                  "../../../lts/gui/dist/3D/materials/fluent/index.js"
                );
                var _fluentButton_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./fluentButton/index */
                  "../../../lts/gui/dist/3D/materials/fluentButton/index.js"
                );
                var _fluentBackplate_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./fluentBackplate/index */
                  "../../../lts/gui/dist/3D/materials/fluentBackplate/index.js"
                );
                var _handle_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./handle/index */
                  "../../../lts/gui/dist/3D/materials/handle/index.js"
                );
                var _mrdl_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
                  /*! ./mrdl/index */
                  "../../../lts/gui/dist/3D/materials/mrdl/index.js"
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/mrdl/index.js": (
              /*!********************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/mrdl/index.js ***!
                \********************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "MRDLBackplateMaterial": () => (
                    /* reexport safe */
                    _mrdlBackplateMaterial__WEBPACK_IMPORTED_MODULE_2__.MRDLBackplateMaterial
                  ),
                  /* harmony export */
                  "MRDLSliderBarMaterial": () => (
                    /* reexport safe */
                    _mrdlSliderBarMaterial__WEBPACK_IMPORTED_MODULE_0__.MRDLSliderBarMaterial
                  ),
                  /* harmony export */
                  "MRDLSliderThumbMaterial": () => (
                    /* reexport safe */
                    _mrdlSliderThumbMaterial__WEBPACK_IMPORTED_MODULE_1__.MRDLSliderThumbMaterial
                  )
                  /* harmony export */
                });
                var _mrdlSliderBarMaterial__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! ./mrdlSliderBarMaterial */
                  "../../../lts/gui/dist/3D/materials/mrdl/mrdlSliderBarMaterial.js"
                );
                var _mrdlSliderThumbMaterial__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./mrdlSliderThumbMaterial */
                  "../../../lts/gui/dist/3D/materials/mrdl/mrdlSliderThumbMaterial.js"
                );
                var _mrdlBackplateMaterial__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./mrdlBackplateMaterial */
                  "../../../lts/gui/dist/3D/materials/mrdl/mrdlBackplateMaterial.js"
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/mrdl/mrdlBackglowMaterial.js": (
              /*!***********************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/mrdl/mrdlBackglowMaterial.js ***!
                \***********************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "MRDLBackglowMaterial": () => (
                    /* binding */
                    MRDLBackglowMaterial
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Buffers/buffer */
                  "core/Misc/perfCounter"
                );
                var core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__);
                var _shaders_mrdlBackglow_fragment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./shaders/mrdlBackglow.fragment */
                  "../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlBackglow.fragment.js"
                );
                var _shaders_mrdlBackglow_vertex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./shaders/mrdlBackglow.vertex */
                  "../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlBackglow.vertex.js"
                );
                var MRDLBackglowMaterialDefines = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MRDLBackglowMaterialDefines2, _super);
                    function MRDLBackglowMaterialDefines2() {
                      var _this = _super.call(this) || this;
                      _this._needNormals = true;
                      _this._needUVs = true;
                      _this.rebuild();
                      return _this;
                    }
                    return MRDLBackglowMaterialDefines2;
                  }(core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.MaterialDefines)
                );
                var MRDLBackglowMaterial = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MRDLBackglowMaterial2, _super);
                    function MRDLBackglowMaterial2(name, scene) {
                      var _this = _super.call(this, name, scene) || this;
                      _this.bevelRadius = 0.16;
                      _this.lineWidth = 0.16;
                      _this.absoluteSizes = false;
                      _this.tuningMotion = 0;
                      _this.motion = 1;
                      _this.maxIntensity = 0.7;
                      _this.intensityFadeInExponent = 2;
                      _this.outerFuzzStart = 0.04;
                      _this.outerFuzzEnd = 0.04;
                      _this.color = new core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.Color4(0.682353, 0.698039, 1, 1);
                      _this.innerColor = new core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.Color4(0.356863, 0.392157, 0.796078, 1);
                      _this.blendExponent = 1.5;
                      _this.falloff = 2;
                      _this.bias = 0.5;
                      _this.alphaMode = core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.Constants.ALPHA_ADD;
                      _this.disableDepthWrite = true;
                      _this.backFaceCulling = false;
                      return _this;
                    }
                    MRDLBackglowMaterial2.prototype.needAlphaBlending = function() {
                      return true;
                    };
                    MRDLBackglowMaterial2.prototype.needAlphaTesting = function() {
                      return false;
                    };
                    MRDLBackglowMaterial2.prototype.getAlphaTestTexture = function() {
                      return null;
                    };
                    MRDLBackglowMaterial2.prototype.isReadyForSubMesh = function(mesh, subMesh) {
                      if (this.isFrozen) {
                        if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {
                          return true;
                        }
                      }
                      if (!subMesh.materialDefines) {
                        subMesh.materialDefines = new MRDLBackglowMaterialDefines();
                      }
                      var defines = subMesh.materialDefines;
                      var scene = this.getScene();
                      if (this._isReadyForSubMesh(subMesh)) {
                        return true;
                      }
                      var engine = scene.getEngine();
                      core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);
                      if (defines.isDirty) {
                        defines.markAsProcessed();
                        scene.resetCachedMaterial();
                        var fallbacks = new core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.EffectFallbacks();
                        if (defines.FOG) {
                          fallbacks.addFallback(1, "FOG");
                        }
                        core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);
                        defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;
                        var attribs = [core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.PositionKind];
                        if (defines.NORMAL) {
                          attribs.push(core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.NormalKind);
                        }
                        if (defines.UV1) {
                          attribs.push(core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.UVKind);
                        }
                        if (defines.UV2) {
                          attribs.push(core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.UV2Kind);
                        }
                        if (defines.VERTEXCOLOR) {
                          attribs.push(core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.ColorKind);
                        }
                        if (defines.TANGENT) {
                          attribs.push(core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.TangentKind);
                        }
                        core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.PrepareAttributesForInstances(attribs, defines);
                        var shaderName = "mrdlBackglow";
                        var join = defines.toString();
                        var uniforms = [
                          "world",
                          "worldView",
                          "worldViewProjection",
                          "view",
                          "projection",
                          "viewProjection",
                          "cameraPosition",
                          "_Bevel_Radius_",
                          "_Line_Width_",
                          "_Absolute_Sizes_",
                          "_Tuning_Motion_",
                          "_Motion_",
                          "_Max_Intensity_",
                          "_Intensity_Fade_In_Exponent_",
                          "_Outer_Fuzz_Start_",
                          "_Outer_Fuzz_End_",
                          "_Color_",
                          "_Inner_Color_",
                          "_Blend_Exponent_",
                          "_Falloff_",
                          "_Bias_"
                        ];
                        var samplers = [];
                        var uniformBuffers = new Array();
                        core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.PrepareUniformsAndSamplersList({
                          uniformsNames: uniforms,
                          uniformBuffersNames: uniformBuffers,
                          samplers,
                          defines,
                          maxSimultaneousLights: 4
                        });
                        subMesh.setEffect(scene.getEngine().createEffect(shaderName, {
                          attributes: attribs,
                          uniformsNames: uniforms,
                          uniformBuffersNames: uniformBuffers,
                          samplers,
                          defines: join,
                          fallbacks,
                          onCompiled: this.onCompiled,
                          onError: this.onError,
                          indexParameters: { maxSimultaneousLights: 4 }
                        }, engine), defines);
                      }
                      if (!subMesh.effect || !subMesh.effect.isReady()) {
                        return false;
                      }
                      defines._renderId = scene.getRenderId();
                      subMesh.effect._wasPreviouslyReady = true;
                      return true;
                    };
                    MRDLBackglowMaterial2.prototype.bindForSubMesh = function(world, mesh, subMesh) {
                      var scene = this.getScene();
                      var defines = subMesh.materialDefines;
                      if (!defines) {
                        return;
                      }
                      var effect = subMesh.effect;
                      if (!effect) {
                        return;
                      }
                      this._activeEffect = effect;
                      this.bindOnlyWorldMatrix(world);
                      this._activeEffect.setMatrix("viewProjection", scene.getTransformMatrix());
                      this._activeEffect.setVector3("cameraPosition", scene.activeCamera.position);
                      this._activeEffect.setFloat("_Bevel_Radius_", this.bevelRadius);
                      this._activeEffect.setFloat("_Line_Width_", this.lineWidth);
                      this._activeEffect.setFloat("_Absolute_Sizes_", this.absoluteSizes ? 1 : 0);
                      this._activeEffect.setFloat("_Tuning_Motion_", this.tuningMotion);
                      this._activeEffect.setFloat("_Motion_", this.motion);
                      this._activeEffect.setFloat("_Max_Intensity_", this.maxIntensity);
                      this._activeEffect.setFloat("_Intensity_Fade_In_Exponent_", this.intensityFadeInExponent);
                      this._activeEffect.setFloat("_Outer_Fuzz_Start_", this.outerFuzzStart);
                      this._activeEffect.setFloat("_Outer_Fuzz_End_", this.outerFuzzEnd);
                      this._activeEffect.setDirectColor4("_Color_", this.color);
                      this._activeEffect.setDirectColor4("_Inner_Color_", this.innerColor);
                      this._activeEffect.setFloat("_Blend_Exponent_", this.blendExponent);
                      this._activeEffect.setFloat("_Falloff_", this.falloff);
                      this._activeEffect.setFloat("_Bias_", this.bias);
                      this._afterBind(mesh, this._activeEffect);
                    };
                    MRDLBackglowMaterial2.prototype.getAnimatables = function() {
                      return [];
                    };
                    MRDLBackglowMaterial2.prototype.dispose = function(forceDisposeEffect) {
                      _super.prototype.dispose.call(this, forceDisposeEffect);
                    };
                    MRDLBackglowMaterial2.prototype.clone = function(name) {
                      var _this = this;
                      return core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.SerializationHelper.Clone(function() {
                        return new MRDLBackglowMaterial2(name, _this.getScene());
                      }, this);
                    };
                    MRDLBackglowMaterial2.prototype.serialize = function() {
                      var serializationObject = core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.SerializationHelper.Serialize(this);
                      serializationObject.customType = "BABYLON.MRDLBackglowMaterial";
                      return serializationObject;
                    };
                    MRDLBackglowMaterial2.prototype.getClassName = function() {
                      return "MRDLBackglowMaterial";
                    };
                    MRDLBackglowMaterial2.Parse = function(source, scene, rootUrl) {
                      return core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.SerializationHelper.Parse(function() {
                        return new MRDLBackglowMaterial2(source.name, scene);
                      }, source, scene, rootUrl);
                    };
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackglowMaterial2.prototype, "bevelRadius", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackglowMaterial2.prototype, "lineWidth", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackglowMaterial2.prototype, "absoluteSizes", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackglowMaterial2.prototype, "tuningMotion", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackglowMaterial2.prototype, "motion", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackglowMaterial2.prototype, "maxIntensity", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackglowMaterial2.prototype, "intensityFadeInExponent", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackglowMaterial2.prototype, "outerFuzzStart", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackglowMaterial2.prototype, "outerFuzzEnd", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackglowMaterial2.prototype, "color", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackglowMaterial2.prototype, "innerColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackglowMaterial2.prototype, "blendExponent", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackglowMaterial2.prototype, "falloff", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackglowMaterial2.prototype, "bias", void 0);
                    return MRDLBackglowMaterial2;
                  }(core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.PushMaterial)
                );
                (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.MRDLBackglowMaterial", MRDLBackglowMaterial);
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/mrdl/mrdlBackplateMaterial.js": (
              /*!************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/mrdl/mrdlBackplateMaterial.js ***!
                \************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "MRDLBackplateMaterial": () => (
                    /* binding */
                    MRDLBackplateMaterial
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Engines/constants */
                  "core/Misc/perfCounter"
                );
                var core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__);
                var _shaders_mrdlBackplate_fragment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./shaders/mrdlBackplate.fragment */
                  "../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlBackplate.fragment.js"
                );
                var _shaders_mrdlBackplate_vertex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./shaders/mrdlBackplate.vertex */
                  "../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlBackplate.vertex.js"
                );
                var MRDLBackplateMaterialDefines = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MRDLBackplateMaterialDefines2, _super);
                    function MRDLBackplateMaterialDefines2() {
                      var _this = _super.call(this) || this;
                      _this.IRIDESCENCE_ENABLE = true;
                      _this.SMOOTH_EDGES = true;
                      _this._needNormals = true;
                      _this.rebuild();
                      return _this;
                    }
                    return MRDLBackplateMaterialDefines2;
                  }(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialDefines)
                );
                var MRDLBackplateMaterial = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MRDLBackplateMaterial2, _super);
                    function MRDLBackplateMaterial2(name, scene) {
                      var _this = _super.call(this, name, scene) || this;
                      _this.radius = 0.3;
                      _this.lineWidth = 3e-3;
                      _this.absoluteSizes = false;
                      _this._filterWidth = 1;
                      _this.baseColor = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color4(0, 0, 0, 1);
                      _this.lineColor = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color4(0.2, 0.262745, 0.4, 1);
                      _this.radiusTopLeft = 1;
                      _this.radiusTopRight = 1;
                      _this.radiusBottomLeft = 1;
                      _this.radiusBottomRight = 1;
                      _this._rate = 0;
                      _this.highlightColor = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color4(0.239216, 0.435294, 0.827451, 1);
                      _this.highlightWidth = 0;
                      _this._highlightTransform = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector4(1, 1, 0, 0);
                      _this._highlight = 1;
                      _this.iridescenceIntensity = 0.45;
                      _this.iridescenceEdgeIntensity = 1;
                      _this.iridescenceTint = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color4(1, 1, 1, 1);
                      _this._angle = -45;
                      _this.fadeOut = 1;
                      _this._reflected = true;
                      _this._frequency = 1;
                      _this._verticalOffset = 0;
                      _this.gradientColor = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color4(0.74902, 0.74902, 0.74902, 1);
                      _this.topLeftGradientColor = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color4(784314e-8, 0.294118, 0.580392, 1);
                      _this.topRightGradientColor = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color4(0.305882, 0, 1, 1);
                      _this.bottomLeftGradientColor = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color4(0.133333, 0.258824, 0.992157, 1);
                      _this.bottomRightGradientColor = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color4(0.176471, 0.176471, 0.619608, 1);
                      _this.edgeWidth = 0.5;
                      _this.edgePower = 1;
                      _this.edgeLineGradientBlend = 0.5;
                      _this.alphaMode = core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Constants.ALPHA_DISABLE;
                      _this.backFaceCulling = false;
                      _this._iridescentMapTexture = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Texture(MRDLBackplateMaterial2.IRIDESCENT_MAP_TEXTURE_URL, _this.getScene(), true, false, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Texture.NEAREST_SAMPLINGMODE);
                      return _this;
                    }
                    MRDLBackplateMaterial2.prototype.needAlphaBlending = function() {
                      return false;
                    };
                    MRDLBackplateMaterial2.prototype.needAlphaTesting = function() {
                      return false;
                    };
                    MRDLBackplateMaterial2.prototype.getAlphaTestTexture = function() {
                      return null;
                    };
                    MRDLBackplateMaterial2.prototype.isReadyForSubMesh = function(mesh, subMesh) {
                      if (this.isFrozen) {
                        if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {
                          return true;
                        }
                      }
                      if (!subMesh.materialDefines) {
                        subMesh.materialDefines = new MRDLBackplateMaterialDefines();
                      }
                      var defines = subMesh.materialDefines;
                      var scene = this.getScene();
                      if (this._isReadyForSubMesh(subMesh)) {
                        return true;
                      }
                      var engine = scene.getEngine();
                      core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);
                      if (defines.isDirty) {
                        defines.markAsProcessed();
                        scene.resetCachedMaterial();
                        var fallbacks = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.EffectFallbacks();
                        if (defines.FOG) {
                          fallbacks.addFallback(1, "FOG");
                        }
                        core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);
                        defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;
                        var attribs = [core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.PositionKind];
                        if (defines.NORMAL) {
                          attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.NormalKind);
                        }
                        if (defines.UV1) {
                          attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.UVKind);
                        }
                        if (defines.UV2) {
                          attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.UV2Kind);
                        }
                        if (defines.VERTEXCOLOR) {
                          attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.ColorKind);
                        }
                        if (defines.TANGENT) {
                          attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.TangentKind);
                        }
                        core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.PrepareAttributesForInstances(attribs, defines);
                        var shaderName = "mrdlBackplate";
                        var join = defines.toString();
                        var uniforms = [
                          "world",
                          "viewProjection",
                          "cameraPosition",
                          "_Radius_",
                          "_Line_Width_",
                          "_Absolute_Sizes_",
                          "_Filter_Width_",
                          "_Base_Color_",
                          "_Line_Color_",
                          "_Radius_Top_Left_",
                          "_Radius_Top_Right_",
                          "_Radius_Bottom_Left_",
                          "_Radius_Bottom_Right_",
                          "_Rate_",
                          "_Highlight_Color_",
                          "_Highlight_Width_",
                          "_Highlight_Transform_",
                          "_Highlight_",
                          "_Iridescence_Intensity_",
                          "_Iridescence_Edge_Intensity_",
                          "_Iridescence_Tint_",
                          "_Iridescent_Map_",
                          "_Angle_",
                          "_Reflected_",
                          "_Frequency_",
                          "_Vertical_Offset_",
                          "_Gradient_Color_",
                          "_Top_Left_",
                          "_Top_Right_",
                          "_Bottom_Left_",
                          "_Bottom_Right_",
                          "_Edge_Width_",
                          "_Edge_Power_",
                          "_Line_Gradient_Blend_",
                          "_Fade_Out_"
                        ];
                        var samplers = ["_Iridescent_Map_"];
                        var uniformBuffers = new Array();
                        core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.PrepareUniformsAndSamplersList({
                          uniformsNames: uniforms,
                          uniformBuffersNames: uniformBuffers,
                          samplers,
                          defines,
                          maxSimultaneousLights: 4
                        });
                        subMesh.setEffect(scene.getEngine().createEffect(shaderName, {
                          attributes: attribs,
                          uniformsNames: uniforms,
                          uniformBuffersNames: uniformBuffers,
                          samplers,
                          defines: join,
                          fallbacks,
                          onCompiled: this.onCompiled,
                          onError: this.onError,
                          indexParameters: { maxSimultaneousLights: 4 }
                        }, engine), defines);
                      }
                      if (!subMesh.effect || !subMesh.effect.isReady()) {
                        return false;
                      }
                      defines._renderId = scene.getRenderId();
                      subMesh.effect._wasPreviouslyReady = true;
                      return true;
                    };
                    MRDLBackplateMaterial2.prototype.bindForSubMesh = function(world, mesh, subMesh) {
                      var defines = subMesh.materialDefines;
                      if (!defines) {
                        return;
                      }
                      var effect = subMesh.effect;
                      if (!effect) {
                        return;
                      }
                      this._activeEffect = effect;
                      this.bindOnlyWorldMatrix(world);
                      this._activeEffect.setMatrix("viewProjection", this.getScene().getTransformMatrix());
                      this._activeEffect.setVector3("cameraPosition", this.getScene().activeCamera.position);
                      this._activeEffect.setFloat("_Radius_", this.radius);
                      this._activeEffect.setFloat("_Line_Width_", this.lineWidth);
                      this._activeEffect.setFloat("_Absolute_Sizes_", this.absoluteSizes ? 1 : 0);
                      this._activeEffect.setFloat("_Filter_Width_", this._filterWidth);
                      this._activeEffect.setDirectColor4("_Base_Color_", this.baseColor);
                      this._activeEffect.setDirectColor4("_Line_Color_", this.lineColor);
                      this._activeEffect.setFloat("_Radius_Top_Left_", this.radiusTopLeft);
                      this._activeEffect.setFloat("_Radius_Top_Right_", this.radiusTopRight);
                      this._activeEffect.setFloat("_Radius_Bottom_Left_", this.radiusBottomLeft);
                      this._activeEffect.setFloat("_Radius_Bottom_Right_", this.radiusBottomRight);
                      this._activeEffect.setFloat("_Rate_", this._rate);
                      this._activeEffect.setDirectColor4("_Highlight_Color_", this.highlightColor);
                      this._activeEffect.setFloat("_Highlight_Width_", this.highlightWidth);
                      this._activeEffect.setVector4("_Highlight_Transform_", this._highlightTransform);
                      this._activeEffect.setFloat("_Highlight_", this._highlight);
                      this._activeEffect.setFloat("_Iridescence_Intensity_", this.iridescenceIntensity);
                      this._activeEffect.setFloat("_Iridescence_Edge_Intensity_", this.iridescenceEdgeIntensity);
                      this._activeEffect.setDirectColor4("_Iridescence_Tint_", this.iridescenceTint);
                      this._activeEffect.setTexture("_Iridescent_Map_", this._iridescentMapTexture);
                      this._activeEffect.setFloat("_Angle_", this._angle);
                      this._activeEffect.setFloat("_Reflected_", this._reflected ? 1 : 0);
                      this._activeEffect.setFloat("_Frequency_", this._frequency);
                      this._activeEffect.setFloat("_Vertical_Offset_", this._verticalOffset);
                      this._activeEffect.setDirectColor4("_Gradient_Color_", this.gradientColor);
                      this._activeEffect.setDirectColor4("_Top_Left_", this.topLeftGradientColor);
                      this._activeEffect.setDirectColor4("_Top_Right_", this.topRightGradientColor);
                      this._activeEffect.setDirectColor4("_Bottom_Left_", this.bottomLeftGradientColor);
                      this._activeEffect.setDirectColor4("_Bottom_Right_", this.bottomRightGradientColor);
                      this._activeEffect.setFloat("_Edge_Width_", this.edgeWidth);
                      this._activeEffect.setFloat("_Edge_Power_", this.edgePower);
                      this._activeEffect.setFloat("_Line_Gradient_Blend_", this.edgeLineGradientBlend);
                      this._activeEffect.setFloat("_Fade_Out_", this.fadeOut);
                      this._afterBind(mesh, this._activeEffect);
                    };
                    MRDLBackplateMaterial2.prototype.getAnimatables = function() {
                      return [];
                    };
                    MRDLBackplateMaterial2.prototype.dispose = function(forceDisposeEffect) {
                      _super.prototype.dispose.call(this, forceDisposeEffect);
                    };
                    MRDLBackplateMaterial2.prototype.clone = function(name) {
                      var _this = this;
                      return core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.SerializationHelper.Clone(function() {
                        return new MRDLBackplateMaterial2(name, _this.getScene());
                      }, this);
                    };
                    MRDLBackplateMaterial2.prototype.serialize = function() {
                      var serializationObject = _super.prototype.serialize.call(this);
                      serializationObject.customType = "BABYLON.MRDLBackplateMaterial";
                      return serializationObject;
                    };
                    MRDLBackplateMaterial2.prototype.getClassName = function() {
                      return "MRDLBackplateMaterial";
                    };
                    MRDLBackplateMaterial2.Parse = function(source, scene, rootUrl) {
                      return core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.SerializationHelper.Parse(function() {
                        return new MRDLBackplateMaterial2(source.name, scene);
                      }, source, scene, rootUrl);
                    };
                    MRDLBackplateMaterial2.IRIDESCENT_MAP_TEXTURE_URL = "https://assets.babylonjs.com/meshes/MRTK/MRDL/mrtk-mrdl-backplate-iridescence.png";
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackplateMaterial2.prototype, "radius", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackplateMaterial2.prototype, "lineWidth", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackplateMaterial2.prototype, "absoluteSizes", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackplateMaterial2.prototype, "baseColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackplateMaterial2.prototype, "lineColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackplateMaterial2.prototype, "radiusTopLeft", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackplateMaterial2.prototype, "radiusTopRight", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackplateMaterial2.prototype, "radiusBottomLeft", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackplateMaterial2.prototype, "radiusBottomRight", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackplateMaterial2.prototype, "highlightColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackplateMaterial2.prototype, "highlightWidth", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackplateMaterial2.prototype, "iridescenceIntensity", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackplateMaterial2.prototype, "iridescenceEdgeIntensity", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackplateMaterial2.prototype, "iridescenceTint", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackplateMaterial2.prototype, "fadeOut", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackplateMaterial2.prototype, "gradientColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackplateMaterial2.prototype, "topLeftGradientColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackplateMaterial2.prototype, "topRightGradientColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackplateMaterial2.prototype, "bottomLeftGradientColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackplateMaterial2.prototype, "bottomRightGradientColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackplateMaterial2.prototype, "edgeWidth", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackplateMaterial2.prototype, "edgePower", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLBackplateMaterial2.prototype, "edgeLineGradientBlend", void 0);
                    return MRDLBackplateMaterial2;
                  }(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.PushMaterial)
                );
                (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.MRDLBackplateMaterial", MRDLBackplateMaterial);
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/mrdl/mrdlFrontplateMaterial.js": (
              /*!*************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/mrdl/mrdlFrontplateMaterial.js ***!
                \*************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "MRDLFrontplateMaterial": () => (
                    /* binding */
                    MRDLFrontplateMaterial
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Materials/Textures/texture */
                  "core/Misc/perfCounter"
                );
                var core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__);
                var _shaders_mrdlFrontplate_fragment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./shaders/mrdlFrontplate.fragment */
                  "../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlFrontplate.fragment.js"
                );
                var _shaders_mrdlFrontplate_vertex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./shaders/mrdlFrontplate.vertex */
                  "../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlFrontplate.vertex.js"
                );
                var MRDLFrontplateMaterialDefines = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MRDLFrontplateMaterialDefines2, _super);
                    function MRDLFrontplateMaterialDefines2() {
                      var _this = _super.call(this) || this;
                      _this.SMOOTH_EDGES = true;
                      _this._needNormals = true;
                      _this._needUVs = true;
                      _this.rebuild();
                      return _this;
                    }
                    return MRDLFrontplateMaterialDefines2;
                  }(core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.MaterialDefines)
                );
                var MRDLFrontplateMaterial = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MRDLFrontplateMaterial2, _super);
                    function MRDLFrontplateMaterial2(name, scene) {
                      var _this = _super.call(this, name, scene) || this;
                      _this.radius = 0.12;
                      _this.lineWidth = 0.01;
                      _this.relativeToHeight = false;
                      _this._filterWidth = 1;
                      _this.edgeColor = new core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.Color4(0.53, 0.53, 0.53, 1);
                      _this.blobEnable = true;
                      _this.blobPosition = new core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.Vector3(100, 100, 100);
                      _this.blobIntensity = 0.5;
                      _this.blobNearSize = 0.032;
                      _this.blobFarSize = 0.048;
                      _this.blobNearDistance = 8e-3;
                      _this.blobFarDistance = 0.064;
                      _this.blobFadeLength = 0.04;
                      _this.blobInnerFade = 0.01;
                      _this.blobPulse = 0;
                      _this.blobFade = 1;
                      _this.blobPulseMaxSize = 0.05;
                      _this.blobEnable2 = true;
                      _this.blobPosition2 = new core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.Vector3(10, 10.1, -0.6);
                      _this.blobNearSize2 = 8e-3;
                      _this.blobInnerFade2 = 0.1;
                      _this.blobPulse2 = 0;
                      _this.blobFade2 = 1;
                      _this.gazeIntensity = 0.8;
                      _this.gazeFocus = 0;
                      _this.selectionFuzz = 0.5;
                      _this.selected = 1;
                      _this.selectionFade = 0.2;
                      _this.selectionFadeSize = 0;
                      _this.selectedDistance = 0.08;
                      _this.selectedFadeLength = 0.08;
                      _this.proximityMaxIntensity = 0.45;
                      _this.proximityFarDistance = 0.16;
                      _this.proximityNearRadius = 0.016;
                      _this.proximityAnisotropy = 1;
                      _this.useGlobalLeftIndex = true;
                      _this.useGlobalRightIndex = true;
                      _this.fadeOut = 1;
                      _this.alphaMode = core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.Constants.ALPHA_ADD;
                      _this.disableDepthWrite = true;
                      _this.backFaceCulling = false;
                      _this._blobTexture = new core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.Texture(MRDLFrontplateMaterial2.BLOB_TEXTURE_URL, scene, true, false, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.Texture.NEAREST_SAMPLINGMODE);
                      return _this;
                    }
                    MRDLFrontplateMaterial2.prototype.needAlphaBlending = function() {
                      return true;
                    };
                    MRDLFrontplateMaterial2.prototype.needAlphaTesting = function() {
                      return false;
                    };
                    MRDLFrontplateMaterial2.prototype.getAlphaTestTexture = function() {
                      return null;
                    };
                    MRDLFrontplateMaterial2.prototype.isReadyForSubMesh = function(mesh, subMesh) {
                      if (this.isFrozen) {
                        if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {
                          return true;
                        }
                      }
                      if (!subMesh.materialDefines) {
                        subMesh.materialDefines = new MRDLFrontplateMaterialDefines();
                      }
                      var defines = subMesh.materialDefines;
                      var scene = this.getScene();
                      if (this._isReadyForSubMesh(subMesh)) {
                        return true;
                      }
                      var engine = scene.getEngine();
                      core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);
                      if (defines.isDirty) {
                        defines.markAsProcessed();
                        scene.resetCachedMaterial();
                        var fallbacks = new core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.EffectFallbacks();
                        if (defines.FOG) {
                          fallbacks.addFallback(1, "FOG");
                        }
                        core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);
                        defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;
                        var attribs = [core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.PositionKind];
                        if (defines.NORMAL) {
                          attribs.push(core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.NormalKind);
                        }
                        if (defines.UV1) {
                          attribs.push(core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.UVKind);
                        }
                        if (defines.UV2) {
                          attribs.push(core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.UV2Kind);
                        }
                        if (defines.VERTEXCOLOR) {
                          attribs.push(core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.ColorKind);
                        }
                        if (defines.TANGENT) {
                          attribs.push(core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.TangentKind);
                        }
                        core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.PrepareAttributesForInstances(attribs, defines);
                        var shaderName = "mrdlFrontplate";
                        var join = defines.toString();
                        var uniforms = [
                          "world",
                          "worldView",
                          "worldViewProjection",
                          "view",
                          "projection",
                          "viewProjection",
                          "cameraPosition",
                          "_Radius_",
                          "_Line_Width_",
                          "_Relative_To_Height_",
                          "_Filter_Width_",
                          "_Edge_Color_",
                          "_Fade_Out_",
                          "_Smooth_Edges_",
                          "_Blob_Enable_",
                          "_Blob_Position_",
                          "_Blob_Intensity_",
                          "_Blob_Near_Size_",
                          "_Blob_Far_Size_",
                          "_Blob_Near_Distance_",
                          "_Blob_Far_Distance_",
                          "_Blob_Fade_Length_",
                          "_Blob_Inner_Fade_",
                          "_Blob_Pulse_",
                          "_Blob_Fade_",
                          "_Blob_Pulse_Max_Size_",
                          "_Blob_Enable_2_",
                          "_Blob_Position_2_",
                          "_Blob_Near_Size_2_",
                          "_Blob_Inner_Fade_2_",
                          "_Blob_Pulse_2_",
                          "_Blob_Fade_2_",
                          "_Gaze_Intensity_",
                          "_Gaze_Focus_",
                          "_Blob_Texture_",
                          "_Selection_Fuzz_",
                          "_Selected_",
                          "_Selection_Fade_",
                          "_Selection_Fade_Size_",
                          "_Selected_Distance_",
                          "_Selected_Fade_Length_",
                          "_Proximity_Max_Intensity_",
                          "_Proximity_Far_Distance_",
                          "_Proximity_Near_Radius_",
                          "_Proximity_Anisotropy_",
                          "Global_Left_Index_Tip_Position",
                          "Global_Right_Index_Tip_Position",
                          "_Use_Global_Left_Index_",
                          "_Use_Global_Right_Index_"
                        ];
                        var samplers = [];
                        var uniformBuffers = new Array();
                        core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.PrepareUniformsAndSamplersList({
                          uniformsNames: uniforms,
                          uniformBuffersNames: uniformBuffers,
                          samplers,
                          defines,
                          maxSimultaneousLights: 4
                        });
                        subMesh.setEffect(scene.getEngine().createEffect(shaderName, {
                          attributes: attribs,
                          uniformsNames: uniforms,
                          uniformBuffersNames: uniformBuffers,
                          samplers,
                          defines: join,
                          fallbacks,
                          onCompiled: this.onCompiled,
                          onError: this.onError,
                          indexParameters: { maxSimultaneousLights: 4 }
                        }, engine), defines);
                      }
                      if (!subMesh.effect || !subMesh.effect.isReady()) {
                        return false;
                      }
                      defines._renderId = scene.getRenderId();
                      subMesh.effect._wasPreviouslyReady = true;
                      return true;
                    };
                    MRDLFrontplateMaterial2.prototype.bindForSubMesh = function(world, mesh, subMesh) {
                      var scene = this.getScene();
                      var defines = subMesh.materialDefines;
                      if (!defines) {
                        return;
                      }
                      var effect = subMesh.effect;
                      if (!effect) {
                        return;
                      }
                      this._activeEffect = effect;
                      this.bindOnlyWorldMatrix(world);
                      this._activeEffect.setMatrix("viewProjection", scene.getTransformMatrix());
                      this._activeEffect.setVector3("cameraPosition", scene.activeCamera.position);
                      this._activeEffect.setFloat("_Radius_", this.radius);
                      this._activeEffect.setFloat("_Line_Width_", this.lineWidth);
                      this._activeEffect.setFloat("_Relative_To_Height_", this.relativeToHeight ? 1 : 0);
                      this._activeEffect.setFloat("_Filter_Width_", this._filterWidth);
                      this._activeEffect.setDirectColor4("_Edge_Color_", this.edgeColor);
                      this._activeEffect.setFloat("_Fade_Out_", this.fadeOut);
                      this._activeEffect.setFloat("_Blob_Enable_", this.blobEnable ? 1 : 0);
                      this._activeEffect.setVector3("_Blob_Position_", this.blobPosition);
                      this._activeEffect.setFloat("_Blob_Intensity_", this.blobIntensity);
                      this._activeEffect.setFloat("_Blob_Near_Size_", this.blobNearSize);
                      this._activeEffect.setFloat("_Blob_Far_Size_", this.blobFarSize);
                      this._activeEffect.setFloat("_Blob_Near_Distance_", this.blobNearDistance);
                      this._activeEffect.setFloat("_Blob_Far_Distance_", this.blobFarDistance);
                      this._activeEffect.setFloat("_Blob_Fade_Length_", this.blobFadeLength);
                      this._activeEffect.setFloat("_Blob_Inner_Fade_", this.blobInnerFade);
                      this._activeEffect.setFloat("_Blob_Pulse_", this.blobPulse);
                      this._activeEffect.setFloat("_Blob_Fade_", this.blobFade);
                      this._activeEffect.setFloat("_Blob_Pulse_Max_Size_", this.blobPulseMaxSize);
                      this._activeEffect.setFloat("_Blob_Enable_2_", this.blobEnable2 ? 1 : 0);
                      this._activeEffect.setVector3("_Blob_Position_2_", this.blobPosition2);
                      this._activeEffect.setFloat("_Blob_Near_Size_2_", this.blobNearSize2);
                      this._activeEffect.setFloat("_Blob_Inner_Fade_2_", this.blobInnerFade2);
                      this._activeEffect.setFloat("_Blob_Pulse_2_", this.blobPulse2);
                      this._activeEffect.setFloat("_Blob_Fade_2_", this.blobFade2);
                      this._activeEffect.setFloat("_Gaze_Intensity_", this.gazeIntensity);
                      this._activeEffect.setFloat("_Gaze_Focus_", this.gazeFocus);
                      this._activeEffect.setTexture("_Blob_Texture_", this._blobTexture);
                      this._activeEffect.setFloat("_Selection_Fuzz_", this.selectionFuzz);
                      this._activeEffect.setFloat("_Selected_", this.selected);
                      this._activeEffect.setFloat("_Selection_Fade_", this.selectionFade);
                      this._activeEffect.setFloat("_Selection_Fade_Size_", this.selectionFadeSize);
                      this._activeEffect.setFloat("_Selected_Distance_", this.selectedDistance);
                      this._activeEffect.setFloat("_Selected_Fade_Length_", this.selectedFadeLength);
                      this._activeEffect.setFloat("_Proximity_Max_Intensity_", this.proximityMaxIntensity);
                      this._activeEffect.setFloat("_Proximity_Far_Distance_", this.proximityFarDistance);
                      this._activeEffect.setFloat("_Proximity_Near_Radius_", this.proximityNearRadius);
                      this._activeEffect.setFloat("_Proximity_Anisotropy_", this.proximityAnisotropy);
                      this._activeEffect.setFloat("_Use_Global_Left_Index_", this.useGlobalLeftIndex ? 1 : 0);
                      this._activeEffect.setFloat("_Use_Global_Right_Index_", this.useGlobalRightIndex ? 1 : 0);
                      this._afterBind(mesh, this._activeEffect);
                    };
                    MRDLFrontplateMaterial2.prototype.getAnimatables = function() {
                      return [];
                    };
                    MRDLFrontplateMaterial2.prototype.dispose = function(forceDisposeEffect) {
                      _super.prototype.dispose.call(this, forceDisposeEffect);
                    };
                    MRDLFrontplateMaterial2.prototype.clone = function(name) {
                      var _this = this;
                      return core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.SerializationHelper.Clone(function() {
                        return new MRDLFrontplateMaterial2(name, _this.getScene());
                      }, this);
                    };
                    MRDLFrontplateMaterial2.prototype.serialize = function() {
                      var serializationObject = core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.SerializationHelper.Serialize(this);
                      serializationObject.customType = "BABYLON.MRDLFrontplateMaterial";
                      return serializationObject;
                    };
                    MRDLFrontplateMaterial2.prototype.getClassName = function() {
                      return "MRDLFrontplateMaterial";
                    };
                    MRDLFrontplateMaterial2.Parse = function(source, scene, rootUrl) {
                      return core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.SerializationHelper.Parse(function() {
                        return new MRDLFrontplateMaterial2(source.name, scene);
                      }, source, scene, rootUrl);
                    };
                    MRDLFrontplateMaterial2.BLOB_TEXTURE_URL = "";
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "radius", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "lineWidth", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "relativeToHeight", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "edgeColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "blobEnable", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "blobPosition", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "blobIntensity", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "blobNearSize", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "blobFarSize", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "blobNearDistance", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "blobFarDistance", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "blobFadeLength", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "blobInnerFade", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "blobPulse", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "blobFade", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "blobPulseMaxSize", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "blobEnable2", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "blobPosition2", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "blobNearSize2", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "blobInnerFade2", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "blobPulse2", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "blobFade2", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "gazeIntensity", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "gazeFocus", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "selectionFuzz", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "selected", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "selectionFade", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "selectionFadeSize", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "selectedDistance", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "selectedFadeLength", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "proximityMaxIntensity", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "proximityFarDistance", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "proximityNearRadius", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "proximityAnisotropy", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "useGlobalLeftIndex", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLFrontplateMaterial2.prototype, "useGlobalRightIndex", void 0);
                    return MRDLFrontplateMaterial2;
                  }(core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.PushMaterial)
                );
                (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.MRDLFrontplateMaterial", MRDLFrontplateMaterial);
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/mrdl/mrdlInnerquadMaterial.js": (
              /*!************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/mrdl/mrdlInnerquadMaterial.js ***!
                \************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "MRDLInnerquadMaterial": () => (
                    /* binding */
                    MRDLInnerquadMaterial
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Buffers/buffer */
                  "core/Misc/perfCounter"
                );
                var core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__);
                var _shaders_mrdlInnerquad_fragment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./shaders/mrdlInnerquad.fragment */
                  "../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlInnerquad.fragment.js"
                );
                var _shaders_mrdlInnerquad_vertex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./shaders/mrdlInnerquad.vertex */
                  "../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlInnerquad.vertex.js"
                );
                var MRDLInnerquadMaterialDefines = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MRDLInnerquadMaterialDefines2, _super);
                    function MRDLInnerquadMaterialDefines2() {
                      var _this = _super.call(this) || this;
                      _this._needNormals = true;
                      _this._needUVs = true;
                      _this.rebuild();
                      return _this;
                    }
                    return MRDLInnerquadMaterialDefines2;
                  }(core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.MaterialDefines)
                );
                var MRDLInnerquadMaterial = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MRDLInnerquadMaterial2, _super);
                    function MRDLInnerquadMaterial2(name, scene) {
                      var _this = _super.call(this, name, scene) || this;
                      _this.color = new core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.Color4(1, 1, 1, 0.05);
                      _this.radius = 0.12;
                      _this.fixedRadius = true;
                      _this._filterWidth = 1;
                      _this.glowFraction = 0;
                      _this.glowMax = 0.5;
                      _this.glowFalloff = 2;
                      _this.alphaMode = core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.Constants.ALPHA_COMBINE;
                      _this.backFaceCulling = false;
                      return _this;
                    }
                    MRDLInnerquadMaterial2.prototype.needAlphaBlending = function() {
                      return true;
                    };
                    MRDLInnerquadMaterial2.prototype.needAlphaTesting = function() {
                      return false;
                    };
                    MRDLInnerquadMaterial2.prototype.getAlphaTestTexture = function() {
                      return null;
                    };
                    MRDLInnerquadMaterial2.prototype.isReadyForSubMesh = function(mesh, subMesh) {
                      if (this.isFrozen) {
                        if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {
                          return true;
                        }
                      }
                      if (!subMesh.materialDefines) {
                        subMesh.materialDefines = new MRDLInnerquadMaterialDefines();
                      }
                      var defines = subMesh.materialDefines;
                      var scene = this.getScene();
                      if (this._isReadyForSubMesh(subMesh)) {
                        return true;
                      }
                      var engine = scene.getEngine();
                      core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, false);
                      if (defines.isDirty) {
                        defines.markAsProcessed();
                        scene.resetCachedMaterial();
                        var fallbacks = new core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.EffectFallbacks();
                        if (defines.FOG) {
                          fallbacks.addFallback(1, "FOG");
                        }
                        core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);
                        defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;
                        var attribs = [core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.PositionKind];
                        if (defines.NORMAL) {
                          attribs.push(core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.NormalKind);
                        }
                        if (defines.UV1) {
                          attribs.push(core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.UVKind);
                        }
                        if (defines.UV2) {
                          attribs.push(core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.UV2Kind);
                        }
                        if (defines.VERTEXCOLOR) {
                          attribs.push(core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.ColorKind);
                        }
                        if (defines.TANGENT) {
                          attribs.push(core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.TangentKind);
                        }
                        core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.PrepareAttributesForInstances(attribs, defines);
                        var shaderName = "mrdlInnerquad";
                        var join = defines.toString();
                        var uniforms = [
                          "world",
                          "worldView",
                          "worldViewProjection",
                          "view",
                          "projection",
                          "viewProjection",
                          "cameraPosition",
                          "_Color_",
                          "_Radius_",
                          "_Fixed_Radius_",
                          "_Filter_Width_",
                          "_Glow_Fraction_",
                          "_Glow_Max_",
                          "_Glow_Falloff_"
                        ];
                        var samplers = [];
                        var uniformBuffers = new Array();
                        core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.PrepareUniformsAndSamplersList({
                          uniformsNames: uniforms,
                          uniformBuffersNames: uniformBuffers,
                          samplers,
                          defines,
                          maxSimultaneousLights: 4
                        });
                        subMesh.setEffect(scene.getEngine().createEffect(shaderName, {
                          attributes: attribs,
                          uniformsNames: uniforms,
                          uniformBuffersNames: uniformBuffers,
                          samplers,
                          defines: join,
                          fallbacks,
                          onCompiled: this.onCompiled,
                          onError: this.onError,
                          indexParameters: { maxSimultaneousLights: 4 }
                        }, engine), defines);
                      }
                      if (!subMesh.effect || !subMesh.effect.isReady()) {
                        return false;
                      }
                      defines._renderId = scene.getRenderId();
                      subMesh.effect._wasPreviouslyReady = true;
                      return true;
                    };
                    MRDLInnerquadMaterial2.prototype.bindForSubMesh = function(world, mesh, subMesh) {
                      var scene = this.getScene();
                      var defines = subMesh.materialDefines;
                      if (!defines) {
                        return;
                      }
                      var effect = subMesh.effect;
                      if (!effect) {
                        return;
                      }
                      this._activeEffect = effect;
                      this.bindOnlyWorldMatrix(world);
                      this._activeEffect.setMatrix("viewProjection", scene.getTransformMatrix());
                      this._activeEffect.setVector3("cameraPosition", scene.activeCamera.position);
                      this._activeEffect.setDirectColor4("_Color_", this.color);
                      this._activeEffect.setFloat("_Radius_", this.radius);
                      this._activeEffect.setFloat("_Fixed_Radius_", this.fixedRadius ? 1 : 0);
                      this._activeEffect.setFloat("_Filter_Width_", this._filterWidth);
                      this._activeEffect.setFloat("_Glow_Fraction_", this.glowFraction);
                      this._activeEffect.setFloat("_Glow_Max_", this.glowMax);
                      this._activeEffect.setFloat("_Glow_Falloff_", this.glowFalloff);
                      this._afterBind(mesh, this._activeEffect);
                    };
                    MRDLInnerquadMaterial2.prototype.getAnimatables = function() {
                      return [];
                    };
                    MRDLInnerquadMaterial2.prototype.dispose = function(forceDisposeEffect) {
                      _super.prototype.dispose.call(this, forceDisposeEffect);
                    };
                    MRDLInnerquadMaterial2.prototype.clone = function(name) {
                      var _this = this;
                      return core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.SerializationHelper.Clone(function() {
                        return new MRDLInnerquadMaterial2(name, _this.getScene());
                      }, this);
                    };
                    MRDLInnerquadMaterial2.prototype.serialize = function() {
                      var serializationObject = core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.SerializationHelper.Serialize(this);
                      serializationObject.customType = "BABYLON.MRDLInnerquadMaterial";
                      return serializationObject;
                    };
                    MRDLInnerquadMaterial2.prototype.getClassName = function() {
                      return "MRDLInnerquadMaterial";
                    };
                    MRDLInnerquadMaterial2.Parse = function(source, scene, rootUrl) {
                      return core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.SerializationHelper.Parse(function() {
                        return new MRDLInnerquadMaterial2(source.name, scene);
                      }, source, scene, rootUrl);
                    };
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLInnerquadMaterial2.prototype, "color", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLInnerquadMaterial2.prototype, "radius", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLInnerquadMaterial2.prototype, "fixedRadius", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLInnerquadMaterial2.prototype, "glowFraction", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLInnerquadMaterial2.prototype, "glowMax", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLInnerquadMaterial2.prototype, "glowFalloff", void 0);
                    return MRDLInnerquadMaterial2;
                  }(core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.PushMaterial)
                );
                (0, core_Maths_math_color__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.MRDLInnerquadMaterial", MRDLInnerquadMaterial);
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/mrdl/mrdlSliderBarMaterial.js": (
              /*!************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/mrdl/mrdlSliderBarMaterial.js ***!
                \************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "MRDLSliderBarMaterial": () => (
                    /* binding */
                    MRDLSliderBarMaterial
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Engines/constants */
                  "core/Misc/perfCounter"
                );
                var core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__);
                var _shaders_mrdlSliderBar_fragment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./shaders/mrdlSliderBar.fragment */
                  "../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlSliderBar.fragment.js"
                );
                var _shaders_mrdlSliderBar_vertex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./shaders/mrdlSliderBar.vertex */
                  "../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlSliderBar.vertex.js"
                );
                var MRDLSliderBarMaterialDefines = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MRDLSliderBarMaterialDefines2, _super);
                    function MRDLSliderBarMaterialDefines2() {
                      var _this = _super.call(this) || this;
                      _this.SKY_ENABLED = true;
                      _this.BLOB_ENABLE_2 = true;
                      _this.IRIDESCENCE_ENABLED = true;
                      _this._needNormals = true;
                      _this._needUVs = true;
                      _this.rebuild();
                      return _this;
                    }
                    return MRDLSliderBarMaterialDefines2;
                  }(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialDefines)
                );
                var MRDLSliderBarMaterial = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MRDLSliderBarMaterial2, _super);
                    function MRDLSliderBarMaterial2(name, scene) {
                      var _this = _super.call(this, name, scene) || this;
                      _this.radius = 0.6;
                      _this.bevelFront = 0.6;
                      _this.bevelFrontStretch = 0.077;
                      _this.bevelBack = 0;
                      _this.bevelBackStretch = 0;
                      _this.radiusTopLeft = 1;
                      _this.radiusTopRight = 1;
                      _this.radiusBottomLeft = 1;
                      _this.radiusBottomRight = 1;
                      _this.bulgeEnabled = false;
                      _this.bulgeHeight = -0.323;
                      _this.bulgeRadius = 0.73;
                      _this.sunIntensity = 1.102;
                      _this.sunTheta = 0.76;
                      _this.sunPhi = 0.526;
                      _this.indirectDiffuse = 0.658;
                      _this.albedo = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color4(0.0117647, 0.505882, 0.996078, 1);
                      _this.specular = 0;
                      _this.shininess = 10;
                      _this.sharpness = 0;
                      _this.subsurface = 0;
                      _this.leftGradientColor = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color4(0.0117647, 0.505882, 0.996078, 1);
                      _this.rightGradientColor = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color4(0.0117647, 0.505882, 0.996078, 1);
                      _this.reflection = 0.749;
                      _this.frontReflect = 0;
                      _this.edgeReflect = 0.09;
                      _this.power = 8.13;
                      _this.skyColor = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color4(0.0117647, 0.964706, 0.996078, 1);
                      _this.horizonColor = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color4(0.0117647, 0.333333, 0.996078, 1);
                      _this.groundColor = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color4(0, 0.254902, 0.996078, 1);
                      _this.horizonPower = 1;
                      _this.width = 0.02;
                      _this.fuzz = 0.5;
                      _this.minFuzz = 1e-3;
                      _this.clipFade = 0.01;
                      _this.hueShift = 0;
                      _this.saturationShift = 0;
                      _this.valueShift = 0;
                      _this.blobPosition = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0.1);
                      _this.blobIntensity = 0.5;
                      _this.blobNearSize = 0.01;
                      _this.blobFarSize = 0.03;
                      _this.blobNearDistance = 0;
                      _this.blobFarDistance = 0.08;
                      _this.blobFadeLength = 0.576;
                      _this.blobPulse = 0;
                      _this.blobFade = 1;
                      _this.blobPosition2 = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector3(0.2, 0, 0.1);
                      _this.blobNearSize2 = 0.01;
                      _this.blobPulse2 = 0;
                      _this.blobFade2 = 1;
                      _this.blobTexture = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Texture("", _this.getScene());
                      _this.leftIndexPosition = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 1);
                      _this.rightIndexPosition = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector3(-1, -1, -1);
                      _this.leftIndexMiddlePosition = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0);
                      _this.rightIndexMiddlePosition = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0);
                      _this.decalScaleXY = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector2(1.5, 1.5);
                      _this.decalFrontOnly = true;
                      _this.rimIntensity = 0.287;
                      _this.rimHueShift = 0;
                      _this.rimSaturationShift = 0;
                      _this.rimValueShift = -1;
                      _this.iridescenceIntensity = 0;
                      _this.useGlobalLeftIndex = 1;
                      _this.useGlobalRightIndex = 1;
                      _this.globalLeftIndexTipProximity = 0;
                      _this.globalRightIndexTipProximity = 0;
                      _this.globalLeftIndexTipPosition = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector4(0.5, 0, -0.55, 1);
                      _this.globaRightIndexTipPosition = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector4(0, 0, 0, 1);
                      _this.globalLeftThumbTipPosition = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector4(0.5, 0, -0.55, 1);
                      _this.globalRightThumbTipPosition = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector4(0, 0, 0, 1);
                      _this.globalLeftIndexMiddlePosition = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector4(0.5, 0, -0.55, 1);
                      _this.globalRightIndexMiddlePosition = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector4(0, 0, 0, 1);
                      _this.alphaMode = core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Constants.ALPHA_DISABLE;
                      _this.backFaceCulling = false;
                      _this._blueGradientTexture = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Texture(MRDLSliderBarMaterial2.BLUE_GRADIENT_TEXTURE_URL, _this.getScene(), true, false, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Texture.NEAREST_SAMPLINGMODE);
                      _this._decalTexture = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Texture("", _this.getScene());
                      _this._reflectionMapTexture = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Texture("", _this.getScene());
                      _this._indirectEnvTexture = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Texture("", _this.getScene());
                      return _this;
                    }
                    MRDLSliderBarMaterial2.prototype.needAlphaBlending = function() {
                      return false;
                    };
                    MRDLSliderBarMaterial2.prototype.needAlphaTesting = function() {
                      return false;
                    };
                    MRDLSliderBarMaterial2.prototype.getAlphaTestTexture = function() {
                      return null;
                    };
                    MRDLSliderBarMaterial2.prototype.isReadyForSubMesh = function(mesh, subMesh) {
                      if (this.isFrozen) {
                        if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {
                          return true;
                        }
                      }
                      if (!subMesh.materialDefines) {
                        subMesh.materialDefines = new MRDLSliderBarMaterialDefines();
                      }
                      var defines = subMesh.materialDefines;
                      var scene = this.getScene();
                      if (this._isReadyForSubMesh(subMesh)) {
                        return true;
                      }
                      var engine = scene.getEngine();
                      core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);
                      if (defines.isDirty) {
                        defines.markAsProcessed();
                        scene.resetCachedMaterial();
                        var fallbacks = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.EffectFallbacks();
                        if (defines.FOG) {
                          fallbacks.addFallback(1, "FOG");
                        }
                        core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);
                        defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;
                        var attribs = [core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.PositionKind];
                        if (defines.NORMAL) {
                          attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.NormalKind);
                        }
                        if (defines.UV1) {
                          attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.UVKind);
                        }
                        if (defines.UV2) {
                          attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.UV2Kind);
                        }
                        if (defines.VERTEXCOLOR) {
                          attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.ColorKind);
                        }
                        if (defines.TANGENT) {
                          attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.TangentKind);
                        }
                        core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.PrepareAttributesForInstances(attribs, defines);
                        var shaderName = "mrdlSliderBar";
                        var join = defines.toString();
                        var uniforms = [
                          "world",
                          "viewProjection",
                          "cameraPosition",
                          "_Radius_",
                          "_Bevel_Front_",
                          "_Bevel_Front_Stretch_",
                          "_Bevel_Back_",
                          "_Bevel_Back_Stretch_",
                          "_Radius_Top_Left_",
                          "_Radius_Top_Right_",
                          "_Radius_Bottom_Left_",
                          "_Radius_Bottom_Right_",
                          "_Bulge_Enabled_",
                          "_Bulge_Height_",
                          "_Bulge_Radius_",
                          "_Sun_Intensity_",
                          "_Sun_Theta_",
                          "_Sun_Phi_",
                          "_Indirect_Diffuse_",
                          "_Albedo_",
                          "_Specular_",
                          "_Shininess_",
                          "_Sharpness_",
                          "_Subsurface_",
                          "_Left_Color_",
                          "_Right_Color_",
                          "_Reflection_",
                          "_Front_Reflect_",
                          "_Edge_Reflect_",
                          "_Power_",
                          "_Sky_Color_",
                          "_Horizon_Color_",
                          "_Ground_Color_",
                          "_Horizon_Power_",
                          "_Reflection_Map_",
                          "_Indirect_Environment_",
                          "_Width_",
                          "_Fuzz_",
                          "_Min_Fuzz_",
                          "_Clip_Fade_",
                          "_Hue_Shift_",
                          "_Saturation_Shift_",
                          "_Value_Shift_",
                          "_Blob_Position_",
                          "_Blob_Intensity_",
                          "_Blob_Near_Size_",
                          "_Blob_Far_Size_",
                          "_Blob_Near_Distance_",
                          "_Blob_Far_Distance_",
                          "_Blob_Fade_Length_",
                          "_Blob_Pulse_",
                          "_Blob_Fade_",
                          "_Blob_Texture_",
                          "_Blob_Position_2_",
                          "_Blob_Near_Size_2_",
                          "_Blob_Pulse_2_",
                          "_Blob_Fade_2_",
                          "_Left_Index_Pos_",
                          "_Right_Index_Pos_",
                          "_Left_Index_Middle_Pos_",
                          "_Right_Index_Middle_Pos_",
                          "_Decal_",
                          "_Decal_Scale_XY_",
                          "_Decal_Front_Only_",
                          "_Rim_Intensity_",
                          "_Rim_Texture_",
                          "_Rim_Hue_Shift_",
                          "_Rim_Saturation_Shift_",
                          "_Rim_Value_Shift_",
                          "_Iridescence_Intensity_",
                          "_Iridescence_Texture_",
                          "Use_Global_Left_Index",
                          "Use_Global_Right_Index",
                          "Global_Left_Index_Tip_Position",
                          "Global_Right_Index_Tip_Position",
                          "Global_Left_Thumb_Tip_Position",
                          "Global_Right_Thumb_Tip_Position",
                          "Global_Left_Index_Middle_Position;",
                          "Global_Right_Index_Middle_Position",
                          "Global_Left_Index_Tip_Proximity",
                          "Global_Right_Index_Tip_Proximity"
                        ];
                        var samplers = ["_Rim_Texture_", "_Iridescence_Texture_"];
                        var uniformBuffers = new Array();
                        core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.PrepareUniformsAndSamplersList({
                          uniformsNames: uniforms,
                          uniformBuffersNames: uniformBuffers,
                          samplers,
                          defines,
                          maxSimultaneousLights: 4
                        });
                        subMesh.setEffect(scene.getEngine().createEffect(shaderName, {
                          attributes: attribs,
                          uniformsNames: uniforms,
                          uniformBuffersNames: uniformBuffers,
                          samplers,
                          defines: join,
                          fallbacks,
                          onCompiled: this.onCompiled,
                          onError: this.onError,
                          indexParameters: { maxSimultaneousLights: 4 }
                        }, engine), defines, this._materialContext);
                      }
                      if (!subMesh.effect || !subMesh.effect.isReady()) {
                        return false;
                      }
                      defines._renderId = scene.getRenderId();
                      subMesh.effect._wasPreviouslyReady = true;
                      return true;
                    };
                    MRDLSliderBarMaterial2.prototype.bindForSubMesh = function(world, mesh, subMesh) {
                      var defines = subMesh.materialDefines;
                      if (!defines) {
                        return;
                      }
                      var effect = subMesh.effect;
                      if (!effect) {
                        return;
                      }
                      this._activeEffect = effect;
                      this.bindOnlyWorldMatrix(world);
                      this._activeEffect.setMatrix("viewProjection", this.getScene().getTransformMatrix());
                      this._activeEffect.setVector3("cameraPosition", this.getScene().activeCamera.position);
                      this._activeEffect.setFloat("_Radius_", this.radius);
                      this._activeEffect.setFloat("_Bevel_Front_", this.bevelFront);
                      this._activeEffect.setFloat("_Bevel_Front_Stretch_", this.bevelFrontStretch);
                      this._activeEffect.setFloat("_Bevel_Back_", this.bevelBack);
                      this._activeEffect.setFloat("_Bevel_Back_Stretch_", this.bevelBackStretch);
                      this._activeEffect.setFloat("_Radius_Top_Left_", this.radiusTopLeft);
                      this._activeEffect.setFloat("_Radius_Top_Right_", this.radiusTopRight);
                      this._activeEffect.setFloat("_Radius_Bottom_Left_", this.radiusBottomLeft);
                      this._activeEffect.setFloat("_Radius_Bottom_Right_", this.radiusBottomRight);
                      this._activeEffect.setFloat("_Bulge_Enabled_", this.bulgeEnabled ? 1 : 0);
                      this._activeEffect.setFloat("_Bulge_Height_", this.bulgeHeight);
                      this._activeEffect.setFloat("_Bulge_Radius_", this.bulgeRadius);
                      this._activeEffect.setFloat("_Sun_Intensity_", this.sunIntensity);
                      this._activeEffect.setFloat("_Sun_Theta_", this.sunTheta);
                      this._activeEffect.setFloat("_Sun_Phi_", this.sunPhi);
                      this._activeEffect.setFloat("_Indirect_Diffuse_", this.indirectDiffuse);
                      this._activeEffect.setDirectColor4("_Albedo_", this.albedo);
                      this._activeEffect.setFloat("_Specular_", this.specular);
                      this._activeEffect.setFloat("_Shininess_", this.shininess);
                      this._activeEffect.setFloat("_Sharpness_", this.sharpness);
                      this._activeEffect.setFloat("_Subsurface_", this.subsurface);
                      this._activeEffect.setDirectColor4("_Left_Color_", this.leftGradientColor);
                      this._activeEffect.setDirectColor4("_Right_Color_", this.rightGradientColor);
                      this._activeEffect.setFloat("_Reflection_", this.reflection);
                      this._activeEffect.setFloat("_Front_Reflect_", this.frontReflect);
                      this._activeEffect.setFloat("_Edge_Reflect_", this.edgeReflect);
                      this._activeEffect.setFloat("_Power_", this.power);
                      this._activeEffect.setDirectColor4("_Sky_Color_", this.skyColor);
                      this._activeEffect.setDirectColor4("_Horizon_Color_", this.horizonColor);
                      this._activeEffect.setDirectColor4("_Ground_Color_", this.groundColor);
                      this._activeEffect.setFloat("_Horizon_Power_", this.horizonPower);
                      this._activeEffect.setTexture("_Reflection_Map_", this._reflectionMapTexture);
                      this._activeEffect.setTexture("_Indirect_Environment_", this._indirectEnvTexture);
                      this._activeEffect.setFloat("_Width_", this.width);
                      this._activeEffect.setFloat("_Fuzz_", this.fuzz);
                      this._activeEffect.setFloat("_Min_Fuzz_", this.minFuzz);
                      this._activeEffect.setFloat("_Clip_Fade_", this.clipFade);
                      this._activeEffect.setFloat("_Hue_Shift_", this.hueShift);
                      this._activeEffect.setFloat("_Saturation_Shift_", this.saturationShift);
                      this._activeEffect.setFloat("_Value_Shift_", this.valueShift);
                      this._activeEffect.setVector3("_Blob_Position_", this.blobPosition);
                      this._activeEffect.setFloat("_Blob_Intensity_", this.blobIntensity);
                      this._activeEffect.setFloat("_Blob_Near_Size_", this.blobNearSize);
                      this._activeEffect.setFloat("_Blob_Far_Size_", this.blobFarSize);
                      this._activeEffect.setFloat("_Blob_Near_Distance_", this.blobNearDistance);
                      this._activeEffect.setFloat("_Blob_Far_Distance_", this.blobFarDistance);
                      this._activeEffect.setFloat("_Blob_Fade_Length_", this.blobFadeLength);
                      this._activeEffect.setFloat("_Blob_Pulse_", this.blobPulse);
                      this._activeEffect.setFloat("_Blob_Fade_", this.blobFade);
                      this._activeEffect.setTexture("_Blob_Texture_", this.blobTexture);
                      this._activeEffect.setVector3("_Blob_Position_2_", this.blobPosition2);
                      this._activeEffect.setFloat("_Blob_Near_Size_2_", this.blobNearSize2);
                      this._activeEffect.setFloat("_Blob_Pulse_2_", this.blobPulse2);
                      this._activeEffect.setFloat("_Blob_Fade_2_", this.blobFade2);
                      this._activeEffect.setVector3("_Left_Index_Pos_", this.leftIndexPosition);
                      this._activeEffect.setVector3("_Right_Index_Pos_", this.rightIndexPosition);
                      this._activeEffect.setVector3("_Left_Index_Middle_Pos_", this.leftIndexMiddlePosition);
                      this._activeEffect.setVector3("_Right_Index_Middle_Pos_", this.rightIndexMiddlePosition);
                      this._activeEffect.setTexture("_Decal_", this._decalTexture);
                      this._activeEffect.setVector2("_Decal_Scale_XY_", this.decalScaleXY);
                      this._activeEffect.setFloat("_Decal_Front_Only_", this.decalFrontOnly ? 1 : 0);
                      this._activeEffect.setFloat("_Rim_Intensity_", this.rimIntensity);
                      this._activeEffect.setTexture("_Rim_Texture_", this._blueGradientTexture);
                      this._activeEffect.setFloat("_Rim_Hue_Shift_", this.rimHueShift);
                      this._activeEffect.setFloat("_Rim_Saturation_Shift_", this.rimSaturationShift);
                      this._activeEffect.setFloat("_Rim_Value_Shift_", this.rimValueShift);
                      this._activeEffect.setFloat("_Iridescence_Intensity_", this.iridescenceIntensity);
                      this._activeEffect.setTexture("_Iridescence_Texture_", this._blueGradientTexture);
                      this._activeEffect.setFloat("Use_Global_Left_Index", this.useGlobalLeftIndex);
                      this._activeEffect.setFloat("Use_Global_Right_Index", this.useGlobalRightIndex);
                      this._activeEffect.setVector4("Global_Left_Index_Tip_Position", this.globalLeftIndexTipPosition);
                      this._activeEffect.setVector4("Global_Right_Index_Tip_Position", this.globaRightIndexTipPosition);
                      this._activeEffect.setVector4("Global_Left_Thumb_Tip_Position", this.globalLeftThumbTipPosition);
                      this._activeEffect.setVector4("Global_Right_Thumb_Tip_Position", this.globalRightThumbTipPosition);
                      this._activeEffect.setVector4("Global_Left_Index_Middle_Position", this.globalLeftIndexMiddlePosition);
                      this._activeEffect.setVector4("Global_Right_Index_Middle_Position", this.globalRightIndexMiddlePosition);
                      this._activeEffect.setFloat("Global_Left_Index_Tip_Proximity", this.globalLeftIndexTipProximity);
                      this._activeEffect.setFloat("Global_Right_Index_Tip_Proximity", this.globalRightIndexTipProximity);
                      this._afterBind(mesh, this._activeEffect);
                    };
                    MRDLSliderBarMaterial2.prototype.getAnimatables = function() {
                      return [];
                    };
                    MRDLSliderBarMaterial2.prototype.dispose = function(forceDisposeEffect) {
                      _super.prototype.dispose.call(this, forceDisposeEffect);
                      this._reflectionMapTexture.dispose();
                      this._indirectEnvTexture.dispose();
                      this._blueGradientTexture.dispose();
                      this._decalTexture.dispose();
                    };
                    MRDLSliderBarMaterial2.prototype.clone = function(name) {
                      var _this = this;
                      return core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.SerializationHelper.Clone(function() {
                        return new MRDLSliderBarMaterial2(name, _this.getScene());
                      }, this);
                    };
                    MRDLSliderBarMaterial2.prototype.serialize = function() {
                      var serializationObject = _super.prototype.serialize.call(this);
                      serializationObject.customType = "BABYLON.MRDLSliderBarMaterial";
                      return serializationObject;
                    };
                    MRDLSliderBarMaterial2.prototype.getClassName = function() {
                      return "MRDLSliderBarMaterial";
                    };
                    MRDLSliderBarMaterial2.Parse = function(source, scene, rootUrl) {
                      return core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.SerializationHelper.Parse(function() {
                        return new MRDLSliderBarMaterial2(source.name, scene);
                      }, source, scene, rootUrl);
                    };
                    MRDLSliderBarMaterial2.BLUE_GRADIENT_TEXTURE_URL = "https://assets.babylonjs.com/meshes/MRTK/MRDL/mrtk-mrdl-blue-gradient.png";
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "radius", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "bevelFront", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "bevelFrontStretch", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "bevelBack", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "bevelBackStretch", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "radiusTopLeft", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "radiusTopRight", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "radiusBottomLeft", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "radiusBottomRight", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "bulgeEnabled", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "bulgeHeight", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "bulgeRadius", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "sunIntensity", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "sunTheta", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "sunPhi", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "indirectDiffuse", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "albedo", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "specular", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "shininess", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "sharpness", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "subsurface", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "leftGradientColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "rightGradientColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "reflection", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "frontReflect", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "edgeReflect", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "power", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "skyColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "horizonColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "groundColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "horizonPower", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "width", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "fuzz", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "minFuzz", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "clipFade", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "hueShift", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "saturationShift", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "valueShift", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "blobPosition", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "blobIntensity", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "blobNearSize", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "blobFarSize", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "blobNearDistance", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "blobFarDistance", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "blobFadeLength", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "blobPulse", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "blobFade", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "blobPosition2", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "blobNearSize2", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "blobPulse2", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "blobFade2", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "blobTexture", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "leftIndexPosition", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "rightIndexPosition", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "leftIndexMiddlePosition", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "rightIndexMiddlePosition", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "decalScaleXY", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "decalFrontOnly", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "rimIntensity", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "rimHueShift", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "rimSaturationShift", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "rimValueShift", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderBarMaterial2.prototype, "iridescenceIntensity", void 0);
                    return MRDLSliderBarMaterial2;
                  }(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.PushMaterial)
                );
                (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.MRDLSliderBarMaterial", MRDLSliderBarMaterial);
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/mrdl/mrdlSliderThumbMaterial.js": (
              /*!**************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/mrdl/mrdlSliderThumbMaterial.js ***!
                \**************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "MRDLSliderThumbMaterial": () => (
                    /* binding */
                    MRDLSliderThumbMaterial
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Engines/constants */
                  "core/Misc/perfCounter"
                );
                var core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__);
                var _shaders_mrdlSliderThumb_fragment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
                  /*! ./shaders/mrdlSliderThumb.fragment */
                  "../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlSliderThumb.fragment.js"
                );
                var _shaders_mrdlSliderThumb_vertex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
                  /*! ./shaders/mrdlSliderThumb.vertex */
                  "../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlSliderThumb.vertex.js"
                );
                var MRDLSliderThumbMaterialDefines = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MRDLSliderThumbMaterialDefines2, _super);
                    function MRDLSliderThumbMaterialDefines2() {
                      var _this = _super.call(this) || this;
                      _this.SKY_ENABLED = true;
                      _this.BLOB_ENABLE_2 = true;
                      _this.IRIDESCENCE_ENABLED = true;
                      _this._needNormals = true;
                      _this._needUVs = true;
                      _this.rebuild();
                      return _this;
                    }
                    return MRDLSliderThumbMaterialDefines2;
                  }(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialDefines)
                );
                var MRDLSliderThumbMaterial = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MRDLSliderThumbMaterial2, _super);
                    function MRDLSliderThumbMaterial2(name, scene) {
                      var _this = _super.call(this, name, scene) || this;
                      _this.radius = 0.157;
                      _this.bevelFront = 0.065;
                      _this.bevelFrontStretch = 0.077;
                      _this.bevelBack = 0.031;
                      _this.bevelBackStretch = 0;
                      _this.radiusTopLeft = 1;
                      _this.radiusTopRight = 1;
                      _this.radiusBottomLeft = 1;
                      _this.radiusBottomRight = 1;
                      _this.bulgeEnabled = false;
                      _this.bulgeHeight = -0.323;
                      _this.bulgeRadius = 0.73;
                      _this.sunIntensity = 2;
                      _this.sunTheta = 0.937;
                      _this.sunPhi = 0.555;
                      _this.indirectDiffuse = 1;
                      _this.albedo = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color4(0.0117647, 0.505882, 0.996078, 1);
                      _this.specular = 0;
                      _this.shininess = 10;
                      _this.sharpness = 0;
                      _this.subsurface = 0.31;
                      _this.leftGradientColor = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color4(0.0117647, 0.505882, 0.996078, 1);
                      _this.rightGradientColor = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color4(0.0117647, 0.505882, 0.996078, 1);
                      _this.reflection = 0.749;
                      _this.frontReflect = 0;
                      _this.edgeReflect = 0.09;
                      _this.power = 8.1;
                      _this.skyColor = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color4(0.0117647, 0.960784, 0.996078, 1);
                      _this.horizonColor = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color4(0.0117647, 0.333333, 0.996078, 1);
                      _this.groundColor = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Color4(0, 0.254902, 0.996078, 1);
                      _this.horizonPower = 1;
                      _this.width = 0.02;
                      _this.fuzz = 0.5;
                      _this.minFuzz = 1e-3;
                      _this.clipFade = 0.01;
                      _this.hueShift = 0;
                      _this.saturationShift = 0;
                      _this.valueShift = 0;
                      _this.blobPosition = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0.1);
                      _this.blobIntensity = 0.5;
                      _this.blobNearSize = 0.01;
                      _this.blobFarSize = 0.03;
                      _this.blobNearDistance = 0;
                      _this.blobFarDistance = 0.08;
                      _this.blobFadeLength = 0.576;
                      _this.blobPulse = 0;
                      _this.blobFade = 1;
                      _this.blobPosition2 = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector3(0.2, 0, 0.1);
                      _this.blobNearSize2 = 0.01;
                      _this.blobPulse2 = 0;
                      _this.blobFade2 = 1;
                      _this.blobTexture = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Texture("", _this.getScene());
                      _this.leftIndexPosition = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 1);
                      _this.rightIndexPosition = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector3(-1, -1, -1);
                      _this.leftIndexMiddlePosition = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0);
                      _this.rightIndexMiddlePosition = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0);
                      _this.decalScaleXY = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector2(1.5, 1.5);
                      _this.decalFrontOnly = true;
                      _this.rimIntensity = 0.287;
                      _this.rimHueShift = 0;
                      _this.rimSaturationShift = 0;
                      _this.rimValueShift = -1;
                      _this.iridescenceIntensity = 0;
                      _this.useGlobalLeftIndex = 1;
                      _this.useGlobalRightIndex = 1;
                      _this.globalLeftIndexTipProximity = 0;
                      _this.globalRightIndexTipProximity = 0;
                      _this.globalLeftIndexTipPosition = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector4(0.5, 0, -0.55, 1);
                      _this.globaRightIndexTipPosition = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector4(0, 0, 0, 1);
                      _this.globalLeftThumbTipPosition = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector4(0.5, 0, -0.55, 1);
                      _this.globalRightThumbTipPosition = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector4(0, 0, 0, 1);
                      _this.globalLeftIndexMiddlePosition = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector4(0.5, 0, -0.55, 1);
                      _this.globalRightIndexMiddlePosition = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Vector4(0, 0, 0, 1);
                      _this.alphaMode = core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Constants.ALPHA_DISABLE;
                      _this.backFaceCulling = false;
                      _this._blueGradientTexture = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Texture(MRDLSliderThumbMaterial2.BLUE_GRADIENT_TEXTURE_URL, scene, true, false, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Texture.NEAREST_SAMPLINGMODE);
                      _this._decalTexture = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Texture("", _this.getScene());
                      _this._reflectionMapTexture = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Texture("", _this.getScene());
                      _this._indirectEnvTexture = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.Texture("", _this.getScene());
                      return _this;
                    }
                    MRDLSliderThumbMaterial2.prototype.needAlphaBlending = function() {
                      return false;
                    };
                    MRDLSliderThumbMaterial2.prototype.needAlphaTesting = function() {
                      return false;
                    };
                    MRDLSliderThumbMaterial2.prototype.getAlphaTestTexture = function() {
                      return null;
                    };
                    MRDLSliderThumbMaterial2.prototype.isReadyForSubMesh = function(mesh, subMesh) {
                      if (this.isFrozen) {
                        if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {
                          return true;
                        }
                      }
                      if (!subMesh.materialDefines) {
                        subMesh.materialDefines = new MRDLSliderThumbMaterialDefines();
                      }
                      var defines = subMesh.materialDefines;
                      var scene = this.getScene();
                      if (this._isReadyForSubMesh(subMesh)) {
                        return true;
                      }
                      var engine = scene.getEngine();
                      core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);
                      if (defines.isDirty) {
                        defines.markAsProcessed();
                        scene.resetCachedMaterial();
                        var fallbacks = new core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.EffectFallbacks();
                        if (defines.FOG) {
                          fallbacks.addFallback(1, "FOG");
                        }
                        core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);
                        defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;
                        var attribs = [core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.PositionKind];
                        if (defines.NORMAL) {
                          attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.NormalKind);
                        }
                        if (defines.UV1) {
                          attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.UVKind);
                        }
                        if (defines.UV2) {
                          attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.UV2Kind);
                        }
                        if (defines.VERTEXCOLOR) {
                          attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.ColorKind);
                        }
                        if (defines.TANGENT) {
                          attribs.push(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.VertexBuffer.TangentKind);
                        }
                        core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.PrepareAttributesForInstances(attribs, defines);
                        var shaderName = "mrdlSliderThumb";
                        var join = defines.toString();
                        var uniforms = [
                          "world",
                          "viewProjection",
                          "cameraPosition",
                          "_Radius_",
                          "_Bevel_Front_",
                          "_Bevel_Front_Stretch_",
                          "_Bevel_Back_",
                          "_Bevel_Back_Stretch_",
                          "_Radius_Top_Left_",
                          "_Radius_Top_Right_",
                          "_Radius_Bottom_Left_",
                          "_Radius_Bottom_Right_",
                          "_Bulge_Enabled_",
                          "_Bulge_Height_",
                          "_Bulge_Radius_",
                          "_Sun_Intensity_",
                          "_Sun_Theta_",
                          "_Sun_Phi_",
                          "_Indirect_Diffuse_",
                          "_Albedo_",
                          "_Specular_",
                          "_Shininess_",
                          "_Sharpness_",
                          "_Subsurface_",
                          "_Left_Color_",
                          "_Right_Color_",
                          "_Reflection_",
                          "_Front_Reflect_",
                          "_Edge_Reflect_",
                          "_Power_",
                          "_Sky_Color_",
                          "_Horizon_Color_",
                          "_Ground_Color_",
                          "_Horizon_Power_",
                          "_Reflection_Map_",
                          "_Indirect_Environment_",
                          "_Width_",
                          "_Fuzz_",
                          "_Min_Fuzz_",
                          "_Clip_Fade_",
                          "_Hue_Shift_",
                          "_Saturation_Shift_",
                          "_Value_Shift_",
                          "_Blob_Position_",
                          "_Blob_Intensity_",
                          "_Blob_Near_Size_",
                          "_Blob_Far_Size_",
                          "_Blob_Near_Distance_",
                          "_Blob_Far_Distance_",
                          "_Blob_Fade_Length_",
                          "_Blob_Pulse_",
                          "_Blob_Fade_",
                          "_Blob_Texture_",
                          "_Blob_Position_2_",
                          "_Blob_Near_Size_2_",
                          "_Blob_Pulse_2_",
                          "_Blob_Fade_2_",
                          "_Left_Index_Pos_",
                          "_Right_Index_Pos_",
                          "_Left_Index_Middle_Pos_",
                          "_Right_Index_Middle_Pos_",
                          "_Decal_",
                          "_Decal_Scale_XY_",
                          "_Decal_Front_Only_",
                          "_Rim_Intensity_",
                          "_Rim_Texture_",
                          "_Rim_Hue_Shift_",
                          "_Rim_Saturation_Shift_",
                          "_Rim_Value_Shift_",
                          "_Iridescence_Intensity_",
                          "_Iridescence_Texture_",
                          "Use_Global_Left_Index",
                          "Use_Global_Right_Index",
                          "Global_Left_Index_Tip_Position",
                          "Global_Right_Index_Tip_Position",
                          "Global_Left_Thumb_Tip_Position",
                          "Global_Right_Thumb_Tip_Position",
                          "Global_Left_Index_Middle_Position;",
                          "Global_Right_Index_Middle_Position",
                          "Global_Left_Index_Tip_Proximity",
                          "Global_Right_Index_Tip_Proximity"
                        ];
                        var samplers = ["_Rim_Texture_", "_Iridescence_Texture_"];
                        var uniformBuffers = new Array();
                        core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.MaterialHelper.PrepareUniformsAndSamplersList({
                          uniformsNames: uniforms,
                          uniformBuffersNames: uniformBuffers,
                          samplers,
                          defines,
                          maxSimultaneousLights: 4
                        });
                        subMesh.setEffect(scene.getEngine().createEffect(shaderName, {
                          attributes: attribs,
                          uniformsNames: uniforms,
                          uniformBuffersNames: uniformBuffers,
                          samplers,
                          defines: join,
                          fallbacks,
                          onCompiled: this.onCompiled,
                          onError: this.onError,
                          indexParameters: { maxSimultaneousLights: 4 }
                        }, engine), defines);
                      }
                      if (!subMesh.effect || !subMesh.effect.isReady()) {
                        return false;
                      }
                      defines._renderId = scene.getRenderId();
                      subMesh.effect._wasPreviouslyReady = true;
                      return true;
                    };
                    MRDLSliderThumbMaterial2.prototype.bindForSubMesh = function(world, mesh, subMesh) {
                      var defines = subMesh.materialDefines;
                      if (!defines) {
                        return;
                      }
                      var effect = subMesh.effect;
                      if (!effect) {
                        return;
                      }
                      this._activeEffect = effect;
                      this.bindOnlyWorldMatrix(world);
                      this._activeEffect.setMatrix("viewProjection", this.getScene().getTransformMatrix());
                      this._activeEffect.setVector3("cameraPosition", this.getScene().activeCamera.position);
                      this._activeEffect.setFloat("_Radius_", this.radius);
                      this._activeEffect.setFloat("_Bevel_Front_", this.bevelFront);
                      this._activeEffect.setFloat("_Bevel_Front_Stretch_", this.bevelFrontStretch);
                      this._activeEffect.setFloat("_Bevel_Back_", this.bevelBack);
                      this._activeEffect.setFloat("_Bevel_Back_Stretch_", this.bevelBackStretch);
                      this._activeEffect.setFloat("_Radius_Top_Left_", this.radiusTopLeft);
                      this._activeEffect.setFloat("_Radius_Top_Right_", this.radiusTopRight);
                      this._activeEffect.setFloat("_Radius_Bottom_Left_", this.radiusBottomLeft);
                      this._activeEffect.setFloat("_Radius_Bottom_Right_", this.radiusBottomRight);
                      this._activeEffect.setFloat("_Bulge_Enabled_", this.bulgeEnabled ? 1 : 0);
                      this._activeEffect.setFloat("_Bulge_Height_", this.bulgeHeight);
                      this._activeEffect.setFloat("_Bulge_Radius_", this.bulgeRadius);
                      this._activeEffect.setFloat("_Sun_Intensity_", this.sunIntensity);
                      this._activeEffect.setFloat("_Sun_Theta_", this.sunTheta);
                      this._activeEffect.setFloat("_Sun_Phi_", this.sunPhi);
                      this._activeEffect.setFloat("_Indirect_Diffuse_", this.indirectDiffuse);
                      this._activeEffect.setDirectColor4("_Albedo_", this.albedo);
                      this._activeEffect.setFloat("_Specular_", this.specular);
                      this._activeEffect.setFloat("_Shininess_", this.shininess);
                      this._activeEffect.setFloat("_Sharpness_", this.sharpness);
                      this._activeEffect.setFloat("_Subsurface_", this.subsurface);
                      this._activeEffect.setDirectColor4("_Left_Color_", this.leftGradientColor);
                      this._activeEffect.setDirectColor4("_Right_Color_", this.rightGradientColor);
                      this._activeEffect.setFloat("_Reflection_", this.reflection);
                      this._activeEffect.setFloat("_Front_Reflect_", this.frontReflect);
                      this._activeEffect.setFloat("_Edge_Reflect_", this.edgeReflect);
                      this._activeEffect.setFloat("_Power_", this.power);
                      this._activeEffect.setDirectColor4("_Sky_Color_", this.skyColor);
                      this._activeEffect.setDirectColor4("_Horizon_Color_", this.horizonColor);
                      this._activeEffect.setDirectColor4("_Ground_Color_", this.groundColor);
                      this._activeEffect.setFloat("_Horizon_Power_", this.horizonPower);
                      this._activeEffect.setTexture("_Reflection_Map_", this._reflectionMapTexture);
                      this._activeEffect.setTexture("_Indirect_Environment_", this._indirectEnvTexture);
                      this._activeEffect.setFloat("_Width_", this.width);
                      this._activeEffect.setFloat("_Fuzz_", this.fuzz);
                      this._activeEffect.setFloat("_Min_Fuzz_", this.minFuzz);
                      this._activeEffect.setFloat("_Clip_Fade_", this.clipFade);
                      this._activeEffect.setFloat("_Hue_Shift_", this.hueShift);
                      this._activeEffect.setFloat("_Saturation_Shift_", this.saturationShift);
                      this._activeEffect.setFloat("_Value_Shift_", this.valueShift);
                      this._activeEffect.setVector3("_Blob_Position_", this.blobPosition);
                      this._activeEffect.setFloat("_Blob_Intensity_", this.blobIntensity);
                      this._activeEffect.setFloat("_Blob_Near_Size_", this.blobNearSize);
                      this._activeEffect.setFloat("_Blob_Far_Size_", this.blobFarSize);
                      this._activeEffect.setFloat("_Blob_Near_Distance_", this.blobNearDistance);
                      this._activeEffect.setFloat("_Blob_Far_Distance_", this.blobFarDistance);
                      this._activeEffect.setFloat("_Blob_Fade_Length_", this.blobFadeLength);
                      this._activeEffect.setFloat("_Blob_Pulse_", this.blobPulse);
                      this._activeEffect.setFloat("_Blob_Fade_", this.blobFade);
                      this._activeEffect.setTexture("_Blob_Texture_", this.blobTexture);
                      this._activeEffect.setVector3("_Blob_Position_2_", this.blobPosition2);
                      this._activeEffect.setFloat("_Blob_Near_Size_2_", this.blobNearSize2);
                      this._activeEffect.setFloat("_Blob_Pulse_2_", this.blobPulse2);
                      this._activeEffect.setFloat("_Blob_Fade_2_", this.blobFade2);
                      this._activeEffect.setVector3("_Left_Index_Pos_", this.leftIndexPosition);
                      this._activeEffect.setVector3("_Right_Index_Pos_", this.rightIndexPosition);
                      this._activeEffect.setVector3("_Left_Index_Middle_Pos_", this.leftIndexMiddlePosition);
                      this._activeEffect.setVector3("_Right_Index_Middle_Pos_", this.rightIndexMiddlePosition);
                      this._activeEffect.setTexture("_Decal_", this._decalTexture);
                      this._activeEffect.setVector2("_Decal_Scale_XY_", this.decalScaleXY);
                      this._activeEffect.setFloat("_Decal_Front_Only_", this.decalFrontOnly ? 1 : 0);
                      this._activeEffect.setFloat("_Rim_Intensity_", this.rimIntensity);
                      this._activeEffect.setTexture("_Rim_Texture_", this._blueGradientTexture);
                      this._activeEffect.setFloat("_Rim_Hue_Shift_", this.rimHueShift);
                      this._activeEffect.setFloat("_Rim_Saturation_Shift_", this.rimSaturationShift);
                      this._activeEffect.setFloat("_Rim_Value_Shift_", this.rimValueShift);
                      this._activeEffect.setFloat("_Iridescence_Intensity_", this.iridescenceIntensity);
                      this._activeEffect.setTexture("_Iridescence_Texture_", this._blueGradientTexture);
                      this._activeEffect.setFloat("Use_Global_Left_Index", this.useGlobalLeftIndex);
                      this._activeEffect.setFloat("Use_Global_Right_Index", this.useGlobalRightIndex);
                      this._activeEffect.setVector4("Global_Left_Index_Tip_Position", this.globalLeftIndexTipPosition);
                      this._activeEffect.setVector4("Global_Right_Index_Tip_Position", this.globaRightIndexTipPosition);
                      this._activeEffect.setVector4("Global_Left_Thumb_Tip_Position", this.globalLeftThumbTipPosition);
                      this._activeEffect.setVector4("Global_Right_Thumb_Tip_Position", this.globalRightThumbTipPosition);
                      this._activeEffect.setVector4("Global_Left_Index_Middle_Position", this.globalLeftIndexMiddlePosition);
                      this._activeEffect.setVector4("Global_Right_Index_Middle_Position", this.globalRightIndexMiddlePosition);
                      this._activeEffect.setFloat("Global_Left_Index_Tip_Proximity", this.globalLeftIndexTipProximity);
                      this._activeEffect.setFloat("Global_Right_Index_Tip_Proximity", this.globalRightIndexTipProximity);
                      this._afterBind(mesh, this._activeEffect);
                    };
                    MRDLSliderThumbMaterial2.prototype.getAnimatables = function() {
                      return [];
                    };
                    MRDLSliderThumbMaterial2.prototype.dispose = function(forceDisposeEffect) {
                      _super.prototype.dispose.call(this, forceDisposeEffect);
                      this._reflectionMapTexture.dispose();
                      this._indirectEnvTexture.dispose();
                      this._blueGradientTexture.dispose();
                      this._decalTexture.dispose();
                    };
                    MRDLSliderThumbMaterial2.prototype.clone = function(name) {
                      var _this = this;
                      return core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.SerializationHelper.Clone(function() {
                        return new MRDLSliderThumbMaterial2(name, _this.getScene());
                      }, this);
                    };
                    MRDLSliderThumbMaterial2.prototype.serialize = function() {
                      var serializationObject = _super.prototype.serialize.call(this);
                      serializationObject.customType = "BABYLON.MRDLSliderThumbMaterial";
                      return serializationObject;
                    };
                    MRDLSliderThumbMaterial2.prototype.getClassName = function() {
                      return "MRDLSliderThumbMaterial";
                    };
                    MRDLSliderThumbMaterial2.Parse = function(source, scene, rootUrl) {
                      return core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.SerializationHelper.Parse(function() {
                        return new MRDLSliderThumbMaterial2(source.name, scene);
                      }, source, scene, rootUrl);
                    };
                    MRDLSliderThumbMaterial2.BLUE_GRADIENT_TEXTURE_URL = "https://assets.babylonjs.com/meshes/MRTK/MRDL/mrtk-mrdl-blue-gradient.png";
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "radius", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "bevelFront", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "bevelFrontStretch", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "bevelBack", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "bevelBackStretch", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "radiusTopLeft", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "radiusTopRight", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "radiusBottomLeft", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "radiusBottomRight", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "bulgeEnabled", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "bulgeHeight", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "bulgeRadius", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "sunIntensity", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "sunTheta", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "sunPhi", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "indirectDiffuse", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "albedo", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "specular", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "shininess", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "sharpness", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "subsurface", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "leftGradientColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "rightGradientColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "reflection", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "frontReflect", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "edgeReflect", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "power", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "skyColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "horizonColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "groundColor", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "horizonPower", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "width", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "fuzz", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "minFuzz", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "clipFade", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "hueShift", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "saturationShift", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "valueShift", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "blobPosition", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "blobIntensity", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "blobNearSize", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "blobFarSize", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "blobNearDistance", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "blobFarDistance", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "blobFadeLength", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "blobPulse", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "blobFade", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "blobPosition2", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "blobNearSize2", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "blobPulse2", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "blobFade2", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "blobTexture", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "leftIndexPosition", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "rightIndexPosition", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "leftIndexMiddlePosition", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "rightIndexMiddlePosition", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "decalScaleXY", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "decalFrontOnly", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "rimIntensity", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "rimHueShift", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "rimSaturationShift", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "rimValueShift", void 0);
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
                      (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.serialize)()
                    ], MRDLSliderThumbMaterial2.prototype, "iridescenceIntensity", void 0);
                    return MRDLSliderThumbMaterial2;
                  }(core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.PushMaterial)
                );
                (0, core_Misc_decorators__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.MRDLSliderThumbMaterial", MRDLSliderThumbMaterial);
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlBackglow.fragment.js": (
              /*!********************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlBackglow.fragment.js ***!
                \********************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "mrdlBackglowPixelShader": () => (
                    /* binding */
                    mrdlBackglowPixelShader
                  )
                  /* harmony export */
                });
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Engines/shaderStore */
                  "core/Misc/perfCounter"
                );
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
                var name = "mrdlBackglowPixelShader";
                var shader = "uniform vec3 cameraPosition;\nvarying vec3 vNormal;\nvarying vec2 vUV;\nuniform float _Bevel_Radius_;\nuniform float _Line_Width_;\nuniform bool _Absolute_Sizes_;\nuniform float _Tuning_Motion_;\nuniform float _Motion_;\nuniform float _Max_Intensity_;\nuniform float _Intensity_Fade_In_Exponent_;\nuniform float _Outer_Fuzz_Start_;\nuniform float _Outer_Fuzz_End_;\nuniform vec4 _Color_;\nuniform vec4 _Inner_Color_;\nuniform float _Blend_Exponent_;\nuniform float _Falloff_;\nuniform float _Bias_;\nfloat BiasFunc(float b,float v) {\nreturn pow(v,log(clamp(b,0.001,0.999))/log(0.5));\n}\nvoid Fuzzy_Round_Rect_B33(\nfloat Size_X,\nfloat Size_Y,\nfloat Radius_X,\nfloat Radius_Y,\nfloat Line_Width,\nvec2 UV,\nfloat Outer_Fuzz,\nfloat Max_Outer_Fuzz,\nout float Rect_Distance,\nout float Inner_Distance)\n{\nvec2 halfSize=vec2(Size_X,Size_Y)*0.5;\nvec2 r=max(min(vec2(Radius_X,Radius_Y),halfSize),vec2(0.001,0.001));\nfloat radius=min(r.x,r.y)-Max_Outer_Fuzz;\nvec2 v=abs(UV);\nvec2 nearestp=min(v,halfSize-r);\nfloat d=distance(nearestp,v);\nInner_Distance=clamp(1.0-(radius-d)/Line_Width,0.0,1.0);\nRect_Distance=clamp(1.0-(d-radius)/Outer_Fuzz,0.0,1.0)*Inner_Distance;\n}\nvoid main()\n{\nfloat X_Q42;\nfloat Y_Q42;\nX_Q42=vNormal.x;\nY_Q42=vNormal.y;\nfloat MaxAB_Q24=max(_Tuning_Motion_,_Motion_);\nfloat Sqrt_F_Q27=sqrt(MaxAB_Q24);\nfloat Power_Q43=pow(MaxAB_Q24,_Intensity_Fade_In_Exponent_);\nfloat Value_At_T_Q26=mix(_Outer_Fuzz_Start_,_Outer_Fuzz_End_,Sqrt_F_Q27);\nfloat Product_Q23=_Max_Intensity_*Power_Q43;\nfloat Rect_Distance_Q33;\nfloat Inner_Distance_Q33;\nFuzzy_Round_Rect_B33(X_Q42,Y_Q42,_Bevel_Radius_,_Bevel_Radius_,_Line_Width_,vUV,Value_At_T_Q26,_Outer_Fuzz_Start_,Rect_Distance_Q33,Inner_Distance_Q33);\nfloat Power_Q44=pow(Inner_Distance_Q33,_Blend_Exponent_);\nfloat Result_Q45=pow(BiasFunc(_Bias_,Rect_Distance_Q33),_Falloff_);\nvec4 Color_At_T_Q25=mix(_Inner_Color_,_Color_,Power_Q44);\nfloat Product_Q22=Result_Q45*Product_Q23;\nvec4 Result_Q28=Product_Q22*Color_At_T_Q25;\nvec4 Out_Color=Result_Q28;\nfloat Clip_Threshold=0.0;\ngl_FragColor=Out_Color;\n}";
                core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
                var mrdlBackglowPixelShader = { name, shader };
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlBackglow.vertex.js": (
              /*!******************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlBackglow.vertex.js ***!
                \******************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "mrdlBackglowVertexShader": () => (
                    /* binding */
                    mrdlBackglowVertexShader
                  )
                  /* harmony export */
                });
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Engines/shaderStore */
                  "core/Misc/perfCounter"
                );
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
                var name = "mrdlBackglowVertexShader";
                var shader = "uniform mat4 world;\nuniform mat4 viewProjection;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec3 tangent;\nuniform float _Bevel_Radius_;\nuniform float _Line_Width_;\nuniform bool _Absolute_Sizes_;\nuniform float _Tuning_Motion_;\nuniform float _Motion_;\nuniform float _Max_Intensity_;\nuniform float _Intensity_Fade_In_Exponent_;\nuniform float _Outer_Fuzz_Start_;\nuniform float _Outer_Fuzz_End_;\nuniform vec4 _Color_;\nuniform vec4 _Inner_Color_;\nuniform float _Blend_Exponent_;\nuniform float _Falloff_;\nuniform float _Bias_;\nvarying vec3 vNormal;\nvarying vec2 vUV;\nvoid main()\n{\nvec3 Dir_World_Q41=(world*vec4(tangent,0.0)).xyz;\nvec3 Dir_World_Q40=(world*vec4((cross(normal,tangent)),0.0)).xyz;\nfloat MaxAB_Q24=max(_Tuning_Motion_,_Motion_);\nfloat Length_Q16=length(Dir_World_Q41);\nfloat Length_Q17=length(Dir_World_Q40);\nbool Greater_Than_Q37=MaxAB_Q24>0.0;\nvec3 Sizes_Q35;\nvec2 XY_Q35;\nSizes_Q35=(_Absolute_Sizes_ ? vec3(Length_Q16,Length_Q17,0) : vec3(Length_Q16/Length_Q17,1,0));\nXY_Q35=(uv-vec2(0.5,0.5))*Sizes_Q35.xy;\nvec3 Result_Q38=Greater_Than_Q37 ? position : vec3(0,0,0);\nvec3 Pos_World_Q39=(world*vec4(Result_Q38,1.0)).xyz;\nvec3 Position=Pos_World_Q39;\nvec3 Normal=Sizes_Q35;\nvec2 UV=XY_Q35;\nvec3 Tangent=vec3(0,0,0);\nvec3 Binormal=vec3(0,0,0);\nvec4 Color=vec4(1,1,1,1);\ngl_Position=viewProjection*vec4(Position,1);\nvNormal=Normal;\nvUV=UV;\n}";
                core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
                var mrdlBackglowVertexShader = { name, shader };
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlBackplate.fragment.js": (
              /*!*********************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlBackplate.fragment.js ***!
                \*********************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "mrdlBackplatePixelShader": () => (
                    /* binding */
                    mrdlBackplatePixelShader
                  )
                  /* harmony export */
                });
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Engines/shaderStore */
                  "core/Misc/perfCounter"
                );
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
                var name = "mrdlBackplatePixelShader";
                var shader = "uniform vec3 cameraPosition;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUV;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec4 vExtra1;\nvarying vec4 vExtra2;\nuniform float _Radius_;\nuniform float _Line_Width_;\nuniform bool _Absolute_Sizes_;\nuniform float _Filter_Width_;\nuniform vec4 _Base_Color_;\nuniform vec4 _Line_Color_;\nuniform float _Radius_Top_Left_;\nuniform float _Radius_Top_Right_;\nuniform float _Radius_Bottom_Left_;\nuniform float _Radius_Bottom_Right_;\nuniform float _Rate_;\nuniform vec4 _Highlight_Color_;\nuniform float _Highlight_Width_;\nuniform vec4 _Highlight_Transform_;\nuniform float _Highlight_;\nuniform float _Iridescence_Intensity_;\nuniform float _Iridescence_Edge_Intensity_;\nuniform vec4 _Iridescence_Tint_;\nuniform sampler2D _Iridescent_Map_;\nuniform float _Angle_;\nuniform bool _Reflected_;\nuniform float _Frequency_;\nuniform float _Vertical_Offset_;\nuniform vec4 _Gradient_Color_;\nuniform vec4 _Top_Left_;\nuniform vec4 _Top_Right_;\nuniform vec4 _Bottom_Left_;\nuniform vec4 _Bottom_Right_;\nuniform float _Edge_Width_;\nuniform float _Edge_Power_;\nuniform float _Line_Gradient_Blend_;\nuniform float _Fade_Out_;\nvoid FastLinearTosRGB_B353(\nvec4 Linear,\nout vec4 sRGB)\n{\nsRGB.rgb=sqrt(clamp(Linear.rgb,0.0,1.0));\nsRGB.a=Linear.a;\n}\nvoid Round_Rect_Fragment_B332(\nfloat Radius,\nfloat Line_Width,\nvec4 Line_Color,\nfloat Filter_Width,\nvec2 UV,\nfloat Line_Visibility,\nvec4 Rect_Parms,\nvec4 Fill_Color,\nout vec4 Color)\n{\nfloat d=length(max(abs(UV)-Rect_Parms.xy,0.0));\nfloat dx=max(fwidth(d)*Filter_Width,0.00001);\nfloat g=min(Rect_Parms.z,Rect_Parms.w);\nfloat dgrad=max(fwidth(g)*Filter_Width,0.00001);\nfloat Inside_Rect=clamp(g/dgrad,0.0,1.0);\nfloat inner=clamp((d+dx*0.5-max(Radius-Line_Width,d-dx*0.5))/dx,0.0,1.0);\nColor=clamp(mix(Fill_Color,Line_Color,inner),0.0,1.0)*Inside_Rect;\n}\nvoid Iridescence_B343(\nvec3 Position,\nvec3 Normal,\nvec2 UV,\nvec3 Axis,\nvec3 Eye,\nvec4 Tint,\nsampler2D Texture,\nbool Reflected,\nfloat Frequency,\nfloat Vertical_Offset,\nout vec4 Color)\n{\nvec3 i=normalize(Position-Eye);\nvec3 r=reflect(i,Normal);\nfloat idota=dot(i,Axis);\nfloat idotr=dot(i,r);\nfloat x=Reflected ? idotr : idota;\nvec2 xy;\nxy.x=fract((x*Frequency+1.0)*0.5+UV.y*Vertical_Offset);\nxy.y=0.5;\nColor=texture(Texture,xy);\nColor.rgb*=Tint.rgb;\n}\nvoid Scale_RGB_B346(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{\nResult=vec4(Scalar,Scalar,Scalar,1)*Color;\n}\nvoid Scale_RGB_B344(\nfloat Scalar,\nvec4 Color,\nout vec4 Result)\n{\nResult=vec4(Scalar,Scalar,Scalar,1)*Color;\n}\nvoid Line_Fragment_B362(\nvec4 Base_Color,\nvec4 Highlight_Color,\nfloat Highlight_Width,\nvec3 Line_Vertex,\nfloat Highlight,\nout vec4 Line_Color)\n{\nfloat k2=1.0-clamp(abs(Line_Vertex.y/Highlight_Width),0.0,1.0);\nLine_Color=mix(Base_Color,Highlight_Color,Highlight*k2);\n}\nvoid Edge_B356(\nvec4 RectParms,\nfloat Radius,\nfloat Line_Width,\nvec2 UV,\nfloat Edge_Width,\nfloat Edge_Power,\nout float Result)\n{\nfloat d=length(max(abs(UV)-RectParms.xy,0.0));\nfloat edge=1.0-clamp((1.0-d/(Radius-Line_Width))/Edge_Width,0.0,1.0);\nResult=pow(edge,Edge_Power);\n}\nvoid Gradient_B355(\nvec4 Gradient_Color,\nvec4 Top_Left,\nvec4 Top_Right,\nvec4 Bottom_Left,\nvec4 Bottom_Right,\nvec2 UV,\nout vec4 Result)\n{\nvec3 top=Top_Left.rgb+(Top_Right.rgb-Top_Left.rgb)*UV.x;\nvec3 bottom=Bottom_Left.rgb+(Bottom_Right.rgb-Bottom_Left.rgb)*UV.x;\nResult.rgb=Gradient_Color.rgb*(bottom+(top-bottom)*UV.y);\nResult.a=1.0;\n}\nvoid main()\n{\nfloat X_Q338;\nfloat Y_Q338;\nfloat Z_Q338;\nfloat W_Q338;\nX_Q338=vExtra2.x;\nY_Q338=vExtra2.y;\nZ_Q338=vExtra2.z;\nW_Q338=vExtra2.w;\nvec4 Color_Q343;\n#if IRIDESCENCE_ENABLE\nIridescence_B343(vPosition,vNormal,vUV,vBinormal,cameraPosition,_Iridescence_Tint_,_Iridescent_Map_,_Reflected_,_Frequency_,_Vertical_Offset_,Color_Q343);\n#else\nColor_Q343=vec4(0,0,0,0);\n#endif\nvec4 Result_Q344;\nScale_RGB_B344(_Iridescence_Intensity_,Color_Q343,Result_Q344);\nvec4 Line_Color_Q362;\nLine_Fragment_B362(_Line_Color_,_Highlight_Color_,_Highlight_Width_,vTangent,_Highlight_,Line_Color_Q362);\nfloat Result_Q356;\n#if EDGE_ONLY\nEdge_B356(vExtra1,Z_Q338,W_Q338,vUV,_Edge_Width_,_Edge_Power_,Result_Q356);\n#else\nResult_Q356=1.0;\n#endif\nvec2 Vec2_Q339=vec2(X_Q338,Y_Q338);\nvec4 Result_Q355;\nGradient_B355(_Gradient_Color_,_Top_Left_,_Top_Right_,_Bottom_Left_,_Bottom_Right_,Vec2_Q339,Result_Q355);\nvec4 Linear_Q348;\nLinear_Q348.rgb=clamp(Result_Q355.rgb*Result_Q355.rgb,0.0,1.0);\nLinear_Q348.a=Result_Q355.a;\nvec4 Result_Q346;\nScale_RGB_B346(Linear_Q348,Result_Q356,Result_Q346);\nvec4 Sum_Q345=Result_Q346+Result_Q344;\nvec4 Color_At_T_Q347=mix(Line_Color_Q362,Result_Q346,_Line_Gradient_Blend_);\nvec4 Base_And_Iridescent_Q350;\nBase_And_Iridescent_Q350=_Base_Color_+vec4(Sum_Q345.rgb,0.0);\nvec4 Sum_Q349=Color_At_T_Q347+_Iridescence_Edge_Intensity_*Color_Q343;\nvec4 Result_Q351=Sum_Q349; Result_Q351.a=1.0;\nvec4 Color_Q332;\nRound_Rect_Fragment_B332(Z_Q338,W_Q338,Result_Q351,_Filter_Width_,vUV,1.0,vExtra1,Base_And_Iridescent_Q350,Color_Q332);\nvec4 Result_Q354=_Fade_Out_*Color_Q332;\nvec4 sRGB_Q353;\nFastLinearTosRGB_B353(Result_Q354,sRGB_Q353);\nvec4 Out_Color=sRGB_Q353;\nfloat Clip_Threshold=0.001;\nbool To_sRGB=false;\ngl_FragColor=Out_Color;\n}";
                core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
                var mrdlBackplatePixelShader = { name, shader };
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlBackplate.vertex.js": (
              /*!*******************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlBackplate.vertex.js ***!
                \*******************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "mrdlBackplateVertexShader": () => (
                    /* binding */
                    mrdlBackplateVertexShader
                  )
                  /* harmony export */
                });
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Engines/shaderStore */
                  "core/Misc/perfCounter"
                );
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
                var name = "mrdlBackplateVertexShader";
                var shader = "uniform mat4 world;\nuniform mat4 viewProjection;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec3 tangent;\nuniform float _Radius_;\nuniform float _Line_Width_;\nuniform bool _Absolute_Sizes_;\nuniform float _Filter_Width_;\nuniform vec4 _Base_Color_;\nuniform vec4 _Line_Color_;\nuniform float _Radius_Top_Left_;\nuniform float _Radius_Top_Right_;\nuniform float _Radius_Bottom_Left_;\nuniform float _Radius_Bottom_Right_;\nuniform float _Rate_;\nuniform vec4 _Highlight_Color_;\nuniform float _Highlight_Width_;\nuniform vec4 _Highlight_Transform_;\nuniform float _Highlight_;\nuniform float _Iridescence_Intensity_;\nuniform float _Iridescence_Edge_Intensity_;\nuniform vec4 _Iridescence_Tint_;\nuniform sampler2D _Iridescent_Map_;\nuniform float _Angle_;\nuniform bool _Reflected_;\nuniform float _Frequency_;\nuniform float _Vertical_Offset_;\nuniform vec4 _Gradient_Color_;\nuniform vec4 _Top_Left_;\nuniform vec4 _Top_Right_;\nuniform vec4 _Bottom_Left_;\nuniform vec4 _Bottom_Right_;\nuniform float _Edge_Width_;\nuniform float _Edge_Power_;\nuniform float _Line_Gradient_Blend_;\nuniform float _Fade_Out_;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUV;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec4 vExtra1;\nvarying vec4 vExtra2;\nvoid Object_To_World_Pos_B314(\nvec3 Pos_Object,\nout vec3 Pos_World)\n{\nPos_World=(world*vec4(Pos_Object,1.0)).xyz;\n}\nvoid Round_Rect_Vertex_B357(\nvec2 UV,\nfloat Radius,\nfloat Margin,\nfloat Anisotropy,\nfloat Gradient1,\nfloat Gradient2,\nvec3 Normal,\nvec4 Color_Scale_Translate,\nout vec2 Rect_UV,\nout vec4 Rect_Parms,\nout vec2 Scale_XY,\nout vec2 Line_UV,\nout vec2 Color_UV_Info)\n{\nScale_XY=vec2(Anisotropy,1.0);\nLine_UV=(UV-vec2(0.5,0.5));\nRect_UV=Line_UV*Scale_XY;\nRect_Parms.xy=Scale_XY*0.5-vec2(Radius,Radius)-vec2(Margin,Margin);\nRect_Parms.z=Gradient1; \nRect_Parms.w=Gradient2;\nColor_UV_Info=(Line_UV+vec2(0.5,0.5))*Color_Scale_Translate.xy+Color_Scale_Translate.zw;\n}\nvoid Line_Vertex_B333(\nvec2 Scale_XY,\nvec2 UV,\nfloat Time,\nfloat Rate,\nvec4 Highlight_Transform,\nout vec3 Line_Vertex)\n{\nfloat angle2=(Rate*Time)*2.0*3.1416;\nfloat sinAngle2=sin(angle2);\nfloat cosAngle2=cos(angle2);\nvec2 xformUV=UV*Highlight_Transform.xy+Highlight_Transform.zw;\nLine_Vertex.x=0.0;\nLine_Vertex.y=cosAngle2*xformUV.x-sinAngle2*xformUV.y;\nLine_Vertex.z=0.0; \n}\nvoid PickDir_B334(\nfloat Degrees,\nvec3 DirX,\nvec3 DirY,\nout vec3 Dir)\n{\nfloat a=Degrees*3.14159/180.0;\nDir=cos(a)*DirX+sin(a)*DirY;\n}\nvoid Move_Verts_B327(\nfloat Anisotropy,\nvec3 P,\nfloat Radius,\nout vec3 New_P,\nout vec2 New_UV,\nout float Radial_Gradient,\nout vec3 Radial_Dir)\n{\nvec2 UV=P.xy*2.0+0.5;\nvec2 center=clamp(UV,0.0,1.0);\nvec2 delta=UV-center;\nvec2 r2=2.0*vec2(Radius/Anisotropy,Radius);\nNew_UV=center+r2*(UV-2.0*center+0.5);\nNew_P=vec3(New_UV-0.5,P.z);\nRadial_Gradient=1.0-length(delta)*2.0;\nRadial_Dir=vec3(delta*r2,0.0);\n}\nvoid Pick_Radius_B336(\nfloat Radius,\nfloat Radius_Top_Left,\nfloat Radius_Top_Right,\nfloat Radius_Bottom_Left,\nfloat Radius_Bottom_Right,\nvec3 Position,\nout float Result)\n{\nbool whichY=Position.y>0.0;\nResult=Position.x<0.0 ? (whichY ? Radius_Top_Left : Radius_Bottom_Left) : (whichY ? Radius_Top_Right : Radius_Bottom_Right);\nResult*=Radius;\n}\nvoid Edge_AA_Vertex_B328(\nvec3 Position_World,\nvec3 Position_Object,\nvec3 Normal_Object,\nvec3 Eye,\nfloat Radial_Gradient,\nvec3 Radial_Dir,\nvec3 Tangent,\nout float Gradient1,\nout float Gradient2)\n{\nvec3 I=(Eye-Position_World);\nvec3 T=(vec4(Tangent,0.0)).xyz;\nfloat g=(dot(T,I)<0.0) ? 0.0 : 1.0;\nif (Normal_Object.z==0.0) { \nGradient1=Position_Object.z>0.0 ? g : 1.0;\nGradient2=Position_Object.z>0.0 ? 1.0 : g;\n} else {\nGradient1=g+(1.0-g)*(Radial_Gradient);\nGradient2=1.0;\n}\n}\nvoid Object_To_World_Dir_B330(\nvec3 Dir_Object,\nout vec3 Binormal_World,\nout vec3 Binormal_World_N,\nout float Binormal_Length)\n{\nBinormal_World=(world*vec4(Dir_Object,0.0)).xyz;\nBinormal_Length=length(Binormal_World);\nBinormal_World_N=Binormal_World/Binormal_Length;\n}\nvoid RelativeOrAbsoluteDetail_B341(\nfloat Nominal_Radius,\nfloat Nominal_LineWidth,\nbool Absolute_Measurements,\nfloat Height,\nout float Radius,\nout float Line_Width)\n{\nfloat scale=Absolute_Measurements ? 1.0/Height : 1.0;\nRadius=Nominal_Radius*scale;\nLine_Width=Nominal_LineWidth*scale;\n}\nvoid main()\n{\nvec3 Nrm_World_Q326;\nNrm_World_Q326=normalize((world*vec4(normal,0.0)).xyz);\nvec3 Tangent_World_Q329;\nvec3 Tangent_World_N_Q329;\nfloat Tangent_Length_Q329;\nTangent_World_Q329=(world*vec4(vec3(1,0,0),0.0)).xyz;\nTangent_Length_Q329=length(Tangent_World_Q329);\nTangent_World_N_Q329=Tangent_World_Q329/Tangent_Length_Q329;\nvec3 Binormal_World_Q330;\nvec3 Binormal_World_N_Q330;\nfloat Binormal_Length_Q330;\nObject_To_World_Dir_B330(vec3(0,1,0),Binormal_World_Q330,Binormal_World_N_Q330,Binormal_Length_Q330);\nfloat Radius_Q341;\nfloat Line_Width_Q341;\nRelativeOrAbsoluteDetail_B341(_Radius_,_Line_Width_,_Absolute_Sizes_,Binormal_Length_Q330,Radius_Q341,Line_Width_Q341);\nvec3 Dir_Q334;\nPickDir_B334(_Angle_,Tangent_World_N_Q329,Binormal_World_N_Q330,Dir_Q334);\nfloat Result_Q336;\nPick_Radius_B336(Radius_Q341,_Radius_Top_Left_,_Radius_Top_Right_,_Radius_Bottom_Left_,_Radius_Bottom_Right_,position,Result_Q336);\nfloat Anisotropy_Q331=Tangent_Length_Q329/Binormal_Length_Q330;\nvec4 Out_Color_Q337=vec4(Result_Q336,Line_Width_Q341,0,1);\nvec3 New_P_Q327;\nvec2 New_UV_Q327;\nfloat Radial_Gradient_Q327;\nvec3 Radial_Dir_Q327;\nMove_Verts_B327(Anisotropy_Q331,position,Result_Q336,New_P_Q327,New_UV_Q327,Radial_Gradient_Q327,Radial_Dir_Q327);\nvec3 Pos_World_Q314;\nObject_To_World_Pos_B314(New_P_Q327,Pos_World_Q314);\nfloat Gradient1_Q328;\nfloat Gradient2_Q328;\n#if SMOOTH_EDGES\nEdge_AA_Vertex_B328(Pos_World_Q314,position,normal,cameraPosition,Radial_Gradient_Q327,Radial_Dir_Q327,tangent,Gradient1_Q328,Gradient2_Q328);\n#else\nGradient1_Q328=1.0;\nGradient2_Q328=1.0;\n#endif\nvec2 Rect_UV_Q357;\nvec4 Rect_Parms_Q357;\nvec2 Scale_XY_Q357;\nvec2 Line_UV_Q357;\nvec2 Color_UV_Info_Q357;\nRound_Rect_Vertex_B357(New_UV_Q327,Result_Q336,0.0,Anisotropy_Q331,Gradient1_Q328,Gradient2_Q328,normal,vec4(1,1,0,0),Rect_UV_Q357,Rect_Parms_Q357,Scale_XY_Q357,Line_UV_Q357,Color_UV_Info_Q357);\nvec3 Line_Vertex_Q333;\nLine_Vertex_B333(Scale_XY_Q357,Line_UV_Q357,(20.0),_Rate_,_Highlight_Transform_,Line_Vertex_Q333);\nfloat X_Q359;\nfloat Y_Q359;\nX_Q359=Color_UV_Info_Q357.x;\nY_Q359=Color_UV_Info_Q357.y;\nvec4 Vec4_Q358=vec4(X_Q359,Y_Q359,Result_Q336,Line_Width_Q341);\nvec3 Position=Pos_World_Q314;\nvec3 Normal=Nrm_World_Q326;\nvec2 UV=Rect_UV_Q357;\nvec3 Tangent=Line_Vertex_Q333;\nvec3 Binormal=Dir_Q334;\nvec4 Color=Out_Color_Q337;\nvec4 Extra1=Rect_Parms_Q357;\nvec4 Extra2=Vec4_Q358;\nvec4 Extra3=vec4(0,0,0,0);\ngl_Position=viewProjection*vec4(Position,1);\nvPosition=Position;\nvNormal=Normal;\nvUV=UV;\nvTangent=Tangent;\nvBinormal=Binormal;\nvExtra1=Extra1;\nvExtra2=Extra2;\n}";
                core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
                var mrdlBackplateVertexShader = { name, shader };
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlFrontplate.fragment.js": (
              /*!**********************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlFrontplate.fragment.js ***!
                \**********************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "mrdlFrontplatePixelShader": () => (
                    /* binding */
                    mrdlFrontplatePixelShader
                  )
                  /* harmony export */
                });
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Engines/shaderStore */
                  "core/Misc/perfCounter"
                );
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
                var name = "mrdlFrontplatePixelShader";
                var shader = "uniform vec3 cameraPosition;\nvarying vec3 vNormal;\nvarying vec2 vUV;\nvarying vec3 vTangent;\nvarying vec4 vExtra1;\nvarying vec4 vExtra2;\nvarying vec4 vExtra3;\nuniform float _Radius_;\nuniform float _Line_Width_;\nuniform bool _Relative_To_Height_;\nuniform float _Filter_Width_;\nuniform vec4 _Edge_Color_;\nuniform float _Fade_Out_;\nuniform bool _Smooth_Edges_;\nuniform bool _Blob_Enable_;\nuniform vec3 _Blob_Position_;\nuniform float _Blob_Intensity_;\nuniform float _Blob_Near_Size_;\nuniform float _Blob_Far_Size_;\nuniform float _Blob_Near_Distance_;\nuniform float _Blob_Far_Distance_;\nuniform float _Blob_Fade_Length_;\nuniform float _Blob_Inner_Fade_;\nuniform float _Blob_Pulse_;\nuniform float _Blob_Fade_;\nuniform float _Blob_Pulse_Max_Size_;\nuniform bool _Blob_Enable_2_;\nuniform vec3 _Blob_Position_2_;\nuniform float _Blob_Near_Size_2_;\nuniform float _Blob_Inner_Fade_2_;\nuniform float _Blob_Pulse_2_;\nuniform float _Blob_Fade_2_;\nuniform float _Gaze_Intensity_;\nuniform float _Gaze_Focus_;\nuniform sampler2D _Blob_Texture_;\nuniform float _Selection_Fuzz_;\nuniform float _Selected_;\nuniform float _Selection_Fade_;\nuniform float _Selection_Fade_Size_;\nuniform float _Selected_Distance_;\nuniform float _Selected_Fade_Length_;\nuniform float _Proximity_Max_Intensity_;\nuniform float _Proximity_Far_Distance_;\nuniform float _Proximity_Near_Radius_;\nuniform float _Proximity_Anisotropy_;\nuniform bool _Use_Global_Left_Index_;\nuniform bool _Use_Global_Right_Index_;\nuniform vec4 Global_Left_Index_Tip_Position;\nuniform vec4 Global_Right_Index_Tip_Position;\nvoid Scale_Color_B54(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{\nResult=Scalar*Color;\n}\nvoid Scale_RGB_B50(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{\nResult=vec4(Scalar,Scalar,Scalar,1)*Color;\n}\nvoid Proximity_Fragment_B51(\nfloat Proximity_Max_Intensity,\nfloat Proximity_Near_Radius,\nvec4 Deltas,\nfloat Show_Selection,\nfloat Distance_Fade1,\nfloat Distance_Fade2,\nfloat Strength,\nout float Proximity)\n{\nfloat proximity1=(1.0-clamp(length(Deltas.xy)/Proximity_Near_Radius,0.0,1.0))*Distance_Fade1;\nfloat proximity2=(1.0-clamp(length(Deltas.zw)/Proximity_Near_Radius,0.0,1.0))*Distance_Fade2;\nProximity=Strength*(Proximity_Max_Intensity*max(proximity1,proximity2) *(1.0-Show_Selection)+Show_Selection);\n}\nvoid Blob_Fragment_B56(\nvec2 UV,\nvec3 Blob_Info,\nsampler2D Blob_Texture,\nout vec4 Blob_Color)\n{\nfloat k=dot(UV,UV);\nBlob_Color=Blob_Info.y*texture(Blob_Texture,vec2(vec2(sqrt(k),Blob_Info.x).x,1.0-vec2(sqrt(k),Blob_Info.x).y))*(1.0-clamp(k,0.0,1.0));\n}\nvoid Round_Rect_Fragment_B61(\nfloat Radius,\nvec4 Line_Color,\nfloat Filter_Width,\nfloat Line_Visibility,\nvec4 Fill_Color,\nbool Smooth_Edges,\nvec4 Rect_Parms,\nout float Inside_Rect)\n{\nfloat d=length(max(abs(Rect_Parms.zw)-Rect_Parms.xy,0.0));\nfloat dx=max(fwidth(d)*Filter_Width,0.00001);\nInside_Rect=Smooth_Edges ? clamp((Radius-d)/dx,0.0,1.0) : 1.0-step(Radius,d);\n}\nvoid main()\n{\nfloat Is_Quad_Q53;\nIs_Quad_Q53=vNormal.z;\nvec4 Blob_Color_Q56;\nBlob_Fragment_B56(vUV,vTangent,_Blob_Texture_,Blob_Color_Q56);\nfloat X_Q52;\nfloat Y_Q52;\nfloat Z_Q52;\nfloat W_Q52;\nX_Q52=vExtra3.x;\nY_Q52=vExtra3.y;\nZ_Q52=vExtra3.z;\nW_Q52=vExtra3.w;\nfloat Proximity_Q51;\nProximity_Fragment_B51(_Proximity_Max_Intensity_,_Proximity_Near_Radius_,vExtra2,X_Q52,Y_Q52,Z_Q52,1.0,Proximity_Q51);\nfloat Inside_Rect_Q61;\nRound_Rect_Fragment_B61(W_Q52,vec4(1,1,1,1),_Filter_Width_,1.0,vec4(0,0,0,0),_Smooth_Edges_,vExtra1,Inside_Rect_Q61);\nvec4 Result_Q50;\nScale_RGB_B50(_Edge_Color_,Proximity_Q51,Result_Q50);\nvec4 Result_Q47=Inside_Rect_Q61*Blob_Color_Q56;\nvec4 Color_At_T_Q48=mix(Result_Q50,Result_Q47,Is_Quad_Q53);\nvec4 Result_Q54;\nScale_Color_B54(Color_At_T_Q48,_Fade_Out_,Result_Q54);\nvec4 Out_Color=Result_Q54;\nfloat Clip_Threshold=0.001;\nbool To_sRGB=false;\ngl_FragColor=Out_Color;\n}";
                core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
                var mrdlFrontplatePixelShader = { name, shader };
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlFrontplate.vertex.js": (
              /*!********************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlFrontplate.vertex.js ***!
                \********************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "mrdlFrontplateVertexShader": () => (
                    /* binding */
                    mrdlFrontplateVertexShader
                  )
                  /* harmony export */
                });
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Engines/shaderStore */
                  "core/Misc/perfCounter"
                );
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
                var name = "mrdlFrontplateVertexShader";
                var shader = "uniform mat4 world;\nuniform mat4 viewProjection;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec3 tangent;\nattribute vec4 color;\nuniform float _Radius_;\nuniform float _Line_Width_;\nuniform bool _Relative_To_Height_;\nuniform float _Filter_Width_;\nuniform vec4 _Edge_Color_;\nuniform float _Fade_Out_;\nuniform bool _Smooth_Edges_;\nuniform bool _Blob_Enable_;\nuniform vec3 _Blob_Position_;\nuniform float _Blob_Intensity_;\nuniform float _Blob_Near_Size_;\nuniform float _Blob_Far_Size_;\nuniform float _Blob_Near_Distance_;\nuniform float _Blob_Far_Distance_;\nuniform float _Blob_Fade_Length_;\nuniform float _Blob_Inner_Fade_;\nuniform float _Blob_Pulse_;\nuniform float _Blob_Fade_;\nuniform float _Blob_Pulse_Max_Size_;\nuniform bool _Blob_Enable_2_;\nuniform vec3 _Blob_Position_2_;\nuniform float _Blob_Near_Size_2_;\nuniform float _Blob_Inner_Fade_2_;\nuniform float _Blob_Pulse_2_;\nuniform float _Blob_Fade_2_;\nuniform float _Gaze_Intensity_;\nuniform float _Gaze_Focus_;\nuniform sampler2D _Blob_Texture_;\nuniform float _Selection_Fuzz_;\nuniform float _Selected_;\nuniform float _Selection_Fade_;\nuniform float _Selection_Fade_Size_;\nuniform float _Selected_Distance_;\nuniform float _Selected_Fade_Length_;\nuniform float _Proximity_Max_Intensity_;\nuniform float _Proximity_Far_Distance_;\nuniform float _Proximity_Near_Radius_;\nuniform float _Proximity_Anisotropy_;\nuniform bool _Use_Global_Left_Index_;\nuniform bool _Use_Global_Right_Index_;\nuniform vec4 Global_Left_Index_Tip_Position;\nuniform vec4 Global_Right_Index_Tip_Position;\nvarying vec3 vNormal;\nvarying vec2 vUV;\nvarying vec3 vTangent;\nvarying vec4 vExtra1;\nvarying vec4 vExtra2;\nvarying vec4 vExtra3;\nvoid Blob_Vertex_B40(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nvec4 Vx_Color,\nvec2 UV,\nvec3 Face_Center,\nvec2 Face_Size,\nvec2 In_UV,\nfloat Blob_Fade_Length,\nfloat Selection_Fade,\nfloat Selection_Fade_Size,\nfloat Inner_Fade,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nfloat Blob_Enabled,\nfloat DistanceOffset,\nout vec3 Out_Position,\nout vec2 Out_UV,\nout vec3 Blob_Info,\nout vec2 Blob_Relative_UV)\n{\nfloat blobSize,fadeIn;\nvec3 Hit_Position;\nBlob_Info=vec3(0.0,0.0,0.0);\nfloat Hit_Distance=dot(Blob_Position-Face_Center,Normal)+DistanceOffset*Blob_Far_Distance;\nHit_Position=Blob_Position-Hit_Distance*Normal;\nfloat absD=abs(Hit_Distance);\nfloat lerpVal=clamp((absD-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);\nfadeIn=1.0-clamp((absD-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);\nfloat innerFade=1.0-clamp(-Hit_Distance/Inner_Fade,0.0,1.0);\nfloat farClip=clamp(1.0-step(Blob_Far_Distance+Blob_Fade_Length,absD),0.0,1.0);\nfloat size=mix(Blob_Near_Size,Blob_Far_Size,lerpVal)*farClip;\nblobSize=mix(size,Selection_Fade_Size,Selection_Fade)*innerFade*Blob_Enabled;\nBlob_Info.x=lerpVal*0.5+0.5;\nBlob_Info.y=fadeIn*Intensity*(1.0-Selection_Fade)*Blob_Fade;\nBlob_Info.x*=(1.0-Blob_Pulse);\nvec3 delta=Hit_Position-Face_Center;\nvec2 blobCenterXY=vec2(dot(delta,Tangent),dot(delta,Bitangent));\nvec2 quadUVin=2.0*UV-1.0; \nvec2 blobXY=blobCenterXY+quadUVin*blobSize;\nvec2 blobClipped=clamp(blobXY,-Face_Size*0.5,Face_Size*0.5);\nvec2 blobUV=(blobClipped-blobCenterXY)/max(blobSize,0.0001)*2.0;\nvec3 blobCorner=Face_Center+blobClipped.x*Tangent+blobClipped.y*Bitangent;\nOut_Position=mix(Position,blobCorner,Vx_Color.rrr);\nOut_UV=mix(In_UV,blobUV,Vx_Color.rr);\nBlob_Relative_UV=blobClipped/Face_Size.y;\n}\nvoid Round_Rect_Vertex_B36(\nvec2 UV,\nvec3 Tangent,\nvec3 Binormal,\nfloat Radius,\nfloat Anisotropy,\nvec2 Blob_Center_UV,\nout vec2 Rect_UV,\nout vec2 Scale_XY,\nout vec4 Rect_Parms)\n{\nScale_XY=vec2(Anisotropy,1.0);\nRect_UV=(UV-vec2(0.5,0.5))*Scale_XY;\nRect_Parms.xy=Scale_XY*0.5-vec2(Radius,Radius);\nRect_Parms.zw=Blob_Center_UV;\n}\nvec2 ProjectProximity(\nvec3 blobPosition,\nvec3 position,\nvec3 center,\nvec3 dir,\nvec3 xdir,\nvec3 ydir,\nout float vdistance\n)\n{\nvec3 delta=blobPosition-position;\nvec2 xy=vec2(dot(delta,xdir),dot(delta,ydir));\nvdistance=abs(dot(delta,dir));\nreturn xy;\n}\nvoid Proximity_Vertex_B33(\nvec3 Blob_Position,\nvec3 Blob_Position_2,\nvec3 Face_Center,\nvec3 Position,\nfloat Proximity_Far_Distance,\nfloat Relative_Scale,\nfloat Proximity_Anisotropy,\nvec3 Normal,\nvec3 Tangent,\nvec3 Binormal,\nout vec4 Extra,\nout float Distance_To_Face,\nout float Distance_Fade1,\nout float Distance_Fade2)\n{\nfloat distz1,distz2;\nExtra.xy=ProjectProximity(Blob_Position,Position,Face_Center,Normal,Tangent*Proximity_Anisotropy,Binormal,distz1)/Relative_Scale;\nExtra.zw=ProjectProximity(Blob_Position_2,Position,Face_Center,Normal,Tangent*Proximity_Anisotropy,Binormal,distz2)/Relative_Scale;\nDistance_To_Face=dot(Normal,Position-Face_Center);\nDistance_Fade1=1.0-clamp(distz1/Proximity_Far_Distance,0.0,1.0);\nDistance_Fade2=1.0-clamp(distz2/Proximity_Far_Distance,0.0,1.0);\n}\nvoid Object_To_World_Pos_B12(\nvec3 Pos_Object,\nout vec3 Pos_World)\n{\nPos_World=(world*vec4(Pos_Object,1.0)).xyz;\n}\nvoid Choose_Blob_B27(\nvec4 Vx_Color,\nvec3 Position1,\nvec3 Position2,\nbool Blob_Enable_1,\nbool Blob_Enable_2,\nfloat Near_Size_1,\nfloat Near_Size_2,\nfloat Blob_Inner_Fade_1,\nfloat Blob_Inner_Fade_2,\nfloat Blob_Pulse_1,\nfloat Blob_Pulse_2,\nfloat Blob_Fade_1,\nfloat Blob_Fade_2,\nout vec3 Position,\nout float Near_Size,\nout float Inner_Fade,\nout float Blob_Enable,\nout float Fade,\nout float Pulse)\n{\nPosition=Position1*(1.0-Vx_Color.g)+Vx_Color.g*Position2;\nfloat b1=Blob_Enable_1 ? 1.0 : 0.0;\nfloat b2=Blob_Enable_2 ? 1.0 : 0.0;\nBlob_Enable=b1+(b2-b1)*Vx_Color.g;\nPulse=Blob_Pulse_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Pulse_2;\nFade=Blob_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Fade_2;\nNear_Size=Near_Size_1*(1.0-Vx_Color.g)+Vx_Color.g*Near_Size_2;\nInner_Fade=Blob_Inner_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Inner_Fade_2;\n}\nvoid Move_Verts_B32(\nvec2 UV,\nfloat Radius,\nfloat Anisotropy,\nfloat Line_Width,\nfloat Visible,\nout vec3 New_P,\nout vec2 New_UV)\n{\nvec2 xy=2.0*UV-vec2(0.5,0.5);\nvec2 center=clamp(xy,0.0,1.0);\nvec2 delta=2.0*(xy-center);\nfloat deltaLength=length(delta);\nvec2 aniso=vec2(1.0/Anisotropy,1.0);\ncenter=(center-vec2(0.5,0.5))*(1.0-2.0*Radius*aniso);\nNew_UV=vec2((2.0-2.0*deltaLength)*Visible,0.0);\nfloat deltaRadius= (Radius-Line_Width*New_UV.x);\nNew_P.xy=(center+deltaRadius/deltaLength *aniso*delta);\nNew_P.z=0.0;\n}\nvoid Object_To_World_Dir_B14(\nvec3 Dir_Object,\nout vec3 Binormal_World)\n{\nBinormal_World=(world*vec4(Dir_Object,0.0)).xyz;\n}\nvoid Proximity_Visibility_B55(\nfloat Selection,\nvec3 Proximity_Center,\nvec3 Proximity_Center_2,\nfloat Proximity_Far_Distance,\nfloat Proximity_Radius,\nvec3 Face_Center,\nvec3 Normal,\nvec2 Face_Size,\nfloat Gaze,\nout float Width)\n{\nfloat boxMaxSize=length(Face_Size)*0.5;\nfloat d1=dot(Proximity_Center-Face_Center,Normal);\nvec3 blob1=Proximity_Center-d1*Normal;\nfloat d2=dot(Proximity_Center_2-Face_Center,Normal);\nvec3 blob2=Proximity_Center_2-d2*Normal;\nvec3 delta1=blob1-Face_Center;\nvec3 delta2=blob2-Face_Center;\nfloat dist1=dot(delta1,delta1);\nfloat dist2=dot(delta2,delta2);\nfloat nearestProxDist=sqrt(min(dist1,dist2));\nWidth=(1.0-step(boxMaxSize+Proximity_Radius,nearestProxDist))*(1.0-step(Proximity_Far_Distance,min(d1,d2))*(1.0-step(0.0001,Selection)));\nWidth=max(Gaze,Width);\n}\nvec2 ramp2(vec2 start,vec2 end,vec2 x)\n{\nreturn clamp((x-start)/(end-start),vec2(0.0,0.0),vec2(1.0,1.0));\n}\nfloat computeSelection(\nvec3 blobPosition,\nvec3 normal,\nvec3 tangent,\nvec3 bitangent,\nvec3 faceCenter,\nvec2 faceSize,\nfloat selectionFuzz,\nfloat farDistance,\nfloat fadeLength\n)\n{\nvec3 delta=blobPosition-faceCenter;\nfloat absD=abs(dot(delta,normal));\nfloat fadeIn=1.0-clamp((absD-farDistance)/fadeLength,0.0,1.0);\nvec2 blobCenterXY=vec2(dot(delta,tangent),dot(delta,bitangent));\nvec2 innerFace=faceSize*(1.0-selectionFuzz)*0.5;\nvec2 selectPulse=ramp2(-faceSize*0.5,-innerFace,blobCenterXY)-ramp2(innerFace,faceSize*0.5,blobCenterXY);\nreturn selectPulse.x*selectPulse.y*fadeIn;\n}\nvoid Selection_Vertex_B31(\nvec3 Blob_Position,\nvec3 Blob_Position_2,\nvec3 Face_Center,\nvec2 Face_Size,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nfloat Selection_Fuzz,\nfloat Selected,\nfloat Far_Distance,\nfloat Fade_Length,\nvec3 Active_Face_Dir,\nout float Show_Selection)\n{\nfloat select1=computeSelection(Blob_Position,Normal,Tangent,Bitangent,Face_Center,Face_Size,Selection_Fuzz,Far_Distance,Fade_Length);\nfloat select2=computeSelection(Blob_Position_2,Normal,Tangent,Bitangent,Face_Center,Face_Size,Selection_Fuzz,Far_Distance,Fade_Length);\nShow_Selection=mix(max(select1,select2),1.0,Selected);\n}\nvoid main()\n{\nvec3 Vec3_Q29=vec3(vec2(0,0).x,vec2(0,0).y,color.r);\nvec3 Nrm_World_Q24;\nNrm_World_Q24=normalize((world*vec4(normal,0.0)).xyz);\nvec3 Face_Center_Q30;\nFace_Center_Q30=(world*vec4(vec3(0,0,0),1.0)).xyz;\nvec3 Tangent_World_Q13;\nTangent_World_Q13=(world*vec4(tangent,0.0)).xyz;\nvec3 Result_Q42;\nResult_Q42=_Use_Global_Left_Index_ ? Global_Left_Index_Tip_Position.xyz : _Blob_Position_;\nvec3 Result_Q43;\nResult_Q43=_Use_Global_Right_Index_ ? Global_Right_Index_Tip_Position.xyz : _Blob_Position_2_;\nfloat Value_At_T_Q58=mix(_Blob_Near_Size_,_Blob_Pulse_Max_Size_,_Blob_Pulse_);\nfloat Value_At_T_Q59=mix(_Blob_Near_Size_2_,_Blob_Pulse_Max_Size_,_Blob_Pulse_2_);\nvec3 Cross_Q70=cross(normal,tangent);\nfloat Product_Q45=_Gaze_Intensity_*_Gaze_Focus_;\nfloat Step_Q46=step(0.0001,Product_Q45);\nvec3 Tangent_World_N_Q15=normalize(Tangent_World_Q13);\nvec3 Position_Q27;\nfloat Near_Size_Q27;\nfloat Inner_Fade_Q27;\nfloat Blob_Enable_Q27;\nfloat Fade_Q27;\nfloat Pulse_Q27;\nChoose_Blob_B27(color,Result_Q42,Result_Q43,_Blob_Enable_,_Blob_Enable_2_,Value_At_T_Q58,Value_At_T_Q59,_Blob_Inner_Fade_,_Blob_Inner_Fade_2_,_Blob_Pulse_,_Blob_Pulse_2_,_Blob_Fade_,_Blob_Fade_2_,Position_Q27,Near_Size_Q27,Inner_Fade_Q27,Blob_Enable_Q27,Fade_Q27,Pulse_Q27);\nvec3 Binormal_World_Q14;\nObject_To_World_Dir_B14(Cross_Q70,Binormal_World_Q14);\nfloat Anisotropy_Q21=length(Tangent_World_Q13)/length(Binormal_World_Q14);\nvec3 Binormal_World_N_Q16=normalize(Binormal_World_Q14);\nvec2 Face_Size_Q35;\nfloat ScaleY_Q35;\nFace_Size_Q35=vec2(length(Tangent_World_Q13),length(Binormal_World_Q14));\nScaleY_Q35=Face_Size_Q35.y;\nfloat Out_Radius_Q38;\nfloat Out_Line_Width_Q38;\nOut_Radius_Q38=_Relative_To_Height_ ? _Radius_ : _Radius_/ScaleY_Q35;\nOut_Line_Width_Q38=_Relative_To_Height_ ? _Line_Width_ : _Line_Width_/ScaleY_Q35;\nfloat Show_Selection_Q31;\nSelection_Vertex_B31(Result_Q42,Result_Q43,Face_Center_Q30,Face_Size_Q35,Nrm_World_Q24,Tangent_World_N_Q15,Binormal_World_N_Q16,_Selection_Fuzz_,_Selected_,_Selected_Distance_,_Selected_Fade_Length_,vec3(0,0,-1),Show_Selection_Q31);\nfloat MaxAB_Q41=max(Show_Selection_Q31,Product_Q45);\nfloat Width_Q55;\nProximity_Visibility_B55(Show_Selection_Q31,Result_Q42,Result_Q43,_Proximity_Far_Distance_,_Proximity_Near_Radius_,Face_Center_Q30,Nrm_World_Q24,Face_Size_Q35,Step_Q46,Width_Q55);\nvec3 New_P_Q32;\nvec2 New_UV_Q32;\nMove_Verts_B32(uv,Out_Radius_Q38,Anisotropy_Q21,Out_Line_Width_Q38,Width_Q55,New_P_Q32,New_UV_Q32);\nvec3 Pos_World_Q12;\nObject_To_World_Pos_B12(New_P_Q32,Pos_World_Q12);\nvec3 Out_Position_Q40;\nvec2 Out_UV_Q40;\nvec3 Blob_Info_Q40;\nvec2 Blob_Relative_UV_Q40;\nBlob_Vertex_B40(Pos_World_Q12,Nrm_World_Q24,Tangent_World_N_Q15,Binormal_World_N_Q16,Position_Q27,_Blob_Intensity_,Near_Size_Q27,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,color,uv,Face_Center_Q30,Face_Size_Q35,New_UV_Q32,_Blob_Fade_Length_,_Selection_Fade_,_Selection_Fade_Size_,Inner_Fade_Q27,Pulse_Q27,Fade_Q27,Blob_Enable_Q27,0.0,Out_Position_Q40,Out_UV_Q40,Blob_Info_Q40,Blob_Relative_UV_Q40);\nvec2 Rect_UV_Q36;\nvec2 Scale_XY_Q36;\nvec4 Rect_Parms_Q36;\nRound_Rect_Vertex_B36(New_UV_Q32,Tangent_World_Q13,Binormal_World_Q14,Out_Radius_Q38,Anisotropy_Q21,Blob_Relative_UV_Q40,Rect_UV_Q36,Scale_XY_Q36,Rect_Parms_Q36);\nvec4 Extra_Q33;\nfloat Distance_To_Face_Q33;\nfloat Distance_Fade1_Q33;\nfloat Distance_Fade2_Q33;\nProximity_Vertex_B33(Result_Q42,Result_Q43,Face_Center_Q30,Pos_World_Q12,_Proximity_Far_Distance_,1.0,_Proximity_Anisotropy_,Nrm_World_Q24,Tangent_World_N_Q15,Binormal_World_N_Q16,Extra_Q33,Distance_To_Face_Q33,Distance_Fade1_Q33,Distance_Fade2_Q33);\nvec4 Vec4_Q37=vec4(MaxAB_Q41,Distance_Fade1_Q33,Distance_Fade2_Q33,Out_Radius_Q38);\nvec3 Position=Out_Position_Q40;\nvec3 Normal=Vec3_Q29;\nvec2 UV=Out_UV_Q40;\nvec3 Tangent=Blob_Info_Q40;\nvec3 Binormal=vec3(0,0,0);\nvec4 Color=vec4(1,1,1,1);\nvec4 Extra1=Rect_Parms_Q36;\nvec4 Extra2=Extra_Q33;\nvec4 Extra3=Vec4_Q37;\ngl_Position=viewProjection*vec4(Position,1);\nvNormal=Normal;\nvUV=UV;\nvTangent=Tangent;\nvExtra1=Extra1;\nvExtra2=Extra2;\nvExtra3=Extra3;\n}";
                core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
                var mrdlFrontplateVertexShader = { name, shader };
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlInnerquad.fragment.js": (
              /*!*********************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlInnerquad.fragment.js ***!
                \*********************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "mrdlInnerquadPixelShader": () => (
                    /* binding */
                    mrdlInnerquadPixelShader
                  )
                  /* harmony export */
                });
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Engines/shaderStore */
                  "core/Misc/perfCounter"
                );
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
                var name = "mrdlInnerquadPixelShader";
                var shader = "uniform vec3 cameraPosition;\nvarying vec2 vUV;\nvarying vec3 vTangent;\nuniform vec4 _Color_;\nuniform float _Radius_;\nuniform bool _Fixed_Radius_;\nuniform float _Filter_Width_;\nuniform float _Glow_Fraction_;\nuniform float _Glow_Max_;\nuniform float _Glow_Falloff_;\nfloat FilterStep_Bid194(float edge,float x,float filterWidth)\n{\nfloat dx=max(1.0E-5,fwidth(x)*filterWidth);\nreturn max((x+dx*0.5-max(edge,x-dx*0.5))/dx,0.0);\n}\nvoid Round_Rect_B194(\nfloat Size_X,\nfloat Size_Y,\nfloat Radius,\nvec4 Rect_Color,\nfloat Filter_Width,\nvec2 UV,\nfloat Glow_Fraction,\nfloat Glow_Max,\nfloat Glow_Falloff,\nout vec4 Color)\n{\nvec2 halfSize=vec2(Size_X,Size_Y)*0.5;\nvec2 r=max(min(vec2(Radius,Radius),halfSize),vec2(0.01,0.01));\nvec2 v=abs(UV);\nvec2 nearestp=min(v,halfSize-r);\nvec2 delta=(v-nearestp)/max(vec2(0.01,0.01),r);\nfloat Distance=length(delta);\nfloat insideRect=1.0-FilterStep_Bid194(1.0-Glow_Fraction,Distance,Filter_Width);\nfloat glow=clamp((1.0-Distance)/Glow_Fraction,0.0,1.0);\nglow=pow(glow,Glow_Falloff);\nColor=Rect_Color*max(insideRect,glow*Glow_Max);\n}\nvoid main()\n{\nfloat X_Q192;\nfloat Y_Q192;\nfloat Z_Q192;\nX_Q192=vTangent.x;\nY_Q192=vTangent.y;\nZ_Q192=vTangent.z;\nvec4 Color_Q194;\nRound_Rect_B194(X_Q192,1.0,Y_Q192,_Color_,_Filter_Width_,vUV,_Glow_Fraction_,_Glow_Max_,_Glow_Falloff_,Color_Q194);\nvec4 Out_Color=Color_Q194;\nfloat Clip_Threshold=0.0;\ngl_FragColor=Out_Color;\n}\n";
                core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
                var mrdlInnerquadPixelShader = { name, shader };
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlInnerquad.vertex.js": (
              /*!*******************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlInnerquad.vertex.js ***!
                \*******************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "mrdlInnerquadVertexShader": () => (
                    /* binding */
                    mrdlInnerquadVertexShader
                  )
                  /* harmony export */
                });
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Engines/shaderStore */
                  "core/Misc/perfCounter"
                );
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
                var name = "mrdlInnerquadVertexShader";
                var shader = "uniform mat4 world;\nuniform mat4 viewProjection;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec3 tangent;\nattribute vec4 color;\nuniform vec4 _Color_;\nuniform float _Radius_;\nuniform bool _Fixed_Radius_;\nuniform float _Filter_Width_;\nuniform float _Glow_Fraction_;\nuniform float _Glow_Max_;\nuniform float _Glow_Falloff_;\nvarying vec2 vUV;\nvarying vec3 vTangent;\nvoid main()\n{\nvec3 Pos_World_Q189;\nPos_World_Q189=(world*vec4(position,1.0)).xyz;\nvec3 Dir_World_Q190;\nDir_World_Q190=(world*vec4(tangent,0.0)).xyz;\nvec3 Dir_World_Q191;\nDir_World_Q191=(world*vec4((cross(normal,tangent)),0.0)).xyz;\nfloat Length_Q180=length(Dir_World_Q190);\nfloat Length_Q181=length(Dir_World_Q191);\nfloat Quotient_Q184=Length_Q180/Length_Q181;\nfloat Quotient_Q195=_Radius_/Length_Q181;\nvec2 Result_Q193;\nResult_Q193=vec2((uv.x-0.5)*Length_Q180/Length_Q181,(uv.y-0.5));\nfloat Result_Q198=_Fixed_Radius_ ? Quotient_Q195 : _Radius_;\nvec3 Vec3_Q183=vec3(Quotient_Q184,Result_Q198,0);\nvec3 Position=Pos_World_Q189;\nvec3 Normal=vec3(0,0,0);\nvec2 UV=Result_Q193;\nvec3 Tangent=Vec3_Q183;\nvec3 Binormal=vec3(0,0,0);\nvec4 Color=color;\ngl_Position=viewProjection*vec4(Position,1);\nvUV=UV;\nvTangent=Tangent;\n}\n";
                core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
                var mrdlInnerquadVertexShader = { name, shader };
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlSliderBar.fragment.js": (
              /*!*********************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlSliderBar.fragment.js ***!
                \*********************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "mrdlSliderBarPixelShader": () => (
                    /* binding */
                    mrdlSliderBarPixelShader
                  )
                  /* harmony export */
                });
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Engines/shaderStore */
                  "core/Misc/perfCounter"
                );
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
                var name = "mrdlSliderBarPixelShader";
                var shader = "uniform vec3 cameraPosition;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUV;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec4 vColor;\nvarying vec4 vExtra1;\nvarying vec4 vExtra2;\nvarying vec4 vExtra3;\nuniform float _Radius_;\nuniform float _Bevel_Front_;\nuniform float _Bevel_Front_Stretch_;\nuniform float _Bevel_Back_;\nuniform float _Bevel_Back_Stretch_;\nuniform float _Radius_Top_Left_;\nuniform float _Radius_Top_Right_;\nuniform float _Radius_Bottom_Left_;\nuniform float _Radius_Bottom_Right_;\nuniform bool _Bulge_Enabled_;\nuniform float _Bulge_Height_;\nuniform float _Bulge_Radius_;\nuniform float _Sun_Intensity_;\nuniform float _Sun_Theta_;\nuniform float _Sun_Phi_;\nuniform float _Indirect_Diffuse_;\nuniform vec4 _Albedo_;\nuniform float _Specular_;\nuniform float _Shininess_;\nuniform float _Sharpness_;\nuniform float _Subsurface_;\nuniform vec4 _Left_Color_;\nuniform vec4 _Right_Color_;\nuniform float _Reflection_;\nuniform float _Front_Reflect_;\nuniform float _Edge_Reflect_;\nuniform float _Power_;\nuniform vec4 _Sky_Color_;\nuniform vec4 _Horizon_Color_;\nuniform vec4 _Ground_Color_;\nuniform float _Horizon_Power_;\nuniform sampler2D _Reflection_Map_;\nuniform sampler2D _Indirect_Environment_;\nuniform float _Width_;\nuniform float _Fuzz_;\nuniform float _Min_Fuzz_;\nuniform float _Clip_Fade_;\nuniform float _Hue_Shift_;\nuniform float _Saturation_Shift_;\nuniform float _Value_Shift_;\nuniform vec3 _Blob_Position_;\nuniform float _Blob_Intensity_;\nuniform float _Blob_Near_Size_;\nuniform float _Blob_Far_Size_;\nuniform float _Blob_Near_Distance_;\nuniform float _Blob_Far_Distance_;\nuniform float _Blob_Fade_Length_;\nuniform float _Blob_Pulse_;\nuniform float _Blob_Fade_;\nuniform sampler2D _Blob_Texture_;\nuniform vec3 _Blob_Position_2_;\nuniform float _Blob_Near_Size_2_;\nuniform float _Blob_Pulse_2_;\nuniform float _Blob_Fade_2_;\nuniform vec3 _Left_Index_Pos_;\nuniform vec3 _Right_Index_Pos_;\nuniform vec3 _Left_Index_Middle_Pos_;\nuniform vec3 _Right_Index_Middle_Pos_;\nuniform sampler2D _Decal_;\nuniform vec2 _Decal_Scale_XY_;\nuniform bool _Decal_Front_Only_;\nuniform float _Rim_Intensity_;\nuniform sampler2D _Rim_Texture_;\nuniform float _Rim_Hue_Shift_;\nuniform float _Rim_Saturation_Shift_;\nuniform float _Rim_Value_Shift_;\nuniform float _Iridescence_Intensity_;\nuniform sampler2D _Iridescence_Texture_;\nuniform bool Use_Global_Left_Index;\nuniform bool Use_Global_Right_Index;\nuniform vec4 Global_Left_Index_Tip_Position;\nuniform vec4 Global_Right_Index_Tip_Position;\nuniform vec4 Global_Left_Thumb_Tip_Position;\nuniform vec4 Global_Right_Thumb_Tip_Position;\nuniform vec4 Global_Left_Index_Middle_Position;\nuniform vec4 Global_Right_Index_Middle_Position;\nuniform float Global_Left_Index_Tip_Proximity;\nuniform float Global_Right_Index_Tip_Proximity;\nvoid Blob_Fragment_B30(\nsampler2D Blob_Texture,\nvec4 Blob_Info1,\nvec4 Blob_Info2,\nout vec4 Blob_Color)\n{\nfloat k1=dot(Blob_Info1.xy,Blob_Info1.xy);\nfloat k2=dot(Blob_Info2.xy,Blob_Info2.xy);\nvec3 closer=k1<k2 ? vec3(k1,Blob_Info1.z,Blob_Info1.w) : vec3(k2,Blob_Info2.z,Blob_Info2.w);\nBlob_Color=closer.z*texture(Blob_Texture,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);\n}\nvoid FastLinearTosRGB_B42(\nvec4 Linear,\nout vec4 sRGB)\n{\nsRGB.rgb=sqrt(clamp(Linear.rgb,0.0,1.0));\nsRGB.a=Linear.a;\n}\nvoid Scale_RGB_B59(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{\nResult=vec4(Scalar,Scalar,Scalar,1)*Color;\n}\nvoid Fragment_Main_B121(\nfloat Sun_Intensity,\nfloat Sun_Theta,\nfloat Sun_Phi,\nvec3 Normal,\nvec4 Albedo,\nfloat Fresnel_Reflect,\nfloat Shininess,\nvec3 Incident,\nvec4 Horizon_Color,\nvec4 Sky_Color,\nvec4 Ground_Color,\nfloat Indirect_Diffuse,\nfloat Specular,\nfloat Horizon_Power,\nfloat Reflection,\nvec4 Reflection_Sample,\nvec4 Indirect_Sample,\nfloat Sharpness,\nfloat SSS,\nfloat Subsurface,\nvec4 Translucence,\nvec4 Rim_Light,\nvec4 Iridescence,\nout vec4 Result)\n{\nfloat theta=Sun_Theta*2.0*3.14159;\nfloat phi=Sun_Phi*3.14159;\nvec3 lightDir= vec3(cos(phi)*cos(theta),sin(phi),cos(phi)*sin(theta));\nfloat NdotL=max(dot(lightDir,Normal),0.0);\nvec3 R=reflect(Incident,Normal);\nfloat RdotL=max(0.0,dot(R,lightDir));\nfloat specular=pow(RdotL,Shininess);\nspecular=mix(specular,smoothstep(0.495*Sharpness,1.0-0.495*Sharpness,specular),Sharpness);\nvec4 gi=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);\nResult=((Sun_Intensity*NdotL+Indirect_Sample*Indirect_Diffuse+Translucence)*(1.0+SSS*Subsurface))*Albedo*(1.0-Fresnel_Reflect)+(Sun_Intensity*specular*Specular+Fresnel_Reflect*Reflection*Reflection_Sample)+Fresnel_Reflect*Rim_Light+Iridescence;\n}\nvoid Bulge_B79(\nbool Enabled,\nvec3 Normal,\nvec3 Tangent,\nfloat Bulge_Height,\nvec4 UV,\nfloat Bulge_Radius,\nvec3 ButtonN,\nout vec3 New_Normal)\n{\nvec2 xy=clamp(UV.xy*2.0,vec2(-1,-1),vec2(1,1));\nvec3 B=(cross(Normal,Tangent));\nfloat k=-clamp(1.0-length(xy)/Bulge_Radius,0.0,1.0)*Bulge_Height;\nk=sin(k*3.14159*0.5);\nk*=smoothstep(0.9998,0.9999,abs(dot(ButtonN,Normal)));\nNew_Normal=Normal*sqrt(1.0-k*k)+(xy.x*Tangent+xy.y*B)*k;\nNew_Normal=Enabled ? New_Normal : Normal;\n}\nvoid SSS_B77(\nvec3 ButtonN,\nvec3 Normal,\nvec3 Incident,\nout float Result)\n{\nfloat NdotI=abs(dot(Normal,Incident));\nfloat BdotI=abs(dot(ButtonN,Incident));\nResult=(abs(NdotI-BdotI)); \n}\nvoid FingerOcclusion_B67(\nfloat Width,\nfloat DistToCenter,\nfloat Fuzz,\nfloat Min_Fuzz,\nvec3 Position,\nvec3 Forward,\nvec3 Nearest,\nfloat Fade_Out,\nout float NotInShadow)\n{\nfloat d=dot((Nearest-Position),Forward);\nfloat sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);\nNotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);\n}\nvoid FingerOcclusion_B68(\nfloat Width,\nfloat DistToCenter,\nfloat Fuzz,\nfloat Min_Fuzz,\nvec3 Position,\nvec3 Forward,\nvec3 Nearest,\nfloat Fade_Out,\nout float NotInShadow)\n{\nfloat d=dot((Nearest-Position),Forward);\nfloat sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);\nNotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);\n}\nvoid Scale_Color_B91(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{\nResult=Scalar*Color;\n}\nvoid From_HSV_B73(\nfloat Hue,\nfloat Saturation,\nfloat Value,\nfloat Alpha,\nout vec4 Color)\n{\nvec4 K=vec4(1.0,2.0/3.0,1.0/3.0,3.0);\nvec3 p=abs(fract(vec3(Hue,Hue,Hue)+K.xyz)*6.0-K.www);\nColor.rgb=Value*mix(K.xxx,clamp(p-K.xxx,0.0,1.0),Saturation);\nColor.a=Alpha;\n}\nvoid Fast_Fresnel_B122(\nfloat Front_Reflect,\nfloat Edge_Reflect,\nfloat Power,\nvec3 Normal,\nvec3 Incident,\nout float Transmit,\nout float Reflect)\n{\nfloat d=max(-dot(Incident,Normal),0.0);\nReflect=Front_Reflect+(Edge_Reflect-Front_Reflect)*pow(.01-d,Power);\nTransmit=1.0-Reflect;\n}\nvoid Mapped_Environment_B51(\nsampler2D Reflected_Environment,\nsampler2D Indirect_Environment,\nvec3 Dir,\nout vec4 Reflected_Color,\nout vec4 Indirect_Diffuse)\n{\nReflected_Color=texture(Reflected_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));\nIndirect_Diffuse=texture(Indirect_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));\n}\nvec4 SampleEnv_Bid50(vec3 D,vec4 S,vec4 H,vec4 G,float exponent)\n{\nfloat k=pow(abs(D.y),exponent);\nvec4 C;\nif (D.y>0.0) {\nC=mix(H,S,k);\n} else {\nC=mix(H,G,k); \n}\nreturn C;\n}\nvoid Sky_Environment_B50(\nvec3 Normal,\nvec3 Reflected,\nvec4 Sky_Color,\nvec4 Horizon_Color,\nvec4 Ground_Color,\nfloat Horizon_Power,\nout vec4 Reflected_Color,\nout vec4 Indirect_Color)\n{\nReflected_Color=SampleEnv_Bid50(Reflected,Sky_Color,Horizon_Color,Ground_Color,Horizon_Power);\nIndirect_Color=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);\n}\nvoid Min_Segment_Distance_B65(\nvec3 P0,\nvec3 P1,\nvec3 Q0,\nvec3 Q1,\nout vec3 NearP,\nout vec3 NearQ,\nout float Distance)\n{\nvec3 u=P1-P0;\nvec3 v=Q1-Q0;\nvec3 w=P0-Q0;\nfloat a=dot(u,u);\nfloat b=dot(u,v);\nfloat c=dot(v,v);\nfloat d=dot(u,w);\nfloat e=dot(v,w);\nfloat D=a*c-b*b;\nfloat sD=D;\nfloat tD=D;\nfloat sc,sN,tc,tN;\nif (D<0.00001) {\nsN=0.0;\nsD=1.0;\ntN=e;\ntD=c;\n} else {\nsN=(b*e-c*d);\ntN=(a*e-b*d);\nif (sN<0.0) {\nsN=0.0;\ntN=e;\ntD=c;\n} else if (sN>sD) {\nsN=sD;\ntN=e+b;\ntD=c;\n}\n}\nif (tN<0.0) {\ntN=0.0;\nif (-d<0.0) {\nsN=0.0;\n} else if (-d>a) {\nsN=sD;\n} else {\nsN=-d;\nsD=a;\n}\n} else if (tN>tD) {\ntN=tD;\nif ((-d+b)<0.0) {\nsN=0.0;\n} else if ((-d+b)>a) {\nsN=sD;\n} else {\nsN=(-d+b);\nsD=a;\n}\n}\nsc=abs(sN)<0.000001 ? 0.0 : sN/sD;\ntc=abs(tN)<0.000001 ? 0.0 : tN/tD;\nNearP=P0+sc*u;\nNearQ=Q0+tc*v;\nDistance=distance(NearP,NearQ);\n}\nvoid To_XYZ_B74(\nvec3 Vec3,\nout float X,\nout float Y,\nout float Z)\n{\nX=Vec3.x;\nY=Vec3.y;\nZ=Vec3.z;\n}\nvoid Finger_Positions_B64(\nvec3 Left_Index_Pos,\nvec3 Right_Index_Pos,\nvec3 Left_Index_Middle_Pos,\nvec3 Right_Index_Middle_Pos,\nout vec3 Left_Index,\nout vec3 Right_Index,\nout vec3 Left_Index_Middle,\nout vec3 Right_Index_Middle)\n{\nLeft_Index= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Left_Index_Pos);\nRight_Index= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Right_Index_Pos);\nLeft_Index_Middle= (Use_Global_Left_Index ? Global_Left_Index_Middle_Position.xyz : Left_Index_Middle_Pos);\nRight_Index_Middle= (Use_Global_Right_Index ? Global_Right_Index_Middle_Position.xyz : Right_Index_Middle_Pos);\n}\nvoid VaryHSV_B108(\nvec3 HSV_In,\nfloat Hue_Shift,\nfloat Saturation_Shift,\nfloat Value_Shift,\nout vec3 HSV_Out)\n{\nHSV_Out=vec3(fract(HSV_In.x+Hue_Shift),clamp(HSV_In.y+Saturation_Shift,0.0,1.0),clamp(HSV_In.z+Value_Shift,0.0,1.0));\n}\nvoid Remap_Range_B114(\nfloat In_Min,\nfloat In_Max,\nfloat Out_Min,\nfloat Out_Max,\nfloat In,\nout float Out)\n{\nOut=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));\n}\nvoid To_HSV_B75(\nvec4 Color,\nout float Hue,\nout float Saturation,\nout float Value,\nout float Alpha,\nout vec3 HSV)\n{\nvec4 K=vec4(0.0,-1.0/3.0,2.0/3.0,-1.0);\nvec4 p=Color.g<Color.b ? vec4(Color.bg,K.wz) : vec4(Color.gb,K.xy);\nvec4 q=Color.r<p.x ? vec4(p.xyw,Color.r) : vec4(Color.r,p.yzx);\nfloat d=q.x-min(q.w,q.y);\nfloat e=1.0e-10;\nHue=abs(q.z+(q.w-q.y)/(6.0*d+e));\nSaturation=d/(q.x+e);\nValue=q.x;\nAlpha=Color.a;\nHSV=vec3(Hue,Saturation,Value);\n}\nvoid Code_B110(\nfloat X,\nout float Result)\n{\nResult=(acos(X)/3.14159-0.5)*2.0;\n}\nvoid Rim_Light_B132(\nvec3 Front,\nvec3 Normal,\nvec3 Incident,\nfloat Rim_Intensity,\nsampler2D Texture,\nout vec4 Result)\n{\nvec3 R=reflect(Incident,Normal);\nfloat RdotF=dot(R,Front);\nfloat RdotL=sqrt(1.0-RdotF*RdotF);\nvec2 UV=vec2(R.y*0.5+0.5,0.5);\nvec4 Color=texture(Texture,UV);\nResult=Color;\n}\nvoid main()\n{\nvec4 Blob_Color_Q30;\n#if BLOB_ENABLE\nBlob_Fragment_B30(_Blob_Texture_,vExtra2,vExtra3,Blob_Color_Q30);\n#else\nBlob_Color_Q30=vec4(0,0,0,0);\n#endif\nvec3 Incident_Q39=normalize(vPosition-cameraPosition);\nvec3 Normalized_Q38=normalize(vNormal);\nvec3 Normalized_Q71=normalize(vTangent);\nvec4 Color_Q83;\n#if DECAL_ENABLE\nColor_Q83=texture(_Decal_,vUV);\n#else\nColor_Q83=vec4(0,0,0,0);\n#endif\nfloat X_Q90;\nfloat Y_Q90;\nfloat Z_Q90;\nfloat W_Q90;\nX_Q90=vExtra1.x;\nY_Q90=vExtra1.y;\nZ_Q90=vExtra1.z;\nW_Q90=vExtra1.w;\nvec4 Linear_Q43;\nLinear_Q43.rgb=clamp(_Sky_Color_.rgb*_Sky_Color_.rgb,0.0,1.0);\nLinear_Q43.a=_Sky_Color_.a;\nvec4 Linear_Q44;\nLinear_Q44.rgb=clamp(_Horizon_Color_.rgb*_Horizon_Color_.rgb,0.0,1.0);\nLinear_Q44.a=_Horizon_Color_.a;\nvec4 Linear_Q45;\nLinear_Q45.rgb=clamp(_Ground_Color_.rgb*_Ground_Color_.rgb,0.0,1.0);\nLinear_Q45.a=_Ground_Color_.a;\nvec3 Left_Index_Q64;\nvec3 Right_Index_Q64;\nvec3 Left_Index_Middle_Q64;\nvec3 Right_Index_Middle_Q64;\nFinger_Positions_B64(_Left_Index_Pos_,_Right_Index_Pos_,_Left_Index_Middle_Pos_,_Right_Index_Middle_Pos_,Left_Index_Q64,Right_Index_Q64,Left_Index_Middle_Q64,Right_Index_Middle_Q64);\nvec4 Linear_Q46;\nLinear_Q46.rgb=clamp(_Albedo_.rgb*_Albedo_.rgb,0.0,1.0);\nLinear_Q46.a=_Albedo_.a;\nvec3 Normalized_Q107=normalize(vBinormal);\nvec3 Incident_Q70=normalize(vPosition-cameraPosition);\nvec3 New_Normal_Q79;\nBulge_B79(_Bulge_Enabled_,Normalized_Q38,Normalized_Q71,_Bulge_Height_,vColor,_Bulge_Radius_,vBinormal,New_Normal_Q79);\nfloat Result_Q77;\nSSS_B77(vBinormal,New_Normal_Q79,Incident_Q39,Result_Q77);\nvec4 Result_Q91;\nScale_Color_B91(Color_Q83,X_Q90,Result_Q91);\nfloat Transmit_Q122;\nfloat Reflect_Q122;\nFast_Fresnel_B122(_Front_Reflect_,_Edge_Reflect_,_Power_,New_Normal_Q79,Incident_Q39,Transmit_Q122,Reflect_Q122);\nfloat Product_Q125=Y_Q90*Y_Q90;\nvec3 NearP_Q65;\nvec3 NearQ_Q65;\nfloat Distance_Q65;\nMin_Segment_Distance_B65(Left_Index_Q64,Left_Index_Middle_Q64,vPosition,cameraPosition,NearP_Q65,NearQ_Q65,Distance_Q65);\nvec3 NearP_Q63;\nvec3 NearQ_Q63;\nfloat Distance_Q63;\nMin_Segment_Distance_B65(Right_Index_Q64,Right_Index_Middle_Q64,vPosition,cameraPosition,NearP_Q63,NearQ_Q63,Distance_Q63);\nvec3 Reflected_Q47=reflect(Incident_Q39,New_Normal_Q79);\nvec4 Product_Q103=Linear_Q46*vec4(1,1,1,1);\nvec4 Result_Q132;\nRim_Light_B132(Normalized_Q107,Normalized_Q38,Incident_Q70,_Rim_Intensity_,_Rim_Texture_,Result_Q132);\nfloat Dot_Q72=dot(Incident_Q70, Normalized_Q71);\nfloat MaxAB_Q123=max(Reflect_Q122,Product_Q125);\nfloat NotInShadow_Q67;\n#if OCCLUSION_ENABLED\nFingerOcclusion_B67(_Width_,Distance_Q65,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q65,_Clip_Fade_,NotInShadow_Q67);\n#else\nNotInShadow_Q67=1.0;\n#endif\nfloat NotInShadow_Q68;\n#if OCCLUSION_ENABLED\nFingerOcclusion_B68(_Width_,Distance_Q63,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q63,_Clip_Fade_,NotInShadow_Q68);\n#else\nNotInShadow_Q68=1.0;\n#endif\nvec4 Reflected_Color_Q51;\nvec4 Indirect_Diffuse_Q51;\n#if ENV_ENABLE\nMapped_Environment_B51(_Reflection_Map_,_Indirect_Environment_,Reflected_Q47,Reflected_Color_Q51,Indirect_Diffuse_Q51);\n#else\nReflected_Color_Q51=vec4(0,0,0,1);\nIndirect_Diffuse_Q51=vec4(0,0,0,1);\n#endif\nvec4 Reflected_Color_Q50;\nvec4 Indirect_Color_Q50;\n#if SKY_ENABLED\nSky_Environment_B50(New_Normal_Q79,Reflected_Q47,Linear_Q43,Linear_Q44,Linear_Q45,_Horizon_Power_,Reflected_Color_Q50,Indirect_Color_Q50);\n#else\nReflected_Color_Q50=vec4(0,0,0,1);\nIndirect_Color_Q50=vec4(0,0,0,1);\n#endif\nfloat Hue_Q75;\nfloat Saturation_Q75;\nfloat Value_Q75;\nfloat Alpha_Q75;\nvec3 HSV_Q75;\nTo_HSV_B75(Product_Q103,Hue_Q75,Saturation_Q75,Value_Q75,Alpha_Q75,HSV_Q75);\nfloat Hue_Q127;\nfloat Saturation_Q127;\nfloat Value_Q127;\nfloat Alpha_Q127;\nvec3 HSV_Q127;\nTo_HSV_B75(Result_Q132,Hue_Q127,Saturation_Q127,Value_Q127,Alpha_Q127,HSV_Q127);\nfloat Result_Q110;\nCode_B110(Dot_Q72,Result_Q110);\nfloat AbsA_Q76=abs(Result_Q110);\nfloat MinAB_Q58=min(NotInShadow_Q67,NotInShadow_Q68);\nvec4 Sum_Q48=Reflected_Color_Q51+Reflected_Color_Q50;\nvec4 Sum_Q49=Indirect_Diffuse_Q51+Indirect_Color_Q50;\nvec3 HSV_Out_Q126;\nVaryHSV_B108(HSV_Q127,_Rim_Hue_Shift_,_Rim_Saturation_Shift_,_Rim_Value_Shift_,HSV_Out_Q126);\nfloat Out_Q114;\nRemap_Range_B114(-1.0,1.0,0.0,1.0,Result_Q110,Out_Q114);\nfloat Product_Q106;\nProduct_Q106=AbsA_Q76*_Hue_Shift_;\nfloat X_Q128;\nfloat Y_Q128;\nfloat Z_Q128;\nTo_XYZ_B74(HSV_Out_Q126,X_Q128,Y_Q128,Z_Q128);\nvec2 Vec2_Q112=vec2(Out_Q114,0.5);\nvec3 HSV_Out_Q108;\nVaryHSV_B108(HSV_Q75,Product_Q106,_Saturation_Shift_,_Value_Shift_,HSV_Out_Q108);\nvec4 Color_Q129;\nFrom_HSV_B73(X_Q128,Y_Q128,Z_Q128,0.0,Color_Q129);\nvec4 Color_Q111;\n#if IRIDESCENCE_ENABLED\nColor_Q111=texture(_Iridescence_Texture_,Vec2_Q112);\n#else\nColor_Q111=vec4(0,0,0,0);\n#endif\nfloat X_Q74;\nfloat Y_Q74;\nfloat Z_Q74;\nTo_XYZ_B74(HSV_Out_Q108,X_Q74,Y_Q74,Z_Q74);\nvec4 Result_Q131=_Rim_Intensity_*Color_Q129;\nvec4 Result_Q113=_Iridescence_Intensity_*Color_Q111;\nvec4 Color_Q73;\nFrom_HSV_B73(X_Q74,Y_Q74,Z_Q74,0.0,Color_Q73);\nvec4 Result_Q84=Result_Q91+(1.0-Result_Q91.a)*Color_Q73;\nvec4 Result_Q121;\nFragment_Main_B121(_Sun_Intensity_,_Sun_Theta_,_Sun_Phi_,New_Normal_Q79,Result_Q84,MaxAB_Q123,_Shininess_,Incident_Q39,_Horizon_Color_,_Sky_Color_,_Ground_Color_,_Indirect_Diffuse_,_Specular_,_Horizon_Power_,_Reflection_,Sum_Q48,Sum_Q49,_Sharpness_,Result_Q77,_Subsurface_,vec4(0,0,0,0),Result_Q131,Result_Q113,Result_Q121);\nvec4 Result_Q59;\nScale_RGB_B59(Result_Q121,MinAB_Q58,Result_Q59);\nvec4 sRGB_Q42;\nFastLinearTosRGB_B42(Result_Q59,sRGB_Q42);\nvec4 Result_Q31=Blob_Color_Q30+(1.0-Blob_Color_Q30.a)*sRGB_Q42;\nvec4 Result_Q40=Result_Q31; Result_Q40.a=1.0;\nvec4 Out_Color=Result_Q40;\nfloat Clip_Threshold=0.001;\nbool To_sRGB=false;\ngl_FragColor=Out_Color;\n}";
                core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
                var mrdlSliderBarPixelShader = { name, shader };
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlSliderBar.vertex.js": (
              /*!*******************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlSliderBar.vertex.js ***!
                \*******************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "mrdlSliderBarVertexShader": () => (
                    /* binding */
                    mrdlSliderBarVertexShader
                  )
                  /* harmony export */
                });
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Engines/shaderStore */
                  "core/Misc/perfCounter"
                );
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
                var name = "mrdlSliderBarVertexShader";
                var shader = "uniform mat4 world;\nuniform mat4 viewProjection;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\n#ifdef TANGENT\nattribute vec3 tangent;\n#else\nconst vec3 tangent=vec3(0.);\n#endif\nuniform float _Radius_;\nuniform float _Bevel_Front_;\nuniform float _Bevel_Front_Stretch_;\nuniform float _Bevel_Back_;\nuniform float _Bevel_Back_Stretch_;\nuniform float _Radius_Top_Left_;\nuniform float _Radius_Top_Right_;\nuniform float _Radius_Bottom_Left_;\nuniform float _Radius_Bottom_Right_;\nuniform bool _Bulge_Enabled_;\nuniform float _Bulge_Height_;\nuniform float _Bulge_Radius_;\nuniform float _Sun_Intensity_;\nuniform float _Sun_Theta_;\nuniform float _Sun_Phi_;\nuniform float _Indirect_Diffuse_;\nuniform vec4 _Albedo_;\nuniform float _Specular_;\nuniform float _Shininess_;\nuniform float _Sharpness_;\nuniform float _Subsurface_;\nuniform vec4 _Left_Color_;\nuniform vec4 _Right_Color_;\nuniform float _Reflection_;\nuniform float _Front_Reflect_;\nuniform float _Edge_Reflect_;\nuniform float _Power_;\nuniform vec4 _Sky_Color_;\nuniform vec4 _Horizon_Color_;\nuniform vec4 _Ground_Color_;\nuniform float _Horizon_Power_;\nuniform sampler2D _Reflection_Map_;\nuniform sampler2D _Indirect_Environment_;\nuniform float _Width_;\nuniform float _Fuzz_;\nuniform float _Min_Fuzz_;\nuniform float _Clip_Fade_;\nuniform float _Hue_Shift_;\nuniform float _Saturation_Shift_;\nuniform float _Value_Shift_;\nuniform vec3 _Blob_Position_;\nuniform float _Blob_Intensity_;\nuniform float _Blob_Near_Size_;\nuniform float _Blob_Far_Size_;\nuniform float _Blob_Near_Distance_;\nuniform float _Blob_Far_Distance_;\nuniform float _Blob_Fade_Length_;\nuniform float _Blob_Pulse_;\nuniform float _Blob_Fade_;\nuniform sampler2D _Blob_Texture_;\nuniform vec3 _Blob_Position_2_;\nuniform float _Blob_Near_Size_2_;\nuniform float _Blob_Pulse_2_;\nuniform float _Blob_Fade_2_;\nuniform vec3 _Left_Index_Pos_;\nuniform vec3 _Right_Index_Pos_;\nuniform vec3 _Left_Index_Middle_Pos_;\nuniform vec3 _Right_Index_Middle_Pos_;\nuniform sampler2D _Decal_;\nuniform vec2 _Decal_Scale_XY_;\nuniform bool _Decal_Front_Only_;\nuniform float _Rim_Intensity_;\nuniform sampler2D _Rim_Texture_;\nuniform float _Rim_Hue_Shift_;\nuniform float _Rim_Saturation_Shift_;\nuniform float _Rim_Value_Shift_;\nuniform float _Iridescence_Intensity_;\nuniform sampler2D _Iridescence_Texture_;\nuniform bool Use_Global_Left_Index;\nuniform bool Use_Global_Right_Index;\nuniform vec4 Global_Left_Index_Tip_Position;\nuniform vec4 Global_Right_Index_Tip_Position;\nuniform vec4 Global_Left_Thumb_Tip_Position;\nuniform vec4 Global_Right_Thumb_Tip_Position;\nuniform float Global_Left_Index_Tip_Proximity;\nuniform float Global_Right_Index_Tip_Proximity;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUV;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec4 vColor;\nvarying vec4 vExtra1;\nvarying vec4 vExtra2;\nvarying vec4 vExtra3;\nvoid Object_To_World_Pos_B12(\nvec3 Pos_Object,\nout vec3 Pos_World)\n{\nPos_World=(world*vec4(Pos_Object,1.0)).xyz;\n}\nvoid Object_To_World_Normal_B32(\nvec3 Nrm_Object,\nout vec3 Nrm_World)\n{\nNrm_World=(vec4(Nrm_Object,0.0)).xyz;\n}\nvoid Blob_Vertex_B23(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nfloat Blob_Fade_Length,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nout vec4 Blob_Info)\n{\nvec3 blob= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Blob_Position);\nvec3 delta=blob-Position;\nfloat dist=dot(Normal,delta);\nfloat lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);\nfloat fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);\nfloat size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;\nvec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);\nfloat Fade=fadeValue*Intensity*Blob_Fade;\nfloat Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);\nBlob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);\n}\nvoid Blob_Vertex_B24(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nfloat Blob_Fade_Length,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nout vec4 Blob_Info)\n{\nvec3 blob= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Blob_Position);\nvec3 delta=blob-Position;\nfloat dist=dot(Normal,delta);\nfloat lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);\nfloat fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);\nfloat size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;\nvec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);\nfloat Fade=fadeValue*Intensity*Blob_Fade;\nfloat Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);\nBlob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);\n}\nvoid Move_Verts_B130(\nfloat Anisotropy,\nvec3 P,\nfloat Radius,\nfloat Bevel,\nvec3 Normal_Object,\nfloat ScaleZ,\nfloat Stretch,\nout vec3 New_P,\nout vec2 New_UV,\nout float Radial_Gradient,\nout vec3 Radial_Dir,\nout vec3 New_Normal)\n{\nvec2 UV=P.xy*2.0+0.5;\nvec2 center=clamp(UV,0.0,1.0);\nvec2 delta=UV-center;\nfloat deltad=(length(delta)*2.0);\nfloat f=(Bevel+(Radius-Bevel)*Stretch)/Radius;\nfloat innerd=clamp(deltad*2.0,0.0,1.0);\nfloat outerd=clamp(deltad*2.0-1.0,0.0,1.0);\nfloat bevelAngle=outerd*3.14159*0.5;\nfloat sinb=sin(bevelAngle);\nfloat cosb=cos(bevelAngle);\nfloat beveld=(1.0-f)*innerd+f*sinb;\nfloat br=outerd;\nvec2 r2=2.0*vec2(Radius/Anisotropy,Radius);\nfloat dir=P.z<0.0001 ? 1.0 : -1.0;\nNew_UV=center+r2*((0.5-center)+normalize(delta+vec2(0.0,0.000001))*beveld*0.5);\nNew_P=vec3(New_UV-0.5,P.z+dir*(1.0-cosb)*Bevel*ScaleZ);\nRadial_Gradient=clamp((deltad-0.5)*2.0,0.0,1.0);\nRadial_Dir=vec3(delta*r2,0.0);\nvec3 beveledNormal=cosb*Normal_Object+sinb*vec3(delta.x,delta.y,0.0);\nNew_Normal=Normal_Object.z==0.0 ? Normal_Object : beveledNormal;\n}\nvoid Object_To_World_Dir_B60(\nvec3 Dir_Object,\nout vec3 Normal_World,\nout vec3 Normal_World_N,\nout float Normal_Length)\n{\nNormal_World=(world*vec4(Dir_Object,0.0)).xyz;\nNormal_Length=length(Normal_World);\nNormal_World_N=Normal_World/Normal_Length;\n}\nvoid To_XYZ_B78(\nvec3 Vec3,\nout float X,\nout float Y,\nout float Z)\n{\nX=Vec3.x;\nY=Vec3.y;\nZ=Vec3.z;\n}\nvoid Conditional_Float_B93(\nbool Which,\nfloat If_True,\nfloat If_False,\nout float Result)\n{\nResult=Which ? If_True : If_False;\n}\nvoid Object_To_World_Dir_B28(\nvec3 Dir_Object,\nout vec3 Binormal_World,\nout vec3 Binormal_World_N,\nout float Binormal_Length)\n{\nBinormal_World=(world*vec4(Dir_Object,0.0)).xyz;\nBinormal_Length=length(Binormal_World);\nBinormal_World_N=Binormal_World/Binormal_Length;\n}\nvoid Pick_Radius_B69(\nfloat Radius,\nfloat Radius_Top_Left,\nfloat Radius_Top_Right,\nfloat Radius_Bottom_Left,\nfloat Radius_Bottom_Right,\nvec3 Position,\nout float Result)\n{\nbool whichY=Position.y>0.0;\nResult=Position.x<0.0 ? (whichY ? Radius_Top_Left : Radius_Bottom_Left) : (whichY ? Radius_Top_Right : Radius_Bottom_Right);\nResult*=Radius;\n}\nvoid Conditional_Float_B36(\nbool Which,\nfloat If_True,\nfloat If_False,\nout float Result)\n{\nResult=Which ? If_True : If_False;\n}\nvoid Greater_Than_B37(\nfloat Left,\nfloat Right,\nout bool Not_Greater_Than,\nout bool Greater_Than)\n{\nGreater_Than=Left>Right;\nNot_Greater_Than=!Greater_Than;\n}\nvoid Remap_Range_B105(\nfloat In_Min,\nfloat In_Max,\nfloat Out_Min,\nfloat Out_Max,\nfloat In,\nout float Out)\n{\nOut=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));\n}\nvoid main()\n{\nvec2 XY_Q85;\nXY_Q85=(uv-vec2(0.5,0.5))*_Decal_Scale_XY_+vec2(0.5,0.5);\nvec3 Tangent_World_Q27;\nvec3 Tangent_World_N_Q27;\nfloat Tangent_Length_Q27;\nTangent_World_Q27=(world*vec4(vec3(1,0,0),0.0)).xyz;\nTangent_Length_Q27=length(Tangent_World_Q27);\nTangent_World_N_Q27=Tangent_World_Q27/Tangent_Length_Q27;\nvec3 Normal_World_Q60;\nvec3 Normal_World_N_Q60;\nfloat Normal_Length_Q60;\nObject_To_World_Dir_B60(vec3(0,0,1),Normal_World_Q60,Normal_World_N_Q60,Normal_Length_Q60);\nfloat X_Q78;\nfloat Y_Q78;\nfloat Z_Q78;\nTo_XYZ_B78(position,X_Q78,Y_Q78,Z_Q78);\nvec3 Nrm_World_Q26;\nNrm_World_Q26=normalize((world*vec4(normal,0.0)).xyz);\nvec3 Binormal_World_Q28;\nvec3 Binormal_World_N_Q28;\nfloat Binormal_Length_Q28;\nObject_To_World_Dir_B28(vec3(0,1,0),Binormal_World_Q28,Binormal_World_N_Q28,Binormal_Length_Q28);\nfloat Anisotropy_Q29=Tangent_Length_Q27/Binormal_Length_Q28;\nfloat Result_Q69;\nPick_Radius_B69(_Radius_,_Radius_Top_Left_,_Radius_Top_Right_,_Radius_Bottom_Left_,_Radius_Bottom_Right_,position,Result_Q69);\nfloat Anisotropy_Q53=Binormal_Length_Q28/Normal_Length_Q60;\nbool Not_Greater_Than_Q37;\nbool Greater_Than_Q37;\nGreater_Than_B37(Z_Q78,0.0,Not_Greater_Than_Q37,Greater_Than_Q37);\nvec4 Linear_Q101;\nLinear_Q101.rgb=clamp(_Left_Color_.rgb*_Left_Color_.rgb,0.0,1.0);\nLinear_Q101.a=_Left_Color_.a;\nvec4 Linear_Q102;\nLinear_Q102.rgb=clamp(_Right_Color_.rgb*_Right_Color_.rgb,0.0,1.0);\nLinear_Q102.a=_Right_Color_.a;\nvec3 Difference_Q61=vec3(0,0,0)-Normal_World_N_Q60;\nvec4 Out_Color_Q34=vec4(X_Q78,Y_Q78,Z_Q78,1);\nfloat Result_Q36;\nConditional_Float_B36(Greater_Than_Q37,_Bevel_Back_,_Bevel_Front_,Result_Q36);\nfloat Result_Q94;\nConditional_Float_B36(Greater_Than_Q37,_Bevel_Back_Stretch_,_Bevel_Front_Stretch_,Result_Q94);\nvec3 New_P_Q130;\nvec2 New_UV_Q130;\nfloat Radial_Gradient_Q130;\nvec3 Radial_Dir_Q130;\nvec3 New_Normal_Q130;\nMove_Verts_B130(Anisotropy_Q29,position,Result_Q69,Result_Q36,normal,Anisotropy_Q53,Result_Q94,New_P_Q130,New_UV_Q130,Radial_Gradient_Q130,Radial_Dir_Q130,New_Normal_Q130);\nfloat X_Q98;\nfloat Y_Q98;\nX_Q98=New_UV_Q130.x;\nY_Q98=New_UV_Q130.y;\nvec3 Pos_World_Q12;\nObject_To_World_Pos_B12(New_P_Q130,Pos_World_Q12);\nvec3 Nrm_World_Q32;\nObject_To_World_Normal_B32(New_Normal_Q130,Nrm_World_Q32);\nvec4 Blob_Info_Q23;\n#if BLOB_ENABLE\nBlob_Vertex_B23(Pos_World_Q12,Nrm_World_Q26,Tangent_World_N_Q27,Binormal_World_N_Q28,_Blob_Position_,_Blob_Intensity_,_Blob_Near_Size_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_,_Blob_Fade_,Blob_Info_Q23);\n#else\nBlob_Info_Q23=vec4(0,0,0,0);\n#endif\nvec4 Blob_Info_Q24;\n#if BLOB_ENABLE_2\nBlob_Vertex_B24(Pos_World_Q12,Nrm_World_Q26,Tangent_World_N_Q27,Binormal_World_N_Q28,_Blob_Position_2_,_Blob_Intensity_,_Blob_Near_Size_2_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_2_,_Blob_Fade_2_,Blob_Info_Q24);\n#else\nBlob_Info_Q24=vec4(0,0,0,0);\n#endif\nfloat Out_Q105;\nRemap_Range_B105(0.0,1.0,0.0,1.0,X_Q98,Out_Q105);\nfloat X_Q86;\nfloat Y_Q86;\nfloat Z_Q86;\nTo_XYZ_B78(Nrm_World_Q32,X_Q86,Y_Q86,Z_Q86);\nvec4 Color_At_T_Q97=mix(Linear_Q101,Linear_Q102,Out_Q105);\nfloat Minus_F_Q87=-Z_Q86;\nfloat R_Q99;\nfloat G_Q99;\nfloat B_Q99;\nfloat A_Q99;\nR_Q99=Color_At_T_Q97.r; G_Q99=Color_At_T_Q97.g; B_Q99=Color_At_T_Q97.b; A_Q99=Color_At_T_Q97.a;\nfloat ClampF_Q88=clamp(0.0,Minus_F_Q87,1.0);\nfloat Result_Q93;\nConditional_Float_B93(_Decal_Front_Only_,ClampF_Q88,1.0,Result_Q93);\nvec4 Vec4_Q89=vec4(Result_Q93,Radial_Gradient_Q130,G_Q99,B_Q99);\nvec3 Position=Pos_World_Q12;\nvec3 Normal=Nrm_World_Q32;\nvec2 UV=XY_Q85;\nvec3 Tangent=Tangent_World_N_Q27;\nvec3 Binormal=Difference_Q61;\nvec4 Color=Out_Color_Q34;\nvec4 Extra1=Vec4_Q89;\nvec4 Extra2=Blob_Info_Q23;\nvec4 Extra3=Blob_Info_Q24;\ngl_Position=viewProjection*vec4(Position,1);\nvPosition=Position;\nvNormal=Normal;\nvUV=UV;\nvTangent=Tangent;\nvBinormal=Binormal;\nvColor=Color;\nvExtra1=Extra1;\nvExtra2=Extra2;\nvExtra3=Extra3;\n}";
                core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
                var mrdlSliderBarVertexShader = { name, shader };
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlSliderThumb.fragment.js": (
              /*!***********************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlSliderThumb.fragment.js ***!
                \***********************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "mrdlSliderThumbPixelShader": () => (
                    /* binding */
                    mrdlSliderThumbPixelShader
                  )
                  /* harmony export */
                });
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Engines/shaderStore */
                  "core/Misc/perfCounter"
                );
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
                var name = "mrdlSliderThumbPixelShader";
                var shader = "uniform vec3 cameraPosition;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUV;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec4 vColor;\nvarying vec4 vExtra1;\nvarying vec4 vExtra2;\nvarying vec4 vExtra3;\nuniform float _Radius_;\nuniform float _Bevel_Front_;\nuniform float _Bevel_Front_Stretch_;\nuniform float _Bevel_Back_;\nuniform float _Bevel_Back_Stretch_;\nuniform float _Radius_Top_Left_;\nuniform float _Radius_Top_Right_;\nuniform float _Radius_Bottom_Left_;\nuniform float _Radius_Bottom_Right_;\nuniform bool _Bulge_Enabled_;\nuniform float _Bulge_Height_;\nuniform float _Bulge_Radius_;\nuniform float _Sun_Intensity_;\nuniform float _Sun_Theta_;\nuniform float _Sun_Phi_;\nuniform float _Indirect_Diffuse_;\nuniform vec4 _Albedo_;\nuniform float _Specular_;\nuniform float _Shininess_;\nuniform float _Sharpness_;\nuniform float _Subsurface_;\nuniform vec4 _Left_Color_;\nuniform vec4 _Right_Color_;\nuniform float _Reflection_;\nuniform float _Front_Reflect_;\nuniform float _Edge_Reflect_;\nuniform float _Power_;\nuniform vec4 _Sky_Color_;\nuniform vec4 _Horizon_Color_;\nuniform vec4 _Ground_Color_;\nuniform float _Horizon_Power_;\nuniform sampler2D _Reflection_Map_;\nuniform sampler2D _Indirect_Environment_;\nuniform float _Width_;\nuniform float _Fuzz_;\nuniform float _Min_Fuzz_;\nuniform float _Clip_Fade_;\nuniform float _Hue_Shift_;\nuniform float _Saturation_Shift_;\nuniform float _Value_Shift_;\nuniform vec3 _Blob_Position_;\nuniform float _Blob_Intensity_;\nuniform float _Blob_Near_Size_;\nuniform float _Blob_Far_Size_;\nuniform float _Blob_Near_Distance_;\nuniform float _Blob_Far_Distance_;\nuniform float _Blob_Fade_Length_;\nuniform float _Blob_Pulse_;\nuniform float _Blob_Fade_;\nuniform sampler2D _Blob_Texture_;\nuniform vec3 _Blob_Position_2_;\nuniform float _Blob_Near_Size_2_;\nuniform float _Blob_Pulse_2_;\nuniform float _Blob_Fade_2_;\nuniform vec3 _Left_Index_Pos_;\nuniform vec3 _Right_Index_Pos_;\nuniform vec3 _Left_Index_Middle_Pos_;\nuniform vec3 _Right_Index_Middle_Pos_;\nuniform sampler2D _Decal_;\nuniform vec2 _Decal_Scale_XY_;\nuniform bool _Decal_Front_Only_;\nuniform float _Rim_Intensity_;\nuniform sampler2D _Rim_Texture_;\nuniform float _Rim_Hue_Shift_;\nuniform float _Rim_Saturation_Shift_;\nuniform float _Rim_Value_Shift_;\nuniform float _Iridescence_Intensity_;\nuniform sampler2D _Iridescence_Texture_;\nuniform bool Use_Global_Left_Index;\nuniform bool Use_Global_Right_Index;\nuniform vec4 Global_Left_Index_Tip_Position;\nuniform vec4 Global_Right_Index_Tip_Position;\nuniform vec4 Global_Left_Thumb_Tip_Position;\nuniform vec4 Global_Right_Thumb_Tip_Position;\nuniform vec4 Global_Left_Index_Middle_Position;\nuniform vec4 Global_Right_Index_Middle_Position;\nuniform float Global_Left_Index_Tip_Proximity;\nuniform float Global_Right_Index_Tip_Proximity;\nvoid Blob_Fragment_B180(\nsampler2D Blob_Texture,\nvec4 Blob_Info1,\nvec4 Blob_Info2,\nout vec4 Blob_Color)\n{\nfloat k1=dot(Blob_Info1.xy,Blob_Info1.xy);\nfloat k2=dot(Blob_Info2.xy,Blob_Info2.xy);\nvec3 closer=k1<k2 ? vec3(k1,Blob_Info1.z,Blob_Info1.w) : vec3(k2,Blob_Info2.z,Blob_Info2.w);\nBlob_Color=closer.z*texture(Blob_Texture,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);\n}\nvoid FastLinearTosRGB_B192(\nvec4 Linear,\nout vec4 sRGB)\n{\nsRGB.rgb=sqrt(clamp(Linear.rgb,0.0,1.0));\nsRGB.a=Linear.a;\n}\nvoid Scale_RGB_B209(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{\nResult=vec4(Scalar,Scalar,Scalar,1)*Color;\n}\nvoid Fragment_Main_B271(\nfloat Sun_Intensity,\nfloat Sun_Theta,\nfloat Sun_Phi,\nvec3 Normal,\nvec4 Albedo,\nfloat Fresnel_Reflect,\nfloat Shininess,\nvec3 Incident,\nvec4 Horizon_Color,\nvec4 Sky_Color,\nvec4 Ground_Color,\nfloat Indirect_Diffuse,\nfloat Specular,\nfloat Horizon_Power,\nfloat Reflection,\nvec4 Reflection_Sample,\nvec4 Indirect_Sample,\nfloat Sharpness,\nfloat SSS,\nfloat Subsurface,\nvec4 Translucence,\nvec4 Rim_Light,\nvec4 Iridescence,\nout vec4 Result)\n{\nfloat theta=Sun_Theta*2.0*3.14159;\nfloat phi=Sun_Phi*3.14159;\nvec3 lightDir= vec3(cos(phi)*cos(theta),sin(phi),cos(phi)*sin(theta));\nfloat NdotL=max(dot(lightDir,Normal),0.0);\nvec3 R=reflect(Incident,Normal);\nfloat RdotL=max(0.0,dot(R,lightDir));\nfloat specular=pow(RdotL,Shininess);\nspecular=mix(specular,smoothstep(0.495*Sharpness,1.0-0.495*Sharpness,specular),Sharpness);\nvec4 gi=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);\nResult=((Sun_Intensity*NdotL+Indirect_Sample*Indirect_Diffuse+Translucence)*(1.0+SSS*Subsurface))*Albedo*(1.0-Fresnel_Reflect)+(Sun_Intensity*specular*Specular+Fresnel_Reflect*Reflection*Reflection_Sample)+Fresnel_Reflect*Rim_Light+Iridescence;\n}\nvoid Bulge_B229(\nbool Enabled,\nvec3 Normal,\nvec3 Tangent,\nfloat Bulge_Height,\nvec4 UV,\nfloat Bulge_Radius,\nvec3 ButtonN,\nout vec3 New_Normal)\n{\nvec2 xy=clamp(UV.xy*2.0,vec2(-1,-1),vec2(1,1));\nvec3 B=(cross(Normal,Tangent));\nfloat k=-clamp(1.0-length(xy)/Bulge_Radius,0.0,1.0)*Bulge_Height;\nk=sin(k*3.14159*0.5);\nk*=smoothstep(0.9998,0.9999,abs(dot(ButtonN,Normal)));\nNew_Normal=Normal*sqrt(1.0-k*k)+(xy.x*Tangent+xy.y*B)*k;\nNew_Normal=Enabled ? New_Normal : Normal;\n}\nvoid SSS_B227(\nvec3 ButtonN,\nvec3 Normal,\nvec3 Incident,\nout float Result)\n{\nfloat NdotI=abs(dot(Normal,Incident));\nfloat BdotI=abs(dot(ButtonN,Incident));\nResult=(abs(NdotI-BdotI)); \n}\nvoid FingerOcclusion_B217(\nfloat Width,\nfloat DistToCenter,\nfloat Fuzz,\nfloat Min_Fuzz,\nvec3 Position,\nvec3 Forward,\nvec3 Nearest,\nfloat Fade_Out,\nout float NotInShadow)\n{\nfloat d=dot((Nearest-Position),Forward);\nfloat sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);\nNotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);\n}\nvoid FingerOcclusion_B218(\nfloat Width,\nfloat DistToCenter,\nfloat Fuzz,\nfloat Min_Fuzz,\nvec3 Position,\nvec3 Forward,\nvec3 Nearest,\nfloat Fade_Out,\nout float NotInShadow)\n{\nfloat d=dot((Nearest-Position),Forward);\nfloat sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);\nNotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);\n}\nvoid Scale_Color_B241(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{\nResult=Scalar*Color;\n}\nvoid From_HSV_B223(\nfloat Hue,\nfloat Saturation,\nfloat Value,\nfloat Alpha,\nout vec4 Color)\n{\nvec4 K=vec4(1.0,2.0/3.0,1.0/3.0,3.0);\nvec3 p=abs(fract(vec3(Hue,Hue,Hue)+K.xyz)*6.0-K.www);\nColor.rgb=Value*mix(K.xxx,clamp(p-K.xxx,0.0,1.0),Saturation);\nColor.a=Alpha;\n}\nvoid Fast_Fresnel_B272(\nfloat Front_Reflect,\nfloat Edge_Reflect,\nfloat Power,\nvec3 Normal,\nvec3 Incident,\nout float Transmit,\nout float Reflect)\n{\nfloat d=max(-dot(Incident,Normal),0.0);\nReflect=Front_Reflect+(Edge_Reflect-Front_Reflect)*pow(1.0-d,Power);\nTransmit=1.0-Reflect;\n}\nvoid Mapped_Environment_B201(\nsampler2D Reflected_Environment,\nsampler2D Indirect_Environment,\nvec3 Dir,\nout vec4 Reflected_Color,\nout vec4 Indirect_Diffuse)\n{\nReflected_Color=texture(Reflected_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));\nIndirect_Diffuse=texture(Indirect_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));\n}\nvec4 SampleEnv_Bid200(vec3 D,vec4 S,vec4 H,vec4 G,float exponent)\n{\nfloat k=pow(abs(D.y),exponent);\nvec4 C;\nif (D.y>0.0) {\nC=mix(H,S,k);\n} else {\nC=mix(H,G,k); \n}\nreturn C;\n}\nvoid Sky_Environment_B200(\nvec3 Normal,\nvec3 Reflected,\nvec4 Sky_Color,\nvec4 Horizon_Color,\nvec4 Ground_Color,\nfloat Horizon_Power,\nout vec4 Reflected_Color,\nout vec4 Indirect_Color)\n{\nReflected_Color=SampleEnv_Bid200(Reflected,Sky_Color,Horizon_Color,Ground_Color,Horizon_Power);\nIndirect_Color=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);\n}\nvoid Min_Segment_Distance_B215(\nvec3 P0,\nvec3 P1,\nvec3 Q0,\nvec3 Q1,\nout vec3 NearP,\nout vec3 NearQ,\nout float Distance)\n{\nvec3 u=P1-P0;\nvec3 v=Q1-Q0;\nvec3 w=P0-Q0;\nfloat a=dot(u,u);\nfloat b=dot(u,v);\nfloat c=dot(v,v);\nfloat d=dot(u,w);\nfloat e=dot(v,w);\nfloat D=a*c-b*b;\nfloat sD=D;\nfloat tD=D;\nfloat sc,sN,tc,tN;\nif (D<0.00001) {\nsN=0.0;\nsD=1.0;\ntN=e;\ntD=c;\n} else {\nsN=(b*e-c*d);\ntN=(a*e-b*d);\nif (sN<0.0) {\nsN=0.0;\ntN=e;\ntD=c;\n} else if (sN>sD) {\nsN=sD;\ntN=e+b;\ntD=c;\n}\n}\nif (tN<0.0) {\ntN=0.0;\nif (-d<0.0) {\nsN=0.0;\n} else if (-d>a) {\nsN=sD;\n} else {\nsN=-d;\nsD=a;\n}\n} else if (tN>tD) {\ntN=tD;\nif ((-d+b)<0.0) {\nsN=0.0;\n} else if ((-d+b)>a) {\nsN=sD;\n} else {\nsN=(-d+b);\nsD=a;\n}\n}\nsc=abs(sN)<0.000001 ? 0.0 : sN/sD;\ntc=abs(tN)<0.000001 ? 0.0 : tN/tD;\nNearP=P0+sc*u;\nNearQ=Q0+tc*v;\nDistance=distance(NearP,NearQ);\n}\nvoid To_XYZ_B224(\nvec3 Vec3,\nout float X,\nout float Y,\nout float Z)\n{\nX=Vec3.x;\nY=Vec3.y;\nZ=Vec3.z;\n}\nvoid Finger_Positions_B214(\nvec3 Left_Index_Pos,\nvec3 Right_Index_Pos,\nvec3 Left_Index_Middle_Pos,\nvec3 Right_Index_Middle_Pos,\nout vec3 Left_Index,\nout vec3 Right_Index,\nout vec3 Left_Index_Middle,\nout vec3 Right_Index_Middle)\n{\nLeft_Index= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Left_Index_Pos);\nRight_Index= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Right_Index_Pos);\nLeft_Index_Middle= (Use_Global_Left_Index ? Global_Left_Index_Middle_Position.xyz : Left_Index_Middle_Pos);\nRight_Index_Middle= (Use_Global_Right_Index ? Global_Right_Index_Middle_Position.xyz : Right_Index_Middle_Pos);\n}\nvoid VaryHSV_B258(\nvec3 HSV_In,\nfloat Hue_Shift,\nfloat Saturation_Shift,\nfloat Value_Shift,\nout vec3 HSV_Out)\n{\nHSV_Out=vec3(fract(HSV_In.x+Hue_Shift),clamp(HSV_In.y+Saturation_Shift,0.0,1.0),clamp(HSV_In.z+Value_Shift,0.0,1.0));\n}\nvoid Remap_Range_B264(\nfloat In_Min,\nfloat In_Max,\nfloat Out_Min,\nfloat Out_Max,\nfloat In,\nout float Out)\n{\nOut=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));\n}\nvoid To_HSV_B225(\nvec4 Color,\nout float Hue,\nout float Saturation,\nout float Value,\nout float Alpha,\nout vec3 HSV)\n{\nvec4 K=vec4(0.0,-1.0/3.0,2.0/3.0,-1.0);\nvec4 p=Color.g<Color.b ? vec4(Color.bg,K.wz) : vec4(Color.gb,K.xy);\nvec4 q=Color.r<p.x ? vec4(p.xyw,Color.r) : vec4(Color.r,p.yzx);\nfloat d=q.x-min(q.w,q.y);\nfloat e=1.0e-10;\nHue=abs(q.z+(q.w-q.y)/(6.0*d+e));\nSaturation=d/(q.x+e);\nValue=q.x;\nAlpha=Color.a;\nHSV=vec3(Hue,Saturation,Value);\n}\nvoid Code_B260(\nfloat X,\nout float Result)\n{\nResult=(acos(X)/3.14159-0.5)*2.0;\n}\nvoid Rim_Light_B282(\nvec3 Front,\nvec3 Normal,\nvec3 Incident,\nfloat Rim_Intensity,\nsampler2D Texture,\nout vec4 Result)\n{\nvec3 R=reflect(Incident,Normal);\nfloat RdotF=dot(R,Front);\nfloat RdotL=sqrt(1.0-RdotF*RdotF);\nvec2 UV=vec2(R.y*0.5+0.5,0.5);\nvec4 Color=texture(Texture,UV);\nResult=Color;\n}\nvoid main()\n{\nvec4 Blob_Color_Q180;\n#if BLOB_ENABLE\nBlob_Fragment_B180(_Blob_Texture_,vExtra2,vExtra3,Blob_Color_Q180);\n#else\nBlob_Color_Q180=vec4(0,0,0,0);\n#endif\nvec3 Incident_Q189=normalize(vPosition-cameraPosition);\nvec3 Normalized_Q188=normalize(vNormal);\nvec3 Normalized_Q221=normalize(vTangent);\nvec4 Color_Q233;\n#if DECAL_ENABLE\nColor_Q233=texture(_Decal_,vUV);\n#else\nColor_Q233=vec4(0,0,0,0);\n#endif\nfloat X_Q240;\nfloat Y_Q240;\nfloat Z_Q240;\nfloat W_Q240;\nX_Q240=vExtra1.x;\nY_Q240=vExtra1.y;\nZ_Q240=vExtra1.z;\nW_Q240=vExtra1.w;\nvec4 Linear_Q193;\nLinear_Q193.rgb=clamp(_Sky_Color_.rgb*_Sky_Color_.rgb,0.0,1.0);\nLinear_Q193.a=_Sky_Color_.a;\nvec4 Linear_Q194;\nLinear_Q194.rgb=clamp(_Horizon_Color_.rgb*_Horizon_Color_.rgb,0.0,1.0);\nLinear_Q194.a=_Horizon_Color_.a;\nvec4 Linear_Q195;\nLinear_Q195.rgb=clamp(_Ground_Color_.rgb*_Ground_Color_.rgb,0.0,1.0);\nLinear_Q195.a=_Ground_Color_.a;\nvec3 Left_Index_Q214;\nvec3 Right_Index_Q214;\nvec3 Left_Index_Middle_Q214;\nvec3 Right_Index_Middle_Q214;\nFinger_Positions_B214(_Left_Index_Pos_,_Right_Index_Pos_,_Left_Index_Middle_Pos_,_Right_Index_Middle_Pos_,Left_Index_Q214,Right_Index_Q214,Left_Index_Middle_Q214,Right_Index_Middle_Q214);\nvec4 Linear_Q196;\nLinear_Q196.rgb=clamp(_Albedo_.rgb*_Albedo_.rgb,0.0,1.0);\nLinear_Q196.a=_Albedo_.a;\nvec3 Normalized_Q257=normalize(vBinormal);\nvec3 Incident_Q220=normalize(vPosition-cameraPosition);\nvec3 New_Normal_Q229;\nBulge_B229(_Bulge_Enabled_,Normalized_Q188,Normalized_Q221,_Bulge_Height_,vColor,_Bulge_Radius_,vBinormal,New_Normal_Q229);\nfloat Result_Q227;\nSSS_B227(vBinormal,New_Normal_Q229,Incident_Q189,Result_Q227);\nvec4 Result_Q241;\nScale_Color_B241(Color_Q233,X_Q240,Result_Q241);\nfloat Transmit_Q272;\nfloat Reflect_Q272;\nFast_Fresnel_B272(_Front_Reflect_,_Edge_Reflect_,_Power_,New_Normal_Q229,Incident_Q189,Transmit_Q272,Reflect_Q272);\nfloat Product_Q275=Y_Q240*Y_Q240;\nvec3 NearP_Q215;\nvec3 NearQ_Q215;\nfloat Distance_Q215;\nMin_Segment_Distance_B215(Left_Index_Q214,Left_Index_Middle_Q214,vPosition,cameraPosition,NearP_Q215,NearQ_Q215,Distance_Q215);\nvec3 NearP_Q213;\nvec3 NearQ_Q213;\nfloat Distance_Q213;\nMin_Segment_Distance_B215(Right_Index_Q214,Right_Index_Middle_Q214,vPosition,cameraPosition,NearP_Q213,NearQ_Q213,Distance_Q213);\nvec3 Reflected_Q197=reflect(Incident_Q189,New_Normal_Q229);\nvec4 Product_Q253=Linear_Q196*vec4(1,1,1,1);\nvec4 Result_Q282;\nRim_Light_B282(Normalized_Q257,Normalized_Q188,Incident_Q220,_Rim_Intensity_,_Rim_Texture_,Result_Q282);\nfloat Dot_Q222=dot(Incident_Q220, Normalized_Q221);\nfloat MaxAB_Q273=max(Reflect_Q272,Product_Q275);\nfloat NotInShadow_Q217;\n#if OCCLUSION_ENABLED\nFingerOcclusion_B217(_Width_,Distance_Q215,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q215,_Clip_Fade_,NotInShadow_Q217);\n#else\nNotInShadow_Q217=1.0;\n#endif\nfloat NotInShadow_Q218;\n#if OCCLUSION_ENABLED\nFingerOcclusion_B218(_Width_,Distance_Q213,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q213,_Clip_Fade_,NotInShadow_Q218);\n#else\nNotInShadow_Q218=1.0;\n#endif\nvec4 Reflected_Color_Q201;\nvec4 Indirect_Diffuse_Q201;\n#if ENV_ENABLE\nMapped_Environment_B201(_Reflection_Map_,_Indirect_Environment_,Reflected_Q197,Reflected_Color_Q201,Indirect_Diffuse_Q201);\n#else\nReflected_Color_Q201=vec4(0,0,0,1);\nIndirect_Diffuse_Q201=vec4(0,0,0,1);\n#endif\nvec4 Reflected_Color_Q200;\nvec4 Indirect_Color_Q200;\n#if SKY_ENABLED\nSky_Environment_B200(New_Normal_Q229,Reflected_Q197,Linear_Q193,Linear_Q194,Linear_Q195,_Horizon_Power_,Reflected_Color_Q200,Indirect_Color_Q200);\n#else\nReflected_Color_Q200=vec4(0,0,0,1);\nIndirect_Color_Q200=vec4(0,0,0,1);\n#endif\nfloat Hue_Q225;\nfloat Saturation_Q225;\nfloat Value_Q225;\nfloat Alpha_Q225;\nvec3 HSV_Q225;\nTo_HSV_B225(Product_Q253,Hue_Q225,Saturation_Q225,Value_Q225,Alpha_Q225,HSV_Q225);\nfloat Hue_Q277;\nfloat Saturation_Q277;\nfloat Value_Q277;\nfloat Alpha_Q277;\nvec3 HSV_Q277;\nTo_HSV_B225(Result_Q282,Hue_Q277,Saturation_Q277,Value_Q277,Alpha_Q277,HSV_Q277);\nfloat Result_Q260;\nCode_B260(Dot_Q222,Result_Q260);\nfloat AbsA_Q226=abs(Result_Q260);\nfloat MinAB_Q208=min(NotInShadow_Q217,NotInShadow_Q218);\nvec4 Sum_Q198=Reflected_Color_Q201+Reflected_Color_Q200;\nvec4 Sum_Q199=Indirect_Diffuse_Q201+Indirect_Color_Q200;\nvec3 HSV_Out_Q276;\nVaryHSV_B258(HSV_Q277,_Rim_Hue_Shift_,_Rim_Saturation_Shift_,_Rim_Value_Shift_,HSV_Out_Q276);\nfloat Out_Q264;\nRemap_Range_B264(-1.0,1.0,0.0,1.0,Result_Q260,Out_Q264);\nfloat Product_Q256;\nProduct_Q256=AbsA_Q226*_Hue_Shift_;\nfloat X_Q278;\nfloat Y_Q278;\nfloat Z_Q278;\nTo_XYZ_B224(HSV_Out_Q276,X_Q278,Y_Q278,Z_Q278);\nvec2 Vec2_Q262=vec2(Out_Q264,0.5);\nvec3 HSV_Out_Q258;\nVaryHSV_B258(HSV_Q225,Product_Q256,_Saturation_Shift_,_Value_Shift_,HSV_Out_Q258);\nvec4 Color_Q279;\nFrom_HSV_B223(X_Q278,Y_Q278,Z_Q278,0.0,Color_Q279);\nvec4 Color_Q261;\n#if IRIDESCENCE_ENABLED\nColor_Q261=texture(_Iridescence_Texture_,Vec2_Q262);\n#else\nColor_Q261=vec4(0,0,0,0);\n#endif\nfloat X_Q224;\nfloat Y_Q224;\nfloat Z_Q224;\nTo_XYZ_B224(HSV_Out_Q258,X_Q224,Y_Q224,Z_Q224);\nvec4 Result_Q281=_Rim_Intensity_*Color_Q279;\nvec4 Result_Q263=_Iridescence_Intensity_*Color_Q261;\nvec4 Color_Q223;\nFrom_HSV_B223(X_Q224,Y_Q224,Z_Q224,0.0,Color_Q223);\nvec4 Result_Q234=Result_Q241+(1.0-Result_Q241.a)*Color_Q223;\nvec4 Result_Q271;\nFragment_Main_B271(_Sun_Intensity_,_Sun_Theta_,_Sun_Phi_,New_Normal_Q229,Result_Q234,MaxAB_Q273,_Shininess_,Incident_Q189,_Horizon_Color_,_Sky_Color_,_Ground_Color_,_Indirect_Diffuse_,_Specular_,_Horizon_Power_,_Reflection_,Sum_Q198,Sum_Q199,_Sharpness_,Result_Q227,_Subsurface_,vec4(0,0,0,0),Result_Q281,Result_Q263,Result_Q271);\nvec4 Result_Q209;\nScale_RGB_B209(Result_Q271,MinAB_Q208,Result_Q209);\nvec4 sRGB_Q192;\nFastLinearTosRGB_B192(Result_Q209,sRGB_Q192);\nvec4 Result_Q181=Blob_Color_Q180+(1.0-Blob_Color_Q180.a)*sRGB_Q192;\nvec4 Result_Q190=Result_Q181; Result_Q190.a=1.0;\nvec4 Out_Color=Result_Q190;\nfloat Clip_Threshold=0.001;\nbool To_sRGB=false;\ngl_FragColor=Out_Color;\n}";
                core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
                var mrdlSliderThumbPixelShader = { name, shader };
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlSliderThumb.vertex.js": (
              /*!*********************************************************************************!*\
                !*** ../../../lts/gui/dist/3D/materials/mrdl/shaders/mrdlSliderThumb.vertex.js ***!
                \*********************************************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "mrdlSliderThumbVertexShader": () => (
                    /* binding */
                    mrdlSliderThumbVertexShader
                  )
                  /* harmony export */
                });
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! core/Engines/shaderStore */
                  "core/Misc/perfCounter"
                );
                var core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__2.n(core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
                var name = "mrdlSliderThumbVertexShader";
                var shader = "uniform mat4 world;\nuniform mat4 viewProjection;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\n#ifdef TANGENT\nattribute vec3 tangent;\n#else\nconst vec3 tangent=vec3(0.);\n#endif\nuniform float _Radius_;\nuniform float _Bevel_Front_;\nuniform float _Bevel_Front_Stretch_;\nuniform float _Bevel_Back_;\nuniform float _Bevel_Back_Stretch_;\nuniform float _Radius_Top_Left_;\nuniform float _Radius_Top_Right_;\nuniform float _Radius_Bottom_Left_;\nuniform float _Radius_Bottom_Right_;\nuniform bool _Bulge_Enabled_;\nuniform float _Bulge_Height_;\nuniform float _Bulge_Radius_;\nuniform float _Sun_Intensity_;\nuniform float _Sun_Theta_;\nuniform float _Sun_Phi_;\nuniform float _Indirect_Diffuse_;\nuniform vec4 _Albedo_;\nuniform float _Specular_;\nuniform float _Shininess_;\nuniform float _Sharpness_;\nuniform float _Subsurface_;\nuniform vec4 _Left_Color_;\nuniform vec4 _Right_Color_;\nuniform float _Reflection_;\nuniform float _Front_Reflect_;\nuniform float _Edge_Reflect_;\nuniform float _Power_;\nuniform vec4 _Sky_Color_;\nuniform vec4 _Horizon_Color_;\nuniform vec4 _Ground_Color_;\nuniform float _Horizon_Power_;\nuniform sampler2D _Reflection_Map_;\nuniform sampler2D _Indirect_Environment_;\nuniform float _Width_;\nuniform float _Fuzz_;\nuniform float _Min_Fuzz_;\nuniform float _Clip_Fade_;\nuniform float _Hue_Shift_;\nuniform float _Saturation_Shift_;\nuniform float _Value_Shift_;\nuniform vec3 _Blob_Position_;\nuniform float _Blob_Intensity_;\nuniform float _Blob_Near_Size_;\nuniform float _Blob_Far_Size_;\nuniform float _Blob_Near_Distance_;\nuniform float _Blob_Far_Distance_;\nuniform float _Blob_Fade_Length_;\nuniform float _Blob_Pulse_;\nuniform float _Blob_Fade_;\nuniform sampler2D _Blob_Texture_;\nuniform vec3 _Blob_Position_2_;\nuniform float _Blob_Near_Size_2_;\nuniform float _Blob_Pulse_2_;\nuniform float _Blob_Fade_2_;\nuniform vec3 _Left_Index_Pos_;\nuniform vec3 _Right_Index_Pos_;\nuniform vec3 _Left_Index_Middle_Pos_;\nuniform vec3 _Right_Index_Middle_Pos_;\nuniform sampler2D _Decal_;\nuniform vec2 _Decal_Scale_XY_;\nuniform bool _Decal_Front_Only_;\nuniform float _Rim_Intensity_;\nuniform sampler2D _Rim_Texture_;\nuniform float _Rim_Hue_Shift_;\nuniform float _Rim_Saturation_Shift_;\nuniform float _Rim_Value_Shift_;\nuniform float _Iridescence_Intensity_;\nuniform sampler2D _Iridescence_Texture_;\nuniform bool Use_Global_Left_Index;\nuniform bool Use_Global_Right_Index;\nuniform vec4 Global_Left_Index_Tip_Position;\nuniform vec4 Global_Right_Index_Tip_Position;\nuniform vec4 Global_Left_Thumb_Tip_Position;\nuniform vec4 Global_Right_Thumb_Tip_Position;\nuniform float Global_Left_Index_Tip_Proximity;\nuniform float Global_Right_Index_Tip_Proximity;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUV;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec4 vColor;\nvarying vec4 vExtra1;\nvarying vec4 vExtra2;\nvarying vec4 vExtra3;\nvoid Object_To_World_Pos_B162(\nvec3 Pos_Object,\nout vec3 Pos_World)\n{\nPos_World=(world*vec4(Pos_Object,1.0)).xyz;\n}\nvoid Object_To_World_Normal_B182(\nvec3 Nrm_Object,\nout vec3 Nrm_World)\n{\nNrm_World=(vec4(Nrm_Object,0.0)).xyz;\n}\nvoid Blob_Vertex_B173(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nfloat Blob_Fade_Length,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nout vec4 Blob_Info)\n{\nvec3 blob= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Blob_Position);\nvec3 delta=blob-Position;\nfloat dist=dot(Normal,delta);\nfloat lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);\nfloat fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);\nfloat size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;\nvec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);\nfloat Fade=fadeValue*Intensity*Blob_Fade;\nfloat Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);\nBlob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);\n}\nvoid Blob_Vertex_B174(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nfloat Blob_Fade_Length,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nout vec4 Blob_Info)\n{\nvec3 blob= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Blob_Position);\nvec3 delta=blob-Position;\nfloat dist=dot(Normal,delta);\nfloat lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);\nfloat fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);\nfloat size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;\nvec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);\nfloat Fade=fadeValue*Intensity*Blob_Fade;\nfloat Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);\nBlob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);\n}\nvoid Move_Verts_B280(\nfloat Anisotropy,\nvec3 P,\nfloat Radius,\nfloat Bevel,\nvec3 Normal_Object,\nfloat ScaleZ,\nfloat Stretch,\nout vec3 New_P,\nout vec2 New_UV,\nout float Radial_Gradient,\nout vec3 Radial_Dir,\nout vec3 New_Normal)\n{\nvec2 UV=P.xy*2.0+0.5;\nvec2 center=clamp(UV,0.0,1.0);\nvec2 delta=UV-center;\nfloat deltad=(length(delta)*2.0);\nfloat f=(Bevel+(Radius-Bevel)*Stretch)/Radius;\nfloat innerd=clamp(deltad*2.0,0.0,1.0);\nfloat outerd=clamp(deltad*2.0-1.0,0.0,1.0);\nfloat bevelAngle=outerd*3.14159*0.5;\nfloat sinb=sin(bevelAngle);\nfloat cosb=cos(bevelAngle);\nfloat beveld=(1.0-f)*innerd+f*sinb;\nfloat br=outerd;\nvec2 r2=2.0*vec2(Radius/Anisotropy,Radius);\nfloat dir=P.z<0.0001 ? 1.0 : -1.0;\nNew_UV=center+r2*((0.5-center)+normalize(delta+vec2(0.0,0.000001))*beveld*0.5);\nNew_P=vec3(New_UV-0.5,P.z+dir*(1.0-cosb)*Bevel*ScaleZ);\nRadial_Gradient=clamp((deltad-0.5)*2.0,0.0,1.0);\nRadial_Dir=vec3(delta*r2,0.0);\nvec3 beveledNormal=cosb*Normal_Object+sinb*vec3(delta.x,delta.y,0.0);\nNew_Normal=Normal_Object.z==0.0 ? Normal_Object : beveledNormal;\n}\nvoid Object_To_World_Dir_B210(\nvec3 Dir_Object,\nout vec3 Normal_World,\nout vec3 Normal_World_N,\nout float Normal_Length)\n{\nNormal_World=(world*vec4(Dir_Object,0.0)).xyz;\nNormal_Length=length(Normal_World);\nNormal_World_N=Normal_World/Normal_Length;\n}\nvoid To_XYZ_B228(\nvec3 Vec3,\nout float X,\nout float Y,\nout float Z)\n{\nX=Vec3.x;\nY=Vec3.y;\nZ=Vec3.z;\n}\nvoid Conditional_Float_B243(\nbool Which,\nfloat If_True,\nfloat If_False,\nout float Result)\n{\nResult=Which ? If_True : If_False;\n}\nvoid Object_To_World_Dir_B178(\nvec3 Dir_Object,\nout vec3 Binormal_World,\nout vec3 Binormal_World_N,\nout float Binormal_Length)\n{\nBinormal_World=(world*vec4(Dir_Object,0.0)).xyz;\nBinormal_Length=length(Binormal_World);\nBinormal_World_N=Binormal_World/Binormal_Length;\n}\nvoid Pick_Radius_B219(\nfloat Radius,\nfloat Radius_Top_Left,\nfloat Radius_Top_Right,\nfloat Radius_Bottom_Left,\nfloat Radius_Bottom_Right,\nvec3 Position,\nout float Result)\n{\nbool whichY=Position.y>0.0;\nResult=Position.x<0.0 ? (whichY ? Radius_Top_Left : Radius_Bottom_Left) : (whichY ? Radius_Top_Right : Radius_Bottom_Right);\nResult*=Radius;\n}\nvoid Conditional_Float_B186(\nbool Which,\nfloat If_True,\nfloat If_False,\nout float Result)\n{\nResult=Which ? If_True : If_False;\n}\nvoid Greater_Than_B187(\nfloat Left,\nfloat Right,\nout bool Not_Greater_Than,\nout bool Greater_Than)\n{\nGreater_Than=Left>Right;\nNot_Greater_Than=!Greater_Than;\n}\nvoid Remap_Range_B255(\nfloat In_Min,\nfloat In_Max,\nfloat Out_Min,\nfloat Out_Max,\nfloat In,\nout float Out)\n{\nOut=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));\n}\nvoid main()\n{\nvec2 XY_Q235;\nXY_Q235=(uv-vec2(0.5,0.5))*_Decal_Scale_XY_+vec2(0.5,0.5);\nvec3 Tangent_World_Q177;\nvec3 Tangent_World_N_Q177;\nfloat Tangent_Length_Q177;\nTangent_World_Q177=(world*vec4(vec3(1,0,0),0.0)).xyz;\nTangent_Length_Q177=length(Tangent_World_Q177);\nTangent_World_N_Q177=Tangent_World_Q177/Tangent_Length_Q177;\nvec3 Normal_World_Q210;\nvec3 Normal_World_N_Q210;\nfloat Normal_Length_Q210;\nObject_To_World_Dir_B210(vec3(0,0,1),Normal_World_Q210,Normal_World_N_Q210,Normal_Length_Q210);\nfloat X_Q228;\nfloat Y_Q228;\nfloat Z_Q228;\nTo_XYZ_B228(position,X_Q228,Y_Q228,Z_Q228);\nvec3 Nrm_World_Q176;\nNrm_World_Q176=normalize((world*vec4(normal,0.0)).xyz);\nvec3 Binormal_World_Q178;\nvec3 Binormal_World_N_Q178;\nfloat Binormal_Length_Q178;\nObject_To_World_Dir_B178(vec3(0,1,0),Binormal_World_Q178,Binormal_World_N_Q178,Binormal_Length_Q178);\nfloat Anisotropy_Q179=Tangent_Length_Q177/Binormal_Length_Q178;\nfloat Result_Q219;\nPick_Radius_B219(_Radius_,_Radius_Top_Left_,_Radius_Top_Right_,_Radius_Bottom_Left_,_Radius_Bottom_Right_,position,Result_Q219);\nfloat Anisotropy_Q203=Binormal_Length_Q178/Normal_Length_Q210;\nbool Not_Greater_Than_Q187;\nbool Greater_Than_Q187;\nGreater_Than_B187(Z_Q228,0.0,Not_Greater_Than_Q187,Greater_Than_Q187);\nvec4 Linear_Q251;\nLinear_Q251.rgb=clamp(_Left_Color_.rgb*_Left_Color_.rgb,0.0,1.0);\nLinear_Q251.a=_Left_Color_.a;\nvec4 Linear_Q252;\nLinear_Q252.rgb=clamp(_Right_Color_.rgb*_Right_Color_.rgb,0.0,1.0);\nLinear_Q252.a=_Right_Color_.a;\nvec3 Difference_Q211=vec3(0,0,0)-Normal_World_N_Q210;\nvec4 Out_Color_Q184=vec4(X_Q228,Y_Q228,Z_Q228,1);\nfloat Result_Q186;\nConditional_Float_B186(Greater_Than_Q187,_Bevel_Back_,_Bevel_Front_,Result_Q186);\nfloat Result_Q244;\nConditional_Float_B186(Greater_Than_Q187,_Bevel_Back_Stretch_,_Bevel_Front_Stretch_,Result_Q244);\nvec3 New_P_Q280;\nvec2 New_UV_Q280;\nfloat Radial_Gradient_Q280;\nvec3 Radial_Dir_Q280;\nvec3 New_Normal_Q280;\nMove_Verts_B280(Anisotropy_Q179,position,Result_Q219,Result_Q186,normal,Anisotropy_Q203,Result_Q244,New_P_Q280,New_UV_Q280,Radial_Gradient_Q280,Radial_Dir_Q280,New_Normal_Q280);\nfloat X_Q248;\nfloat Y_Q248;\nX_Q248=New_UV_Q280.x;\nY_Q248=New_UV_Q280.y;\nvec3 Pos_World_Q162;\nObject_To_World_Pos_B162(New_P_Q280,Pos_World_Q162);\nvec3 Nrm_World_Q182;\nObject_To_World_Normal_B182(New_Normal_Q280,Nrm_World_Q182);\nvec4 Blob_Info_Q173;\n#if BLOB_ENABLE\nBlob_Vertex_B173(Pos_World_Q162,Nrm_World_Q176,Tangent_World_N_Q177,Binormal_World_N_Q178,_Blob_Position_,_Blob_Intensity_,_Blob_Near_Size_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_,_Blob_Fade_,Blob_Info_Q173);\n#else\nBlob_Info_Q173=vec4(0,0,0,0);\n#endif\nvec4 Blob_Info_Q174;\n#if BLOB_ENABLE_2\nBlob_Vertex_B174(Pos_World_Q162,Nrm_World_Q176,Tangent_World_N_Q177,Binormal_World_N_Q178,_Blob_Position_2_,_Blob_Intensity_,_Blob_Near_Size_2_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_2_,_Blob_Fade_2_,Blob_Info_Q174);\n#else\nBlob_Info_Q174=vec4(0,0,0,0);\n#endif\nfloat Out_Q255;\nRemap_Range_B255(0.0,1.0,0.0,1.0,X_Q248,Out_Q255);\nfloat X_Q236;\nfloat Y_Q236;\nfloat Z_Q236;\nTo_XYZ_B228(Nrm_World_Q182,X_Q236,Y_Q236,Z_Q236);\nvec4 Color_At_T_Q247=mix(Linear_Q251,Linear_Q252,Out_Q255);\nfloat Minus_F_Q237=-Z_Q236;\nfloat R_Q249;\nfloat G_Q249;\nfloat B_Q249;\nfloat A_Q249;\nR_Q249=Color_At_T_Q247.r; G_Q249=Color_At_T_Q247.g; B_Q249=Color_At_T_Q247.b; A_Q249=Color_At_T_Q247.a;\nfloat ClampF_Q238=clamp(0.0,Minus_F_Q237,1.0);\nfloat Result_Q243;\nConditional_Float_B243(_Decal_Front_Only_,ClampF_Q238,1.0,Result_Q243);\nvec4 Vec4_Q239=vec4(Result_Q243,Radial_Gradient_Q280,G_Q249,B_Q249);\nvec3 Position=Pos_World_Q162;\nvec3 Normal=Nrm_World_Q182;\nvec2 UV=XY_Q235;\nvec3 Tangent=Tangent_World_N_Q177;\nvec3 Binormal=Difference_Q211;\nvec4 Color=Out_Color_Q184;\nvec4 Extra1=Vec4_Q239;\nvec4 Extra2=Blob_Info_Q173;\nvec4 Extra3=Blob_Info_Q174;\ngl_Position=viewProjection*vec4(Position,1);\nvPosition=Position;\nvNormal=Normal;\nvUV=UV;\nvTangent=Tangent;\nvBinormal=Binormal;\nvColor=Color;\nvExtra1=Extra1;\nvExtra2=Extra2;\nvExtra3=Extra3;\n}";
                core_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
                var mrdlSliderThumbVertexShader = { name, shader };
              }
            ),
            /***/
            "../../../lts/gui/dist/3D/vector3WithInfo.js": (
              /*!***************************************************!*\
                !*** ../../../lts/gui/dist/3D/vector3WithInfo.js ***!
                \***************************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "Vector3WithInfo": () => (
                    /* binding */
                    Vector3WithInfo
                  )
                  /* harmony export */
                });
                var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! tslib */
                  "../../../../node_modules/tslib/tslib.es6.js"
                );
                var core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! core/Maths/math.vector */
                  "core/Misc/perfCounter"
                );
                var core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1___default = __webpack_require__2.n(core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__);
                var Vector3WithInfo = (
                  /** @class */
                  function(_super) {
                    (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Vector3WithInfo2, _super);
                    function Vector3WithInfo2(source, buttonIndex) {
                      if (buttonIndex === void 0) {
                        buttonIndex = 0;
                      }
                      var _this = _super.call(this, source.x, source.y, source.z) || this;
                      _this.buttonIndex = buttonIndex;
                      return _this;
                    }
                    return Vector3WithInfo2;
                  }(core_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3)
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/index.js": (
              /*!**************************************!*\
                !*** ../../../lts/gui/dist/index.js ***!
                \**************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "AbstractButton3D": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.AbstractButton3D
                  ),
                  /* harmony export */
                  "AdvancedDynamicTexture": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.AdvancedDynamicTexture
                  ),
                  /* harmony export */
                  "AdvancedDynamicTextureInstrumentation": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.AdvancedDynamicTextureInstrumentation
                  ),
                  /* harmony export */
                  "BaseGradient": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.BaseGradient
                  ),
                  /* harmony export */
                  "BaseSlider": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.BaseSlider
                  ),
                  /* harmony export */
                  "Button": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.Button
                  ),
                  /* harmony export */
                  "Button3D": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.Button3D
                  ),
                  /* harmony export */
                  "Checkbox": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.Checkbox
                  ),
                  /* harmony export */
                  "CheckboxGroup": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.CheckboxGroup
                  ),
                  /* harmony export */
                  "ColorPicker": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.ColorPicker
                  ),
                  /* harmony export */
                  "Container": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.Container
                  ),
                  /* harmony export */
                  "Container3D": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.Container3D
                  ),
                  /* harmony export */
                  "Control": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.Control
                  ),
                  /* harmony export */
                  "Control3D": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.Control3D
                  ),
                  /* harmony export */
                  "CornerHandle": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.CornerHandle
                  ),
                  /* harmony export */
                  "CylinderPanel": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.CylinderPanel
                  ),
                  /* harmony export */
                  "DisplayGrid": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.DisplayGrid
                  ),
                  /* harmony export */
                  "Ellipse": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.Ellipse
                  ),
                  /* harmony export */
                  "FluentBackplateMaterial": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.FluentBackplateMaterial
                  ),
                  /* harmony export */
                  "FluentButtonMaterial": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.FluentButtonMaterial
                  ),
                  /* harmony export */
                  "FluentMaterial": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.FluentMaterial
                  ),
                  /* harmony export */
                  "FluentMaterialDefines": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.FluentMaterialDefines
                  ),
                  /* harmony export */
                  "FocusableButton": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.FocusableButton
                  ),
                  /* harmony export */
                  "GUI3DManager": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.GUI3DManager
                  ),
                  /* harmony export */
                  "GizmoHandle": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.GizmoHandle
                  ),
                  /* harmony export */
                  "Grid": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.Grid
                  ),
                  /* harmony export */
                  "HandMenu": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.HandMenu
                  ),
                  /* harmony export */
                  "HandleMaterial": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.HandleMaterial
                  ),
                  /* harmony export */
                  "HandleState": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.HandleState
                  ),
                  /* harmony export */
                  "HolographicBackplate": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.HolographicBackplate
                  ),
                  /* harmony export */
                  "HolographicButton": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.HolographicButton
                  ),
                  /* harmony export */
                  "HolographicSlate": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.HolographicSlate
                  ),
                  /* harmony export */
                  "Image": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.Image
                  ),
                  /* harmony export */
                  "ImageBasedSlider": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.ImageBasedSlider
                  ),
                  /* harmony export */
                  "ImageScrollBar": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.ImageScrollBar
                  ),
                  /* harmony export */
                  "InputPassword": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.InputPassword
                  ),
                  /* harmony export */
                  "InputText": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.InputText
                  ),
                  /* harmony export */
                  "InputTextArea": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.InputTextArea
                  ),
                  /* harmony export */
                  "KeyPropertySet": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.KeyPropertySet
                  ),
                  /* harmony export */
                  "Line": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.Line
                  ),
                  /* harmony export */
                  "LinearGradient": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.LinearGradient
                  ),
                  /* harmony export */
                  "MRDLBackplateMaterial": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.MRDLBackplateMaterial
                  ),
                  /* harmony export */
                  "MRDLSliderBarMaterial": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.MRDLSliderBarMaterial
                  ),
                  /* harmony export */
                  "MRDLSliderThumbMaterial": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.MRDLSliderThumbMaterial
                  ),
                  /* harmony export */
                  "MathTools": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.MathTools
                  ),
                  /* harmony export */
                  "Matrix2D": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.Matrix2D
                  ),
                  /* harmony export */
                  "Measure": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.Measure
                  ),
                  /* harmony export */
                  "MeshButton3D": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.MeshButton3D
                  ),
                  /* harmony export */
                  "MultiLine": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.MultiLine
                  ),
                  /* harmony export */
                  "MultiLinePoint": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.MultiLinePoint
                  ),
                  /* harmony export */
                  "NearMenu": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.NearMenu
                  ),
                  /* harmony export */
                  "PlanePanel": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.PlanePanel
                  ),
                  /* harmony export */
                  "RadialGradient": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.RadialGradient
                  ),
                  /* harmony export */
                  "RadioButton": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.RadioButton
                  ),
                  /* harmony export */
                  "RadioGroup": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.RadioGroup
                  ),
                  /* harmony export */
                  "Rectangle": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.Rectangle
                  ),
                  /* harmony export */
                  "ScatterPanel": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.ScatterPanel
                  ),
                  /* harmony export */
                  "ScrollBar": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.ScrollBar
                  ),
                  /* harmony export */
                  "ScrollViewer": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.ScrollViewer
                  ),
                  /* harmony export */
                  "SelectionPanel": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.SelectionPanel
                  ),
                  /* harmony export */
                  "SelectorGroup": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.SelectorGroup
                  ),
                  /* harmony export */
                  "SideHandle": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.SideHandle
                  ),
                  /* harmony export */
                  "SlateGizmo": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.SlateGizmo
                  ),
                  /* harmony export */
                  "Slider": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.Slider
                  ),
                  /* harmony export */
                  "Slider3D": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.Slider3D
                  ),
                  /* harmony export */
                  "SliderGroup": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.SliderGroup
                  ),
                  /* harmony export */
                  "SpherePanel": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.SpherePanel
                  ),
                  /* harmony export */
                  "StackPanel": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.StackPanel
                  ),
                  /* harmony export */
                  "StackPanel3D": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.StackPanel3D
                  ),
                  /* harmony export */
                  "Style": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.Style
                  ),
                  /* harmony export */
                  "TextBlock": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.TextBlock
                  ),
                  /* harmony export */
                  "TextWrapper": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.TextWrapper
                  ),
                  /* harmony export */
                  "TextWrapping": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.TextWrapping
                  ),
                  /* harmony export */
                  "ToggleButton": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.ToggleButton
                  ),
                  /* harmony export */
                  "TouchButton3D": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.TouchButton3D
                  ),
                  /* harmony export */
                  "TouchHolographicButton": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.TouchHolographicButton
                  ),
                  /* harmony export */
                  "TouchHolographicButtonV3": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.TouchHolographicButtonV3
                  ),
                  /* harmony export */
                  "TouchHolographicMenu": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.TouchHolographicMenu
                  ),
                  /* harmony export */
                  "TouchMeshButton3D": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.TouchMeshButton3D
                  ),
                  /* harmony export */
                  "ValueAndUnit": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.ValueAndUnit
                  ),
                  /* harmony export */
                  "Vector2WithInfo": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.Vector2WithInfo
                  ),
                  /* harmony export */
                  "Vector3WithInfo": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.Vector3WithInfo
                  ),
                  /* harmony export */
                  "VirtualKeyboard": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.VirtualKeyboard
                  ),
                  /* harmony export */
                  "VolumeBasedPanel": () => (
                    /* reexport safe */
                    _3D_index__WEBPACK_IMPORTED_MODULE_1__.VolumeBasedPanel
                  ),
                  /* harmony export */
                  "XmlLoader": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.XmlLoader
                  ),
                  /* harmony export */
                  "name": () => (
                    /* reexport safe */
                    _2D_index__WEBPACK_IMPORTED_MODULE_0__.name
                  )
                  /* harmony export */
                });
                var _2D_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! ./2D/index */
                  "../../../lts/gui/dist/2D/index.js"
                );
                var _3D_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
                  /*! ./3D/index */
                  "../../../lts/gui/dist/3D/index.js"
                );
              }
            ),
            /***/
            "../../../lts/gui/dist/legacy/legacy.js": (
              /*!**********************************************!*\
                !*** ../../../lts/gui/dist/legacy/legacy.js ***!
                \**********************************************/
              /***/
              (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "AbstractButton3D": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.AbstractButton3D
                  ),
                  /* harmony export */
                  "AdvancedDynamicTexture": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.AdvancedDynamicTexture
                  ),
                  /* harmony export */
                  "AdvancedDynamicTextureInstrumentation": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.AdvancedDynamicTextureInstrumentation
                  ),
                  /* harmony export */
                  "BaseGradient": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.BaseGradient
                  ),
                  /* harmony export */
                  "BaseSlider": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.BaseSlider
                  ),
                  /* harmony export */
                  "Button": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.Button
                  ),
                  /* harmony export */
                  "Button3D": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.Button3D
                  ),
                  /* harmony export */
                  "Checkbox": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.Checkbox
                  ),
                  /* harmony export */
                  "CheckboxGroup": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.CheckboxGroup
                  ),
                  /* harmony export */
                  "ColorPicker": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.ColorPicker
                  ),
                  /* harmony export */
                  "Container": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.Container
                  ),
                  /* harmony export */
                  "Container3D": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.Container3D
                  ),
                  /* harmony export */
                  "Control": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.Control
                  ),
                  /* harmony export */
                  "Control3D": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.Control3D
                  ),
                  /* harmony export */
                  "CornerHandle": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.CornerHandle
                  ),
                  /* harmony export */
                  "CylinderPanel": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.CylinderPanel
                  ),
                  /* harmony export */
                  "DisplayGrid": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.DisplayGrid
                  ),
                  /* harmony export */
                  "Ellipse": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.Ellipse
                  ),
                  /* harmony export */
                  "FluentBackplateMaterial": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.FluentBackplateMaterial
                  ),
                  /* harmony export */
                  "FluentButtonMaterial": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.FluentButtonMaterial
                  ),
                  /* harmony export */
                  "FluentMaterial": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.FluentMaterial
                  ),
                  /* harmony export */
                  "FluentMaterialDefines": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.FluentMaterialDefines
                  ),
                  /* harmony export */
                  "FocusableButton": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.FocusableButton
                  ),
                  /* harmony export */
                  "GUI3DManager": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.GUI3DManager
                  ),
                  /* harmony export */
                  "GizmoHandle": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.GizmoHandle
                  ),
                  /* harmony export */
                  "Grid": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.Grid
                  ),
                  /* harmony export */
                  "HandMenu": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.HandMenu
                  ),
                  /* harmony export */
                  "HandleMaterial": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.HandleMaterial
                  ),
                  /* harmony export */
                  "HandleState": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.HandleState
                  ),
                  /* harmony export */
                  "HolographicBackplate": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.HolographicBackplate
                  ),
                  /* harmony export */
                  "HolographicButton": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.HolographicButton
                  ),
                  /* harmony export */
                  "HolographicSlate": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.HolographicSlate
                  ),
                  /* harmony export */
                  "Image": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.Image
                  ),
                  /* harmony export */
                  "ImageBasedSlider": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.ImageBasedSlider
                  ),
                  /* harmony export */
                  "ImageScrollBar": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.ImageScrollBar
                  ),
                  /* harmony export */
                  "InputPassword": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.InputPassword
                  ),
                  /* harmony export */
                  "InputText": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.InputText
                  ),
                  /* harmony export */
                  "InputTextArea": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.InputTextArea
                  ),
                  /* harmony export */
                  "KeyPropertySet": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.KeyPropertySet
                  ),
                  /* harmony export */
                  "Line": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.Line
                  ),
                  /* harmony export */
                  "LinearGradient": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.LinearGradient
                  ),
                  /* harmony export */
                  "MRDLBackplateMaterial": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.MRDLBackplateMaterial
                  ),
                  /* harmony export */
                  "MRDLSliderBarMaterial": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.MRDLSliderBarMaterial
                  ),
                  /* harmony export */
                  "MRDLSliderThumbMaterial": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.MRDLSliderThumbMaterial
                  ),
                  /* harmony export */
                  "MathTools": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.MathTools
                  ),
                  /* harmony export */
                  "Matrix2D": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.Matrix2D
                  ),
                  /* harmony export */
                  "Measure": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.Measure
                  ),
                  /* harmony export */
                  "MeshButton3D": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.MeshButton3D
                  ),
                  /* harmony export */
                  "MultiLine": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.MultiLine
                  ),
                  /* harmony export */
                  "MultiLinePoint": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.MultiLinePoint
                  ),
                  /* harmony export */
                  "NearMenu": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.NearMenu
                  ),
                  /* harmony export */
                  "PlanePanel": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.PlanePanel
                  ),
                  /* harmony export */
                  "RadialGradient": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.RadialGradient
                  ),
                  /* harmony export */
                  "RadioButton": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.RadioButton
                  ),
                  /* harmony export */
                  "RadioGroup": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.RadioGroup
                  ),
                  /* harmony export */
                  "Rectangle": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.Rectangle
                  ),
                  /* harmony export */
                  "ScatterPanel": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.ScatterPanel
                  ),
                  /* harmony export */
                  "ScrollBar": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.ScrollBar
                  ),
                  /* harmony export */
                  "ScrollViewer": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.ScrollViewer
                  ),
                  /* harmony export */
                  "SelectionPanel": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.SelectionPanel
                  ),
                  /* harmony export */
                  "SelectorGroup": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.SelectorGroup
                  ),
                  /* harmony export */
                  "SideHandle": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.SideHandle
                  ),
                  /* harmony export */
                  "SlateGizmo": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.SlateGizmo
                  ),
                  /* harmony export */
                  "Slider": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.Slider
                  ),
                  /* harmony export */
                  "Slider3D": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.Slider3D
                  ),
                  /* harmony export */
                  "SliderGroup": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.SliderGroup
                  ),
                  /* harmony export */
                  "SpherePanel": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.SpherePanel
                  ),
                  /* harmony export */
                  "StackPanel": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.StackPanel
                  ),
                  /* harmony export */
                  "StackPanel3D": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.StackPanel3D
                  ),
                  /* harmony export */
                  "Style": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.Style
                  ),
                  /* harmony export */
                  "TextBlock": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.TextBlock
                  ),
                  /* harmony export */
                  "TextWrapper": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.TextWrapper
                  ),
                  /* harmony export */
                  "TextWrapping": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.TextWrapping
                  ),
                  /* harmony export */
                  "ToggleButton": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.ToggleButton
                  ),
                  /* harmony export */
                  "TouchButton3D": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.TouchButton3D
                  ),
                  /* harmony export */
                  "TouchHolographicButton": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.TouchHolographicButton
                  ),
                  /* harmony export */
                  "TouchHolographicButtonV3": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.TouchHolographicButtonV3
                  ),
                  /* harmony export */
                  "TouchHolographicMenu": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.TouchHolographicMenu
                  ),
                  /* harmony export */
                  "TouchMeshButton3D": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.TouchMeshButton3D
                  ),
                  /* harmony export */
                  "ValueAndUnit": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.ValueAndUnit
                  ),
                  /* harmony export */
                  "Vector2WithInfo": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.Vector2WithInfo
                  ),
                  /* harmony export */
                  "Vector3WithInfo": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.Vector3WithInfo
                  ),
                  /* harmony export */
                  "VirtualKeyboard": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.VirtualKeyboard
                  ),
                  /* harmony export */
                  "VolumeBasedPanel": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.VolumeBasedPanel
                  ),
                  /* harmony export */
                  "XmlLoader": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.XmlLoader
                  ),
                  /* harmony export */
                  "name": () => (
                    /* reexport safe */
                    _index__WEBPACK_IMPORTED_MODULE_0__.name
                  )
                  /* harmony export */
                });
                var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
                  /*! ../index */
                  "../../../lts/gui/dist/index.js"
                );
                var globalObject = typeof __webpack_require__2.g !== "undefined" ? __webpack_require__2.g : typeof window !== "undefined" ? window : void 0;
                if (typeof globalObject !== "undefined") {
                  globalObject.BABYLON = globalObject.BABYLON || {};
                  if (!globalObject.BABYLON.GUI) {
                    globalObject.BABYLON.GUI = _index__WEBPACK_IMPORTED_MODULE_0__;
                  }
                }
              }
            ),
            /***/
            "core/Misc/perfCounter": (
              /*!****************************************************************************************************!*\
                !*** external {"root":"BABYLON","commonjs":"babylonjs","commonjs2":"babylonjs","amd":"babylonjs"} ***!
                \****************************************************************************************************/
              /***/
              (module2) => {
                module2.exports = __WEBPACK_EXTERNAL_MODULE_core_Misc_perfCounter__;
              }
            )
            /******/
          };
          var __webpack_module_cache__ = {};
          function __webpack_require__(moduleId) {
            var cachedModule = __webpack_module_cache__[moduleId];
            if (cachedModule !== void 0) {
              return cachedModule.exports;
            }
            var module2 = __webpack_module_cache__[moduleId] = {
              /******/
              // no module.id needed
              /******/
              // no module.loaded needed
              /******/
              exports: {}
              /******/
            };
            __webpack_modules__[moduleId](module2, module2.exports, __webpack_require__);
            return module2.exports;
          }
          (() => {
            __webpack_require__.n = (module2) => {
              var getter = module2 && module2.__esModule ? (
                /******/
                () => module2["default"]
              ) : (
                /******/
                () => module2
              );
              __webpack_require__.d(getter, { a: getter });
              return getter;
            };
          })();
          (() => {
            __webpack_require__.d = (exports2, definition) => {
              for (var key in definition) {
                if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports2, key)) {
                  Object.defineProperty(exports2, key, { enumerable: true, get: definition[key] });
                }
              }
            };
          })();
          (() => {
            __webpack_require__.g = function() {
              if (typeof globalThis === "object")
                return globalThis;
              try {
                return this || new Function("return this")();
              } catch (e) {
                if (typeof window === "object")
                  return window;
              }
            }();
          })();
          (() => {
            __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);
          })();
          (() => {
            __webpack_require__.r = (exports2) => {
              if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
                Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
              }
              Object.defineProperty(exports2, "__esModule", { value: true });
            };
          })();
          var __webpack_exports__ = {};
          (() => {
            __webpack_require__.r(__webpack_exports__);
            __webpack_require__.d(__webpack_exports__, {
              /* harmony export */
              "default": () => __WEBPACK_DEFAULT_EXPORT__,
              /* harmony export */
              "gui": () => (
                /* reexport module object */
                gui_legacy_legacy__WEBPACK_IMPORTED_MODULE_0__
              )
              /* harmony export */
            });
            var gui_legacy_legacy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
              /*! gui/legacy/legacy */
              "../../../lts/gui/dist/legacy/legacy.js"
            );
            const __WEBPACK_DEFAULT_EXPORT__ = gui_legacy_legacy__WEBPACK_IMPORTED_MODULE_0__;
          })();
          __webpack_exports__ = __webpack_exports__["default"];
          return __webpack_exports__;
        })()
      );
    });
  }
});
export default require_babylon_gui();
/*! Bundled license information:

babylonjs-gui/babylon.gui.js:
  (*!**********************!*\
    !*** ./src/index.ts ***!
    \**********************)
*/
//# sourceMappingURL=babylonjs-gui.js.map
